::Windows Deployment Image Customization Kit v 1204 (c) github.com/joshuacline
::Build, administrate and backup your Windows in a native WinPE recovery environment.
@ECHO OFF&&SETLOCAL ENABLEDELAYEDEXPANSION&&CHCP 65001>NUL
SET "VER_GET=%0"&&CALL:GET_PROGVER&&SET "ARG0=%*"
SET "ORIG_CD=%CD%"&&CD /D "%~DP0"&&CALL:GET_INIT
IF DEFINED ERR_MSG ECHO.ERROR: %ERR_MSG%&&PAUSE&&GOTO:QUIT
FOR %%1 in (1 2 3 4 5 6 7 8 9) DO (CALL SET "ARG%%1=%%%%1%%")
CALL:GET_ARGS&CALL:GET_SID&CALL:MOUNT_INT
IF DEFINED ARG1 SET "PROG_MODE=COMMAND"&&GOTO:COMMAND_MODE
IF NOT "%PROG_FOLDER%"=="X:\$" SET "PROG_MODE=PORTABLE"&&CALL:SETS_HANDLER&&GOTO:MAIN_MENU
IF "%PROG_FOLDER%"=="X:\$" IF "%SystemDrive%"=="X:" SET "PROG_MODE=RAMDISK"
IF EXIST "%PROG_FOLDER%\RECOVERY_LOCK" CALL:RECOVERY_LOCK
IF DEFINED LOCKOUT GOTO:QUIT
CALL:HOST_AUTO&&CALL:SETS_HANDLER&&CALL:LOGO
REG.EXE DELETE "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\MiniNT" /f>NUL 2>&1
::#########################################################################
:MAIN_MENU
::#########################################################################
@ECHO OFF&&CLS&&SET "MOUNT="&&IF NOT DEFINED MENU_MODE SET "MENU_MODE=NORMAL"
IF NOT "%WINPE_BOOT%"=="1" IF NOT "%GUI_LAUNCH%"=="DISABLED" IF EXIST "%PROG_FOLDER%\windick.ps1" START powershell -WindowStyle Minimized -executionpolicy bypass "%PROG_FOLDER%\windick.ps1"&GOTO:QUIT
IF "%MENU_MODE%"=="CUSTOM" GOTO:CUSTOM_MODE
IF "%MENU_MODE%"=="BASIC" IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF "%MENU_MODE%"=="BASIC" IF "%PROG_MODE%"=="PORTABLE" GOTO:BASIC_CREATOR
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:GET_SPACE&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.              Windows Deployment Image Customization Kit&&ECHO.&&ECHO. (%##%1%$$%) Image Processing&&ECHO. (%##%2%$$%) Image Management&&ECHO. (%##%3%$$%) Package Creator&&ECHO. (%##%4%$$%) File Management&&ECHO. (%##%5%$$%) Disk Management&&ECHO. (%##%6%$$%) Settings&&IF NOT "%WINPE_BOOT%"=="1" IF EXIST "%PROG_FOLDER%\windick.ps1" ECHO. (%##%7%$$%) Switch to GUI
IF "%PROG_MODE%"=="RAMDISK" ECHO. (%##%.%$$%) Change Boot Order
ECHO.&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="Z:\%HOST_FOLDERX%" ECHO.          ^< Disk %@@%%HOST_NUMBER%%$$% UID %@@%%HOST_TARGET%%$$% ^>
IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" ECHO.        ^< Disk %XLR2%Error%$$% UID %XLR2%%HOST_TARGET%%$$% ^>
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&TITLE Windows Deployment Image Customization Kit v%VER_CUR%  (%PROG_SOURCE%)
ECHO. (%##%Q%$$%)uit  (%##%*%$$%) Basic Menu                                    %@@%%FREE%GB%$$% Free&&CALL:PAD_LINE
CALL:MENU_SELECT
IF "%SELECT%"=="Q" GOTO:QUIT
IF DEFINED SELECT CALL:SHORTCUT_RUN
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF "%SELECT%"=="1" GOTO:IMAGE_PROCESSING
IF "%SELECT%"=="2" GOTO:IMAGE_MANAGER
IF "%SELECT%"=="3" GOTO:PACKAGE_CREATOR
IF "%SELECT%"=="4" GOTO:FILE_MANAGER
IF "%SELECT%"=="5" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER
IF "%SELECT%"=="5" IF DEFINED DISCLAIMER GOTO:DISK_MANAGEMENT
IF "%SELECT%"=="6" GOTO:SETTINGS_MENU
IF "%SELECT%"=="7" SET "GUI_LAUNCH=ENABLED"&&(ECHO.&&ECHO.GUI_LAUNCH=ENABLED)>>"windick.ini"
IF "%SELECT%"=="~" SET&&CALL:PAUSED
IF "%SELECT%"=="*" IF "%PROG_MODE%"=="PORTABLE" SET "MENU_MODE=BASIC"&&GOTO:BASIC_CREATOR
IF "%SELECT%"=="*" IF "%PROG_MODE%"=="RAMDISK" SET "MENU_MODE=BASIC"&&GOTO:BASIC_MODE
IF "%SELECT%"=="." IF "%PROG_MODE%"=="RAMDISK" CALL:BCD_MENU
GOTO:MAIN_MENU
:BASIC_MODE
@ECHO OFF&&SET "MOUNT="&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:GET_SPACE&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.              Windows Deployment Image Customization Kit&&ECHO.&&ECHO. (%##%1%$$%) Backup&&ECHO. (%##%2%$$%) Restore&&ECHO. (%##%3%$$%) Boot Creator&&ECHO. (%##%.%$$%) Change Boot Order
ECHO.&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="Z:\%HOST_FOLDERX%" ECHO.          ^< Disk %@@%%HOST_NUMBER%%$$% UID %@@%%HOST_TARGET%%$$% ^>
IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" ECHO.        ^< Disk %XLR2%Error%$$% UID %XLR2%%HOST_TARGET%%$$% ^>
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&TITLE Windows Deployment Image Customization Kit v%VER_CUR%  (%PROG_SOURCE%)
ECHO. (%##%Q%$$%)uit  (%##%*%$$%) Main Menu                                     %@@%%FREE%GB%$$% Free&&CALL:PAD_LINE
CALL:MENU_SELECT
IF "%SELECT%"=="Q" GOTO:QUIT
IF DEFINED SELECT CALL:SHORTCUT_RUN
IF DEFINED HOST_ERROR GOTO:BASIC_MODE
IF "%SELECT%"=="." CALL:BCD_MENU&SET "SELECT="
IF "%SELECT%"=="1" CALL:BASIC_BACKUP&SET "SELECT="
IF "%SELECT%"=="2" CALL:BASIC_RESTORE&SET "SELECT="
IF "%SELECT%"=="3" GOTO:BASIC_CREATOR
IF "%SELECT%"=="*" SET "MENU_MODE=NORMAL"&&GOTO:MAIN_MENU
GOTO:BASIC_MODE
:PAD_LINE
IF NOT DEFINED PAD_TYPE SET "PAD_TYPE=1"
IF NOT DEFINED ACC_COLOR SET "ACC_COLOR=6"
IF NOT DEFINED BTN_COLOR SET "BTN_COLOR=7"
IF NOT DEFINED TXT_COLOR SET "TXT_COLOR=0"
IF NOT DEFINED PAD_SIZE SET "PAD_SIZE=LARGE"
IF NOT DEFINED PAD_SEQ SET "PAD_SEQ=6666600000"
FOR %%a in (1 2 3 4 5 6 7 8) DO (IF "%PAD_TYPE%"=="%%a" CHCP 65001>NUL)
IF "%PAD_TYPE%"=="0" SET "PADX= "
IF "%PAD_TYPE%"=="1" SET "PADX=◌"
IF "%PAD_TYPE%"=="2" SET "PADX=○"
IF "%PAD_TYPE%"=="3" SET "PADX=●"
IF "%PAD_TYPE%"=="4" SET "PADX=□"
IF "%PAD_TYPE%"=="5" SET "PADX=■"
IF "%PAD_TYPE%"=="6" SET "PADX=░"
IF "%PAD_TYPE%"=="7" SET "PADX=▒"
IF "%PAD_TYPE%"=="8" SET "PADX=▓"
IF "%PAD_TYPE%"=="9" SET "PADX=~"
IF "%PAD_TYPE%"=="10" SET "PADX=="
IF "%PAD_TYPE%"=="11" SET "PADX=#"
IF "%PAD_TYPE%"=="0" ECHO.%$$%&&EXIT /B
SET "PAD_SEQX=%PAD_SEQ%"&&IF NOT "%PAD_SEQ%X"=="%PAD_SEQX%X" SET "XNTX=0"&&SET "XLRX="&&FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO.%PAD_SEQ%^| FIND /V ""') do (CALL SET "XLRX=%%G"&&CALL:COLOR_ASSIGN&&CALL SET /A XNTX+=1)
IF "%PAD_SIZE%"=="LARGE" SET "PAD_BLK=%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%"
IF "%PAD_SIZE%"=="SMALL" SET "PAD_BLK=%#0%%PADX%%#1%%PADX%%#2%%PADX%%#3%%PADX%%#4%%PADX%%#5%%PADX%%#6%%PADX%%#7%%PADX%%#8%%PADX%%#9%%PADX%"
IF "%PAD_SIZE%"=="LARGE" ECHO.%#0%%PAD_BLK%%#1%%PAD_BLK%%#2%%PAD_BLK%%#3%%PAD_BLK%%#4%%PAD_BLK%%#5%%PAD_BLK%%#6%%PAD_BLK%%$$%
IF "%PAD_SIZE%"=="SMALL" ECHO.%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%$$%
SET "#Z=%$$%"&&SET "#0=%#1%"&SET "#1=%#2%"&SET "#2=%#3%"&SET "#3=%#4%"&SET "#4=%#5%"&SET "#5=%#6%"&SET "#6=%#7%"&SET "#7=%#8%"&SET "#8=%#9%"&SET "#9=%#0%"&&SET "PAD_BLK="&&SET "PADX="&&SET "XLRX=%$$%"
EXIT /B
:COLOR_ASSIGN
IF DEFINED XNTX CALL SET "#%XNTX%=%%XLR%XLRX%%%"
EXIT /B
:PAD_WRITE
CHCP 65001>NUL&&ECHO.■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
::ECHO.>>"TXT.TXT" 2>&1
EXIT /B
:BOX_DISP
FOR %%a in (PROG_FOLDER $BOX) DO (IF NOT DEFINED %%a EXIT /B)
IF NOT DEFINED PAD_BOX SET "PAD_BOX=ENABLED"
IF "%PAD_BOX%"=="DISABLED" EXIT /B
CHCP 65001>NUL&GOTO:BOX_%$BOX%
:BOX_RT
ECHO.%##%╭────────────────────────────────────────────────────────────────────╮%$$%&EXIT /B
:BOX_RB
ECHO.%##%╰────────────────────────────────────────────────────────────────────╯%$$%&EXIT /B
:BOX_ST
ECHO.%##%┌────────────────────────────────────────────────────────────────────┐%$$%&EXIT /B
:BOX_SB
ECHO.%##%└────────────────────────────────────────────────────────────────────┘%$$%&EXIT /B
EXIT /B
:MENU_SELECT
IF DEFINED ERROR CALL:DEBUG&&SET "ERROR="
IF NOT DEFINED $CASE SET "$CASE=UPPER"
IF NOT DEFINED $CHECK SET "$CHECK=MENU"
IF NOT DEFINED $SELECT SET "$SELECT=SELECT"
SET "%$SELECT%="&&SET "SELECT_VAR="&&SET /P "SELECT_VAR=$>>"
IF DEFINED SELECT_VAR SET "SELECT_VAR=%SELECT_VAR:"=%"
IF DEFINED SELECT_VAR SET "CHECK_VAR=%SELECT_VAR%"&&CALL:CHECK
IF NOT DEFINED ERROR IF "%$CASE%"=="ANY" SET "%$SELECT%=%SELECT_VAR%"
IF NOT DEFINED ERROR FOR %%$ in (UPPER LOWER) DO (IF "%%$"=="%$CASE%" SET "CAPS_SET=%$SELECT%"&&SET "CAPS_VAR=%SELECT_VAR%"&&CALL:CAPS_SET)
IF DEFINED ERROR SET "%$SELECT%="&&IF DEFINED VERBOSE FOR /F "TOKENS=*" %%a in ("%SELECT_VAR% ") DO (ECHO. %XLR4%ERROR:%$$% input [ %XLR4%%%a%$$%] is invalid)
FOR %%a in ($CHOICE $CASE $CHECK $SELECT SELECT_VAR VERBOSE) DO (SET "%%a=")
ECHO.%$$%&&CALL SET "$CHOICE=%%$ITEM%SELECT%%%"
IF NOT DEFINED $PICKER EXIT /B
FOR %%a in ($PICKER $PICK $PATH $BODY $EXT) DO (SET "%%a=")
IF NOT DEFINED $CHOICE EXIT /B
IF NOT EXIST "%$FOLD%\%$CHOICE%" EXIT /B
IF EXIST "%$FOLD%\%$CHOICE%" SET "$PICK=%$FOLD%\%$CHOICE%"
IF NOT DEFINED ERROR FOR %%G in ("%$PICK%") DO (SET "$PATH=%%~dG%%~pG"&&SET "$BODY=%%~nG"&&SET "$EXT=%%~xG")
IF NOT DEFINED ERROR FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "$EXT=%%$EXT:%%G=%%G%%")
EXIT /B
:CAPS_SET
IF NOT DEFINED CAPS_VAR SET "%CAPS_SET%="&&SET "CAPS_SET="&&SET "CAPS_VAR="&&SET "$CASE="&&EXIT /B
IF NOT DEFINED $CASE SET "$CASE=UPPER"
IF "%$CASE%"=="LOWER" FOR %%G in (a b c d e f g h i j k l m n o p q r s t u v w x y z) DO (CALL SET "CAPS_VAR=%%CAPS_VAR:%%G=%%G%%")
IF "%$CASE%"=="UPPER" FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "CAPS_VAR=%%CAPS_VAR:%%G=%%G%%")
IF "%CAPS_VAR%"=="=" SET "CAPS_VAR="
IF "%CAPS_VAR%"=="a=a" SET "CAPS_VAR="
IF "%CAPS_VAR%"=="A=A" SET "CAPS_VAR="
CALL SET "%CAPS_SET%=%CAPS_VAR%"
SET "CAPS_SET="&&SET "CAPS_VAR="&&SET "$CASE="
EXIT /B
:CHECK
IF NOT DEFINED CHECK_VAR SET "ERROR=CHECK"
IF "%$CHECK%"=="NUM" SET "CHECK_FLT=0 1 2 3 4 5 6 7 8 9 ^""
IF "%$CHECK%"=="LTR" SET "CHECK_FLT=A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z ^""
IF "%$CHECK%"=="ALPHA" SET "CHECK_FLT=0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z ^""
IF "%$CHECK%"=="MENU" SET "CHECK_FLT=0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z @ # $ . - _ + = ~ ^* ^""
IF "%$CHECK%"=="MOST" SET "CHECK_FLT=0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z @ # $ ^\ ^/ ^: ^( ^) ^[ ^] ^{ ^} ^. ^- ^_ ^+ ^= ^~ ^* ^%% ^""
IF NOT DEFINED ERROR FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO."%CHECK_VAR%"^| FIND /V ""') do (SET "$GO="&&FOR %%a in (%CHECK_FLT%) DO (
IF "[%%$]"=="[*]" IF NOT DEFINED NO_ASTRK SET "$GO=1"
IF "[%%$]"=="[ ]" IF NOT DEFINED NO_SPACE SET "$GO=1"
IF "[%%a]"=="[%%$]" SET "$GO=1")
IF NOT DEFINED $GO SET "ERROR=CHECK")
IF DEFINED ERROR CALL:DEBUG
FOR %%a in ($CHECK CHECK_VAR CHECK_FLT NO_SPACE NO_ASTRK) DO (SET "%%a=")
EXIT /B
:CHAR_CHK
FOR %%a in (CHAR_STR CHAR_CHK) DO (IF NOT DEFINED %%a EXIT /B)
SET "CHAR_FLG="&&FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO.%CHAR_STR%^| FIND /V ""') do (IF "%%$"=="%CHAR_CHK%" SET "CHAR_FLG=1"&&SET "ERROR=CHAR_CHK"&&CALL:DEBUG)
EXIT /B
:QUOTE
IF NOT DEFINED INPUT SET "QUOTE="&&SET "OUTPUT="&&SET "ERROR=QUOTE"&&CALL:DEBUG&&EXIT /B
IF "%QUOTE%"=="NONE" SET "%OUTPUT%=%INPUT:"=%"
IF "%QUOTE%"=="NONE" SET "QUOTE="&&SET "INPUT="&&SET "OUTPUT="&&EXIT /B
SET "XNT=0"&&SET "$HALT="&&SET "CHECK_FLTX= ^" "
IF DEFINED INPUT FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO."%INPUT%"^| FIND /V ""') do (FOR %%X in (%CHECK_FLTX%) DO (IF "[%%X]"=="[%%$]" SET /A "XNT+=1"))
SET /A "XNT/=2"
FOR %%a in (2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50) DO (IF "%%a"=="%XNT%" SET "ERROR=QUOTE"&&CALL:DEBUG&&SET "%OUTPUT%=%INPUT%")
IF NOT DEFINED ERROR SET "%OUTPUT%=%INPUT:""="%"
FOR %%a in (QUOTE INPUT OUTPUT CHECK_FLTX) DO (SET "%%a=")
EXIT /B
:RECOVERY_LOCK
SET "LOCKOUT="&&ECHO. Enter password
SET "$SELECT=RECOVERY_PROMPT"&&SET "$CASE=ANY"&&SET "$CHECK=MOST"&&CALL:MENU_SELECT
SET /P RECOVERY_LOCK=<"%PROG_FOLDER%\RECOVERY_LOCK"
IF NOT "%RECOVERY_PROMPT%"=="%RECOVERY_LOCK%" SET "LOCKOUT=1"
SET "RECOVERY_PROMPT="&&SET "RECOVERY_LOCK="
EXIT /B
:GET_INIT
SET "ERR_MSG="&&SET "PAUSE_END="&&SET "MENU_EXIT="&&SET "SETS_LOAD="&&SET "GUI_ACTIVE="
IF EXIST "%TEMP%\$CON" SET "GUI_ACTIVE=1"&DEL /F /Q "%TEMP%\$CON">NUL 2>&1
FOR /F "TOKENS=*" %%a in ("%CD%") DO (SET "CAPS_SET=PROG_FOLDER"&&SET "CAPS_VAR=%%a"&&CALL:CAPS_SET)
FOR /F "TOKENS=1-2 DELIMS=:" %%a IN ("%PROG_FOLDER%") DO (SET "CHAR_STR=%%b"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK&&IF "%%b"=="\" SET "PROG_FOLDER=%%a:")
IF DEFINED CHAR_FLG SET "ERR_MSG=Remove the space from the path or folder name, then launch again."
IF NOT EXIST "%PROG_FOLDER%" SET "ERR_MSG=Invalid path or folder name. Relocate, then launch again."
IF "%PROG_FOLDER%"=="X:\$" IF NOT "%SYSTEMDRIVE%"=="X:" SET "ERR_MSG=Relocate to path other than X:\$."
IF "%PROG_FOLDER%"=="%SYSTEMDRIVE%\WINDOWS\SYSTEM32" SET "ERR_MSG=Invalid path or folder name. Relocate, then launch again."
SET "PATH_TEMP="&&FOR /F "TOKENS=1-9 DELIMS=\" %%a IN ("%PROG_FOLDER%") DO (IF "%%a\%%b\%%c"=="%SystemDrive%\WINDOWS\TEMP" SET "PATH_TEMP=1"
IF "%%a\%%b\%%d\%%e\%%f"=="%SystemDrive%\USERS\APPDATA\LOCAL\TEMP" SET "PATH_TEMP=1")
IF DEFINED PATH_TEMP SET "ERR_MSG=This should not be run from a temp folder. Extract zip into a new folder, then launch again."
Reg.exe query "HKU\S-1-5-19\Environment">NUL
IF NOT "%ERRORLEVEL%" EQU "0" SET "ERR_MSG=Right click and run as administrator."
SET "LANG_PASS="&&FOR /F "TOKENS=4-5 DELIMS= " %%a IN ('DIR') DO (IF "%%a %%b"=="bytes free" SET "LANG_PASS=1")
IF NOT DEFINED LANG_PASS SET "ERR_MSG=Non-english host language/locale."
IF "%SYSTEMDRIVE%"=="X:" IF EXIST "X:\$\HOST_TARGET" SET "WINPE_BOOT=1"
EXIT /B
:GET_FILEPATH
FOR %%G in ("%$GET_FILEPATH%") DO (SET "$PATH=%%~dG%%~pG"&&SET "$BODY=%%~nG"&&SET "$EXT=%%~xG")
SET "$GET_FILEPATH="&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "$PATH=%%$PATH:%%G=%%G%%"&&CALL SET "$BODY=%%$BODY:%%G=%%G%%"&&CALL SET "$EXT=%%$EXT:%%G=%%G%%")
EXIT /B
:GET_ARGS
FOR %%1 in (1 2 3 4 5 6 7 8 9) DO (IF DEFINED ARG%%1 SET "ARGZ=%%1"&&CALL SET "ARGX=%%ARG%%1%%"&&CALL:ARGUE)
IF DEFINED ARG1 FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (
FOR %%1 in (1 2 3 4 5 6 7 8 9) DO (IF DEFINED ARG%%1 CALL SET "ARG%%1=%%ARG%%1:%%G=%%G%%"))
EXIT /B
:ARGUE
CALL SET "ARG%ARGZ%=%ARGX:"=%"
CALL SET "ARG%ARGZ%X=%ARGX:"=%"
EXIT /B
:SLASH
FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%INPUT%^| FIND /V ""') do (SET "SLASH_X=%%G"&&CALL:SLASH_X)
IF NOT "%SLASH_X%"=="\" IF EXIST "%INPUT%\" SET "%OUTPUT%=%INPUT%"
IF "%SLASH_X%"=="\" IF EXIST "%INPUT%" SET "%OUTPUT%=%SLASH_Z%"
IF NOT EXIST "%INPUT%\" SET "%OUTPUT%="
FOR %%a in (SLASH_X SLASH_Y SLASH_Z OUTPUT INPUT) DO (SET "%%a=")
EXIT /B
:SLASH_X
SET "SLASH_Z=%SLASH_Y%"&&SET "SLASH_Y=%SLASH_Y%%SLASH_X%"
EXIT /B
:GET_SIZE
FOR %%a in (INPUT OUTPUT) DO (IF NOT DEFINED %%a EXIT /B)
SET "%OUTPUT%="&&SET "XNT=0"&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%INPUT%^| FIND /V ""') do (SET "CHAR=%%G"&&SET /A "XNT+=1"&&CALL:CHAR_XNT)
GOTO:GET_SIZE_%GET_SIZE%
:GET_SIZE_GB
IF %XNT% LSS 10 SET /A "%OUTPUT%=0"
IF "%XNT%"=="10" SET /A "%OUTPUT%=%CHAR1%"
IF "%XNT%"=="11" SET /A "%OUTPUT%=%CHAR1%%CHAR2%"
IF "%XNT%"=="12" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%"
IF "%XNT%"=="13" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%"
IF "%XNT%"=="14" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%"
IF "%XNT%"=="15" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%"
IF "%XNT%"=="16" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%%CHAR7%"
GOTO:GET_SIZE_END
:GET_SIZE_MB
IF %XNT% LSS 7 SET /A "%OUTPUT%=0"
IF "%XNT%"=="7" SET /A "%OUTPUT%=%CHAR1%"
IF "%XNT%"=="8" SET /A "%OUTPUT%=%CHAR1%%CHAR2%"
IF "%XNT%"=="9" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%"
IF "%XNT%"=="10" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%"
IF "%XNT%"=="11" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%"
IF "%XNT%"=="12" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%"
IF "%XNT%"=="13" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%%CHAR7%"
IF "%XNT%"=="14" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%%CHAR7%%CHAR8%"
IF "%XNT%"=="15" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%%CHAR7%%CHAR8%%CHAR9%"
IF "%XNT%"=="16" SET /A "%OUTPUT%=%CHAR1%%CHAR2%%CHAR3%%CHAR4%%CHAR5%%CHAR6%%CHAR7%%CHAR8%%CHAR9%%CHAR10%"
:GET_SIZE_END
FOR %%a in (1 2 3 4 5 6 7 8 9 10) DO (SET "CHAR%%a=")
SET "INPUT="&&SET "OUTPUT="&&SET "CHAR="&&SET "GET_SIZE="&&EXIT /B
:CHAR_XNT
IF %XNT% GTR 10 EXIT /B
SET "CHAR%XNT%=%CHAR%"
EXIT /B
:GET_FREE
FOR %%a in (INPUT OUTPUT) DO (IF NOT DEFINED %%a EXIT /B)
SET "%OUTPUT%="&&FOR /F "TOKENS=1-5 DELIMS= " %%a IN ('DIR "%INPUT%\" 2^>NUL') DO (SET "OUTPUTX=%%c")
IF NOT DEFINED OUTPUTX SET "%OUTPUT%=ERROR"&&SET "OUTPUT="&&SET "INPUT="&&SET "ERROR=GET_FREE"&&CALL:DEBUG&&EXIT /B
SET "%OUTPUT%=%OUTPUTX:,=%"
CALL SET "CHECK_VAR=%%%OUTPUT%%%"&&SET "$CHECK=NUM"&&CALL:CHECK
IF NOT DEFINED ERROR CALL SET "INPUT=%%%OUTPUT%%%"&&CALL:GET_SIZE
SET "OUTPUT="&&SET "OUTPUTX="&&SET "INPUT="&&EXIT /B
:GET_SPACE
SET "FREE="&&FOR /F "TOKENS=1-5 DELIMS= " %%a IN ('DIR "%PROG_SOURCE%\"') DO (SET "FREE=%%c")
IF DEFINED FREE SET "FREE=%FREE:,=%"
IF DEFINED FREE SET "GET_SIZE=GB"&&SET "INPUT=%FREE%"&&SET "OUTPUT=FREE"&&CALL:GET_SIZE
EXIT /B
:GET_FILESIZE
FOR %%a in (INPUT OUTPUT) DO (IF NOT DEFINED %%a EXIT /B)
SET "%OUTPUT%="&&FOR /F "TOKENS=1-5* SKIP=3 DELIMS= " %%a IN ('DIR "%INPUT%"') DO (IF NOT "%%e"=="" IF NOT DEFINED OUTPUTX SET "OUTPUTX=%%d")
IF NOT DEFINED OUTPUTX SET "%OUTPUT%=ERROR"&&SET "OUTPUT="&&SET "INPUT="&&SET "ERROR=GET_FILESIZE"&&CALL:DEBUG&&EXIT /B
SET "%OUTPUT%=%OUTPUTX:,=%"
CALL SET "CHECK_VAR=%%%OUTPUT%%%"&&SET "$CHECK=NUM"&&CALL:CHECK
IF NOT DEFINED ERROR CALL SET "INPUT=%%%OUTPUT%%%"&&CALL:GET_SIZE
SET "OUTPUT="&&SET "OUTPUTX="&&SET "INPUT="&&EXIT /B
:GET_FILEEXT
SET "PATH_X="&&SET "FILE_X="&&SET "EXT_X="&&FOR %%G in ("%INPUT%") DO (SET "PATH_X=%%~dG%%~pG"&&SET "FILE_X=%%~nG"&&SET "EXT_X=%%~xG")
SET "INPUT="&&EXIT /B
:GET_SID
FOR /F "TOKENS=2* SKIP=1 DELIMS=:\. " %%a in ('REG QUERY "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI" /v LastLoggedOnUser 2^>NUL') do (IF "%%a"=="REG_SZ" SET "CUR_USR=%%b")
FOR /F "TOKENS=2* SKIP=1 DELIMS=:\. " %%a in ('REG QUERY "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI" /v LastLoggedOnUserSID 2^>NUL') do (IF "%%a"=="REG_SZ" SET "CUR_SID=%%b")
SET "ERRORLEVEL=0"&&EXIT /B
:GET_NEXTBOOT
SET "BOOT_OK="&&SET "GUID_TMP="&&SET "GUID_CUR="&&FOR /F "TOKENS=1-5 DELIMS= " %%a in ('BCDEDIT.EXE /V') do (
IF "%%a"=="displayorder" SET "GUID_CUR=%%b"
IF "%%a"=="identifier" SET "GUID_TMP=%%b"
IF "%%a"=="description" IF "%%b"=="Recovery" SET "BOOT_OK=1"&&GOTO:GET_NEXTBOOTX)
:GET_NEXTBOOTX
IF "%GUID_TMP%"=="%GUID_CUR%" SET "NEXT_BOOT=RECOVERY"
IF NOT "%GUID_TMP%"=="%GUID_CUR%" SET "NEXT_BOOT=VHDX"
EXIT /B
:GET_WIMINDEX
IF NOT DEFINED IMAGE_X EXIT /B
FOR /F "TOKENS=1-5 SKIP=5 DELIMS=:<> " %%a in ('DISM /ENGLISH /GET-IMAGEINFO /IMAGEFILE:"%IMAGE_X%" 2^>NUL') DO (IF "%%a"=="Index" SET "INDEX_Z=%%b"
IF "%%d"=="%INDEX_WORD%" SET "INDEX_WORD="&&SET "IMAGE_X="&&EXIT /B)
SET "INDEX_WORD="&&SET "INDEX_Z="&&SET "IMAGE_X="&&EXIT /B
:GET_PATHINFO
FOR %%a in ($PATHEDIT $PATHVER) DO (IF DEFINED %%a SET "%%a=")
IF "%PATH_X%"=="%SYSTEMDRIVE%" SET "IMAGE_X=ONLINE"
IF "%PATH_X%"=="%SYSTEMDRIVE%\" SET "IMAGE_X=ONLINE"
IF NOT "%IMAGE_X%"=="ONLINE" SET "IMAGE_X=IMAGE:"%PATH_X%""
FOR /F "TOKENS=1-2* DELIMS=<>: " %%a in ('DISM /ENGLISH /%IMAGE_X% /GET-CURRENTEDITION 2^>NUL') DO (IF "%%a %%b"=="Image Version" IF NOT "%%c"=="undefined>" SET "$PATHVER=%%c"
IF "%%a %%b"=="Current Edition" IF NOT "%%c"=="undefined>" SET "$PATHEDIT=%%c")
IF NOT DEFINED $PATHVER SET "ERROR=GET_PATHINFO"&&CALL:DEBUG
SET "PATH_X="&&SET "IMAGE_X="&&EXIT /B
:GET_IMAGEINFO
FOR %%a in ($IMGNAME $IMGEDIT $IMGDESC $IMGVER $BUILD) DO (IF DEFINED %%a SET "%%a=")
FOR /F "TOKENS=1-2* SKIP=3 DELIMS=:<> " %%a in ('DISM /ENGLISH /GET-IMAGEINFO /IMAGEFILE:"%IMAGE_X%" /Index:%INDEX_X% 2^>NUL') DO (
IF "%%a"=="Name" IF NOT "%%b"=="undefined" IF NOT "%%c"=="" SET "$IMGNAME=%%b %%c"
IF "%%a"=="Name" IF NOT "%%b"=="undefined" IF "%%c"=="" SET "$IMGNAME=%%b"
IF "%%a"=="Description" IF NOT "%%b"=="undefined" IF NOT "%%c"=="" SET "$IMGDESC=%%b %%c"
IF "%%a"=="Description" IF NOT "%%b"=="undefined" IF "%%c"=="" SET "$IMGDESC=%%b"
IF "%%a"=="Version" IF NOT "%%b"=="undefined" SET "$IMGVER=%%b"
IF "%%a"=="Edition" IF NOT "%%b"=="undefined" SET "$IMGEDIT=%%b"
IF "%%a %%b"=="ServicePack Build" IF NOT "%%c"=="undefined>" SET "$BUILD=%%c")
IF DEFINED $IMGVER IF DEFINED $BUILD SET "$IMGVER=%$IMGVER%.%$BUILD%"&&SET "$BUILD="
IF NOT DEFINED $IMGVER SET "ERROR=GET_IMAGEINFO"&&CALL:DEBUG
SET "IMAGE_X="&&SET "INDEX_X="&&EXIT /B
:GET_PROGVER
IF NOT DEFINED VER_SET SET "VER_SET=VER_CUR"
IF EXIST "%VER_GET%" SET /P VER_CHK=<"%VER_GET%"
SET "%VER_SET%="&&FOR /F "TOKENS=1-9 DELIMS= " %%A IN ("%VER_CHK%") DO (SET "%VER_SET%=%%G")
IF NOT DEFINED %VER_SET% SET "ERROR=GET_PROGVER"&&CALL:DEBUG
SET "VER_CHK="&&SET "VER_GET="&&SET "VER_SET="&&EXIT /B
:GET_HEADER
SET "$HEAD="&&FOR %%a in (HEAD_CHECK HEAD_EXT) DO (IF NOT DEFINED %%a EXIT /B)
SET /P $HEAD=<"%HEAD_CHECK%"
IF "%HEAD_EXT%"=="LIST" IF NOT "%$HEAD%"=="EXEC-LIST" IF NOT "%$HEAD%"=="MULTI-LIST" SET "ERROR=GET_HEADER"
IF "%HEAD_EXT%"=="BASE" IF NOT "%$HEAD%"=="BASE-LIST" IF NOT "%$HEAD%"=="BASE-GROUP" SET "ERROR=GET_HEADER"
IF DEFINED ERROR ECHO.&&ECHO. %XLR2%ERROR:%$$% Bad file header, check file.&&ECHO.&&CALL:DEBUG
SET "HEAD_CHECK="&&SET "HEAD_EXT="&&EXIT /B
:GET_RANDOM
IF NOT DEFINED RND_TYPE SET "RND_TYPE=1"
CALL:RND%RND_TYPE% >NUL 2>&1
IF NOT DEFINED RND1 GOTO:GET_RANDOM
IF "%RND2%"=="%RND1%" GOTO:GET_RANDOM
SET "RND2=%RND1%"&&CALL SET "%RND_SET%=%RND1%"&&SET "RND_TYPE="&&SET "RND_SET="&&SET "RND1="
EXIT /B
:RND1
FOR /F "TOKENS=1-9 DELIMS=:." %%a in ("%TIME%") DO (FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C CALL ECHO.%%d') DO (CALL SET "RND1=%%G"))
EXIT /B
:RND2
SET "RND1=%RANDOM%%RANDOM%"&&SET "RND1=!RND1:~5,5!"&&SET "RND1=!RND1:~1,1!"
EXIT /B
:TIMER
FOR /F "TOKENS=3 DELIMS=:." %%a in ("%TIME%") DO (IF NOT "%%a"=="%TIMER_LAST%" SET "TIMER_LAST=%%a"&&SET /A "TIMER-=1"&&IF DEFINED TIMER_MSG CLS&&CALL ECHO.%TIMER_MSG%)
IF NOT "%TIMER%"=="0" GOTO:TIMER
SET "TIMER="&&SET "TIMER_LAST="&&SET "TIMER_MSG="&&EXIT /B
:TIMER_POINT3
FOR /F "TOKENS=1-9 DELIMS=:." %%a in ("%TIME%") DO (FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C CALL ECHO.%%d') DO (CALL SET "TIMER_X=%%G"))
FOR %%a in (2 5 8) DO (IF "%TIMER_X%"=="%%a" SET "TIMER_X="&&EXIT /B)
GOTO:TIMER_POINT3
:DEBUG
IF NOT "%DEBUG%"=="ENABLED" EXIT /B
IF NOT DEFINED ERROR EXIT /B
ECHO. %XLR4%ERROR:%$$% %ERROR%
CALL:PAUSED
EXIT /B
:CLEAN
IF NOT EXIST "$*" EXIT /B
IF EXIST "%PROG_SOURCE%\$TEMP.vhdx" CALL:VTEMP_DELETE>NUL 2>&1
IF EXIST "%PROG_SOURCE%\$TEMP.wim" DEL /Q /F "%PROG_SOURCE%\$TEMP.wim">NUL 2>&1
FOR %%G in (HZ TMP LST DSK RUN ARG) DO (IF EXIST "$%%G*" DEL /Q /F "$%%G*">NUL 2>&1)
FOR %%G in (DRVR FEAT) DO (IF NOT DEFINED %%G_QRY IF EXIST "$%%G" DEL /Q /F "$%%G">NUL 2>&1)
FOR %%G in (RAS RATI) DO (IF NOT DEFINED CURR_SESSION IF EXIST "$%%G.cmd" CALL:RASTI_CHECK&CALL:RAS_DELETE&DEL /Q /F "$%%G.cmd">NUL 2>&1)
EXIT /B
:FOLDER_DEL
IF NOT DEFINED FOLDER_DEL EXIT /B
DISM /cleanup-MountPoints>NUL 2>&1
ATTRIB -R -S -H "%FOLDER_DEL%" /S /D /L>NUL 2>&1
TAKEOWN /F "%FOLDER_DEL%" /R /D Y>NUL 2>&1
ICACLS "%FOLDER_DEL%" /grant %USERNAME%:F /T>NUL 2>&1
RD /S /Q "\\?\%FOLDER_DEL%">NUL 2>&1
SET "FOLDER_DEL="&&EXIT /B
:PAD_PREV
ECHO.               Press (%##%Enter%$$%) to return to previous menu
EXIT /B
:PAUSED
IF NOT DEFINED NO_PAUSE SET /P "PAUSED=.                      Press (%##%Enter%$$%) to continue..."
SET "NO_PAUSE="&&EXIT /B
:CONFIRM
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                  %XLR4%Are you sure?%$$% Press (%##%X%$$%) to proceed&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF NOT "%CONFIRM%"=="X" SET "ERROR=CONFIRM"&&CALL:DEBUG
EXIT /B
:LOGO
IF "%RECOVERY_LOGO%"=="DISABLED" EXIT /B
IF NOT DEFINED RECOVERY_LOGO SET "RECOVERY_LOGO=DISABLED"
CHCP 65001>NUL
SET "ROW_X=%%@1%%█%%@2%%█%%@3%%█%%@4%%█%%@1%%█%%@2%%█%%@3%%█%%@4%%█"&&SET "ROW_T=%%@1%% %%@2%%▀%%@3%%█%%@4%%█%%@1%%█%%@2%%█%%@3%%▀%%@4%% "&&SET "ROW_B=%%@1%% %%@2%%▄%%@3%%█%%@4%%█%%@1%%█%%@2%%█%%@3%%▄%%@4%% "
SET "RND_SET=@1"&&CALL:GET_RANDOM&&SET "RND_SET=@2"&&CALL:GET_RANDOM&&SET "RND_SET=@3"&&CALL:GET_RANDOM&&SET "RND_SET=@4"&&CALL:GET_RANDOM
CALL SET "@1=%%XLR%@1%%%"&&CALL SET "@2=%%XLR%@2%%%"&&CALL SET "@3=%%XLR%@3%%%"&&CALL SET "@4=%%XLR%@4%%%"
SET "LOGOX="&&SET "XNTZ="&&CALL:LOGO_X&&CLS
FOR %%a in (@1 @2 @3 @4 @5 @6 @7 @8 @9 ROW_X ROW_T ROW_B) DO (SET "%%a=")
EXIT /B
:LOGO_X
CLS&&CALL ECHO.%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%&&SET "@1=%@2%"&SET "@2=%@3%"&SET "@3=%@4%"&SET "@4=%@1%"&&CALL ECHO.%ROW_T%%ROW_T%%ROW_T%%ROW_T%%ROW_T%%ROW_T%%ROW_T%%ROW_T%%ROW_T%&&ECHO.&&ECHO.                               %XLR0%WELCOME TO&&ECHO.&&ECHO.       %@1% ▄█     █▄   ▄█ ███▄▄▄▄   ███████▄   ▄█  ▄███████  ▄█   ▄█▄&&ECHO.       %@2%███     ███ ███ ███▀▀▀██▄ ███  ▀███ ███ ███   ███ ███ ▄███▀&&ECHO.       %@3%███     ███ ███ ███   ███ ███   ███ ███ ███   █▀  ███▐██▀&&ECHO.       %@4%███     ███ ███ ███   ███ ███   ███ ███ ███      ▄█████▀&&ECHO.       %@1%███     ███ ███ ███   ███ ███   ███ ███ ███   █▄  ███▐██▄&&ECHO.       %@2%███ ▄█▄ ███ ███ ███   ███ ███  ▄███ ███ ███   ███ ███ ▀███▄&&ECHO.       %@3% ▀███▀███▀  █▀   ▀█   █▀  ███████▀  █▀  ███████▀  ███   ▀█▀&&ECHO.&&ECHO.                          %XLR0%RECOVERY ENVIRONMENT&&ECHO.
CALL ECHO.%ROW_B%%ROW_B%%ROW_B%%ROW_B%%ROW_B%%ROW_B%%ROW_B%%ROW_B%%ROW_B%&&SET "@1=%@2%"&SET "@2=%@3%"&SET "@3=%@4%"&SET "@4=%@1%"
CALL ECHO.%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%ROW_X%%$$% &&SET "@1=%@4%"&SET "@2=%@1%"&SET "@3=%@2%"&SET "@4=%@3%"
CALL:TIMER_POINT3&SET /A "XNTZ+=1"&IF NOT "%XNTZ%"=="7" GOTO:LOGO_X
EXIT /B
:SETS_LIST
SET SETS_LIST=GUI_LAUNCH GUI_SCALE GUI_CONFONT GUI_CONFONTSIZE GUI_CONTYPE PAD_BOX PAD_TYPE PAD_SIZE PAD_SEQ TXT_COLOR ACC_COLOR BTN_COLOR COMPRESS SAFE_EXCLUDE HOST_HIDE HOST_SIZE PE_WALLPAPER BOOT_TIMEOUT VHDX_SLOTX VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9 ADDFILE_0 ADDFILE_1 ADDFILE_2 ADDFILE_3 ADDFILE_4 ADDFILE_5 ADDFILE_6 ADDFILE_7 ADDFILE_8 ADDFILE_9 HOTKEY_1 SHORT_1 HOTKEY_2 SHORT_2 HOTKEY_3 SHORT_3 HOTKEY_4 SHORT_4 HOTKEY_5 SHORT_5 RECOVERY_LOGO MENU_MODE MENU_LIST MENU_BANNER DISCLAIMER ALLOW_ENV APPX_SKIP COMP_SKIP SVC_SKIP SXS_SKIP DEBUG
EXIT /B
:SETS_LOAD
IF EXIST "windick.ini" FOR /F "TOKENS=1-1* DELIMS==" %%a in (windick.ini) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
EXIT /B
:SETS_CLEAR
CALL:SETS_LIST
FOR %%a in (%SETS_LIST%) DO (SET %%a=)
SET "SETS_LIST="&&EXIT /B
:SETS_HANDLER
IF NOT "%PROG_MODE%"=="RAMDISK" SET "PROG_SOURCE=%PROG_FOLDER%"
IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%" SET "PROG_SOURCE=%PROG_FOLDER%"
CD /D "%PROG_FOLDER%"&&IF EXIST "windick.ini" IF NOT DEFINED SETS_LOAD SET "SETS_LOAD=1"&&CALL:SETS_LOAD
CALL:SETS_LIST&&ECHO.Windows Deployment Image Customization Kit v %VER_CUR% Settings>"windick.ini"
FOR %%a in (%SETS_LIST%) DO (CALL ECHO.%%a=%%%%a%%>>"windick.ini")
SET "SETS_LIST="&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" SET "HOST_GET=1"
IF "%PROG_MODE%"=="RAMDISK" IF NOT "%DISK_TARGET%"=="%HOST_TARGET%" SET "HOST_GET=1"
IF DEFINED HOST_GET SET "HOST_GET="&&CALL:HOST_AUTO
IF "%PROG_MODE%"=="RAMDISK" IF EXIST "Z:\%HOST_FOLDERX%" COPY /Y "windick.ini" "Z:\%HOST_FOLDERX%">NUL
:SETS_MAIN
IF NOT "%PROG_MODE%"=="RAMDISK" SET "PROG_SOURCE=%PROG_FOLDER%"
IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%" SET "PROG_SOURCE=%PROG_FOLDER%"
SET ":=;"&&SET "LB=["&&SET "RB=]"&&SET "@=^^"&&SET "+=^&"&&SET "{=^<"&&SET "}=^>"&&SET "}}=^>^>"&&SET "-=^|"
IF NOT DEFINED PAD_TYPE SET "PAD_TYPE=1"
IF NOT DEFINED ACC_COLOR SET "ACC_COLOR=6"
IF NOT DEFINED BTN_COLOR SET "BTN_COLOR=7"
IF NOT DEFINED TXT_COLOR SET "TXT_COLOR=0"
IF NOT DEFINED PAD_SIZE SET "PAD_SIZE=LARGE"
IF NOT DEFINED VHDX_SIZE SET "VHDX_SIZE=25"
IF NOT DEFINED PAD_BOX SET "PAD_BOX=ENABLED"
IF NOT DEFINED PAD_SEQ SET "PAD_SEQ=6666600000"
IF NOT DEFINED HOST_FOLDER SET "HOST_FOLDER=$"
IF NOT DEFINED HOST_HIDE SET "HOST_HIDE=DISABLED"
IF NOT DEFINED ALLOW_ENV SET "ALLOW_ENV=DISABLED"
IF NOT DEFINED ADDFILE_0 SET "ADDFILE_0=list\tweaks.base"
IF NOT DEFINED ADDFILE_1 SET "ADDFILE_1=list\tools.list"
IF NOT DEFINED HOTKEY_1 SET "HOTKEY_1=CMD"&&SET "SHORT_1=CMD.EXE"
IF NOT DEFINED HOTKEY_2 SET "HOTKEY_2=NOTE"&&SET "SHORT_2=NOTEPAD.EXE"
IF NOT DEFINED HOTKEY_3 SET "HOTKEY_3=REG"&&SET "SHORT_3=REGEDIT.EXE"
IF NOT DEFINED MAKER_FOLDER SET "MAKER_FOLDER=%PROG_SOURCE%\Project1"
IF NOT DEFINED APPX_SKIP SET "APPX_SKIP=Microsoft.DesktopAppInstaller Microsoft.VCLibs.140.00"
SET "FOLDER_MODE=UNIFIED"&&IF NOT "%COMPRESS%"=="FAST" IF NOT "%COMPRESS%"=="MAX" SET "COMPRESS=FAST"
IF EXIST "%PROG_SOURCE%\CACHE" IF EXIST "%PROG_SOURCE%\IMAGE" IF EXIST "%PROG_SOURCE%\PACK" IF EXIST "%PROG_SOURCE%\LIST" IF EXIST "%PROG_SOURCE%\BOOT" SET "FOLDER_MODE=ISOLATED"
IF "%FOLDER_MODE%"=="ISOLATED" FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (SET "%%a_FOLDER=%PROG_SOURCE%\%%a")
IF "%FOLDER_MODE%"=="UNIFIED" FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (SET "%%a_FOLDER=%PROG_SOURCE%")
IF NOT DEFINED XLR0 SET "XLR0=[97m"&&SET "XLR1=[31m"&&SET "XLR2=[91m"&&SET "XLR3=[33m"&&SET "XLR4=[93m"&&SET "XLR5=[92m"&&SET "XLR6=[96m"&&SET "XLR7=[94m"&&SET "XLR8=[34m"&&SET "XLR9=[95m"
IF NOT DEFINED COLOR0 FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a="&&SET "COLOR%%a=%%XLR%%a%%")
CALL SET "@@=%%XLR%ACC_COLOR%%%"&&CALL SET "##=%%XLR%BTN_COLOR%%%"&&CALL SET "$$=%%XLR%TXT_COLOR%%%"
FOR %%a in (MOUNT SELECTX SELECTY SELECTZ $VHDX ERROR LIVE_APPLY $HALT $HALTX VDISK VDISK_LTR VDISK_ATTACHED VDISK_FLAG DUAL_SESSION PKX_SESSION LST_SESSION CURR_SESSION LAST_SESSION FEAT_QRY DRVR_QRY) DO (SET "%%a=")
IF "%PROG_MODE%"=="COMMAND" EXIT /B
FOR %%a in (MENU_LIST) DO (SET "OBJ_FLD=%LIST_FOLDER%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (PE_WALLPAPER) DO (SET "OBJ_FLD=%CACHE_FOLDER%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (VHDX_SLOTX WIM_SOURCE VHDX_SOURCE) DO (SET "OBJ_FLD=%IMAGE_FOLDER%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "ADDFILE_NUM=%%a"&&CALL SET "ADDFILE_CHK=%%ADDFILE_%%a%%"&&CALL:ADDFILE_CHK)
IF "%PROG_MODE%"=="RAMDISK" FOR %%a in (VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9) DO (SET "OBJ_FLD=%PROG_SOURCE%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (MENU_LIST PE_WALLPAPER PATH_SOURCE PATH_TARGET WIM_SOURCE VHDX_SOURCE WIM_TARGET VHDX_TARGET VHDX_SLOTX VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9) DO (IF NOT DEFINED %%a SET "%%a=SELECT")
IF NOT EXIST "%PATH_SOURCE%\" SET "PATH_SOURCE=SELECT"
IF NOT EXIST "%PATH_TARGET%\" SET "PATH_TARGET=SELECT"
FOR %%a in (ADDFILE_CHK ADDFILE_NUM OBJ_FLD OBJ_CHK OBJ_CHKX) DO (SET "%%a=")
EXIT /B
:ADDFILE_CHK
IF NOT DEFINED ADDFILE_%ADDFILE_NUM% SET "ADDFILE_%ADDFILE_NUM%=SELECT"
IF "%ADDFILE_CHK%"=="SELECT" EXIT /B
FOR /F "TOKENS=1-9 DELIMS=\" %%a in ("%ADDFILE_CHK%") DO (
IF "%%a"=="pack" IF NOT EXIST "%PACK_FOLDER%\%%b" SET "ADDFILE_%ADDFILE_NUM%=SELECT"
IF "%%a"=="list" IF NOT EXIST "%LIST_FOLDER%\%%b" SET "ADDFILE_%ADDFILE_NUM%=SELECT"
IF "%%a"=="image" IF NOT EXIST "%IMAGE_FOLDER%\%%b" SET "ADDFILE_%ADDFILE_NUM%=SELECT"
IF "%%a"=="cache" IF NOT EXIST "%CACHE_FOLDER%\%%b" SET "ADDFILE_%ADDFILE_NUM%=SELECT"
IF "%%a"=="main" IF NOT EXIST "%PROG_SOURCE%\%%b" SET "ADDFILE_%ADDFILE_NUM%=SELECT")
EXIT /B
:OBJ_CLEAR
CALL SET "OBJ_CHKX=%%%OBJ_CHK%%%"
IF NOT EXIST "%OBJ_FLD%\%OBJ_CHKX%" CALL SET "%OBJ_CHK%=SELECT"
EXIT /B
:FOLDER_MODE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.       The folder structure will be regenerated. If a file is &&ECHO.    open or mounted and cannot be moved it's possible to lose data.&&ECHO.&&ECHO.                         Press (%##%X%$$%) to proceed&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="X" EXIT /B
IF "%FOLDER_MODE%"=="UNIFIED" SET "FOLDER_MODE=ISOLATED"&&GOTO:FOLDER_ISOLATED
IF "%FOLDER_MODE%"=="ISOLATED" SET "FOLDER_MODE=UNIFIED"&&GOTO:FOLDER_UNIFIED
:FOLDER_UNIFIED
FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (IF EXIST "%PROG_SOURCE%\%%a" MOVE /Y "%PROG_SOURCE%\%%a\*.*" "%PROG_SOURCE%">NUL 2>&1)
FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (IF EXIST "%PROG_SOURCE%\%%a" XCOPY /S /C /Y "%PROG_SOURCE%\%%a" "%PROG_SOURCE%">NUL 2>&1)
FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (IF EXIST "%PROG_SOURCE%\%%a" RD /Q /S "\\?\%PROG_SOURCE%\%%a">NUL 2>&1)
EXIT /B
:FOLDER_ISOLATED
FOR %%a in (cache image pack list boot) DO (IF NOT EXIST "%PROG_SOURCE%\%%a" MD "%PROG_SOURCE%\%%a">NUL 2>&1)
FOR %%a in (XML JPG PNG REG) DO (IF EXIST "%PROG_SOURCE%\*.%%a" MOVE /Y "%PROG_SOURCE%\*.%%a" "%PROG_SOURCE%\CACHE">NUL 2>&1)
FOR %%a in (EFI SDI SAV) DO (IF EXIST "%PROG_SOURCE%\*.%%a" MOVE /Y "%PROG_SOURCE%\*.%%a" "%PROG_SOURCE%\BOOT">NUL 2>&1)
FOR %%a in (LIST BASE) DO (IF EXIST "%PROG_SOURCE%\*.%%a" MOVE /Y "%PROG_SOURCE%\*.%%a" "%PROG_SOURCE%\LIST">NUL 2>&1)
FOR %%a in (ISO VHDX WIM) DO (IF EXIST "%PROG_SOURCE%\*.%%a" MOVE /Y "%PROG_SOURCE%\*.%%a" "%PROG_SOURCE%\IMAGE">NUL 2>&1)
FOR %%a in (PKX CAB MSU APPX APPXBUNDLE MSIXBUNDLE) DO (IF EXIST "%PROG_SOURCE%\*.%%a" MOVE /Y "%PROG_SOURCE%\*.%%a" "%PROG_SOURCE%\PACK">NUL 2>&1)
EXIT /B
:FILE_LIST
IF NOT DEFINED $APPEND SET "$XNT="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99) DO (IF DEFINED $ITEM%%a SET "$ITEM%%a=")
IF NOT DEFINED $DISP SET "$DISP=NUM"
IF "%$DISP%"=="NUM" SET "$PICKER=1"
IF EXIST "%$FOLD%\%$FILT%" FOR /F "TOKENS=*" %%a in ('DIR /A: /B /O:GN "%$FOLD%\%$FILT%"') DO (CALL SET /A "$XNT+=1"&&CALL SET "$CLM$=%%a"&&CALL:FILE_LISTX)
IF NOT EXIST "%$FOLD%\%$FILT%" IF "%$FILT%"=="*.*" (ECHO.   Empty..) ELSE (ECHO. %@@%%$FILT% unavailable%$$%)
FOR %%a in ($APPEND $DISP) DO (SET "%%a=")
EXIT /B
:FILE_LISTX
CALL SET "$ITEM%$XNT%=%$CLM$%"
IF EXIST "%$FOLD%\%$CLM$%\*" (SET "$LCLR1=%@@%"&&SET "$LCLR2=%$$%") ELSE (SET "$LCLR1="&&SET "$LCLR2=")
IF "%$DISP%"=="NUM" FOR /F "TOKENS=*" %%# in ("%$CLM$%") DO (ECHO. %$$%^( %##%%$XNT%%$$% ^) %$LCLR1%%%#%$LCLR2%)
IF "%$DISP%"=="BAS" FOR /F "TOKENS=*" %%# in ("%$CLM$%") DO (ECHO.   %$LCLR1%%%#%$LCLR2%)
EXIT /B
:LIST_FILE
SET "$XNT="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99) DO (IF DEFINED $ITEM%%a SET "$ITEM%%a=")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=%%COLOR%%a%%")
IF NOT EXIST "%$LIST%" GOTO:LIST_ERROR
SET "HEAD_EXT=%LIST_TYPE%"&&SET "HEAD_CHECK=%$LIST%"&&CALL:GET_HEADER
IF DEFINED ERROR CALL:PAUSED&GOTO:LIST_ERROR
COPY /Y "%$LIST%" "$HZ">NUL 2>&1
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF DEFINED MENUT%%a CALL ECHO.%%MENUT%%a%%&&SET "MENUT%%a=")
SET "$CLM1_LST="&&SET "$CLM2_LST="&&SET "$CLM3_LST="&&FOR %%Z in (BASE LIST) DO (IF "%LIST_TYPE%"=="%%Z" FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%1 in ($HZ) DO (IF NOT "%%1"=="" CALL SET "$CLM1=%%1"&&CALL SET "$CLM2=%%2"&&CALL SET "$CLM3=%%3"&&CALL SET "$CLM4=%%4"&&CALL:LIST_FILEX))
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF DEFINED MENUB%%a CALL ECHO.%%MENUB%%a%%&&SET "MENUB%%a=")
IF EXIST "$HZ" DEL /F "$HZ">NUL 2>&1
:LIST_ERROR
FOR %%a in ($LIST $CLM1 $CLM2 $CLM3 $CLM1_LST $CLM2_LST $CLM3_LST EXT LIST_TYPE ONLY1 ONLY2 ONLY3 $XNT) DO (SET "%%a=")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=")
EXIT /B
:LIST_FILEX
IF DEFINED ONLY1 IF NOT "%$CLM1%"=="%ONLY1%" EXIT /B
IF DEFINED ONLY2 IF NOT "%$CLM2%"=="%ONLY2%" EXIT /B
IF DEFINED ONLY3 IF NOT "%$CLM3%"=="%ONLY3%" EXIT /B
IF "%$HEAD%"=="MULTI-LIST" GOTO:LIST_FILEZ
IF "%$HEAD%"=="BASE-GROUP" GOTO:LIST_FILEZ
CALL SET /A "$XNT+=1"
CALL SET "$ITEM%$XNT%=[%$CLM1%][%$CLM2%][%$CLM3%]"
CALL ECHO. %$$%( %##%%$XNT%%$$% ) %$CLM2%
EXIT /B
:LIST_FILEZ
IF DEFINED ONLY1 IF NOT DEFINED ONLY2 IF "%$CLM2%"=="%$CLM2_LST%" EXIT /B
SET "$CLM1_LST=%$CLM1%"&&SET "$CLM2_LST=%$CLM2%"&&SET "$CLM3_LST=%$CLM3%"
CALL SET /A "$XNT+=1"
CALL SET "$ITEM%$XNT%=[%$CLM1%][%$CLM2%][%$CLM3%]"
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (CALL SET "COLOR%%a=%%XLR%%a%%")
IF DEFINED ONLY1 IF DEFINED ONLY2 CALL ECHO. %$$%( %##%%$XNT%%$$% ) %$CLM3%%$$%&&IF NOT "%$CLM4%"=="" CALL ECHO.%$$%%$CLM4%%$$%
IF DEFINED ONLY1 IF NOT DEFINED ONLY2 CALL ECHO. %$$%( %##%%$XNT%%$$% ) %$CLM2%%$$%
IF DEFINED ONLY1 FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=")
IF DEFINED ONLY2 FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=%%COLOR%%a%%")
EXIT /B
::#########################################################################
:COMMAND_MODE
::#########################################################################
IF DEFINED GUI_ACTIVE SET "PROG_MODE=GUI"&&CALL:SETS_HANDLER&CLS
IF NOT "%PROG_MODE%"=="GUI" SET "PAD_TYPE=0"&&CALL:SETS_MAIN
SET "MOUNT="&&IF NOT "%ARG1%"=="/?" IF NOT "%ARG1%"=="-HELP" IF NOT "%ARG1%"=="-INTERNAL" IF NOT "%ARG1%"=="-AUTOBOOT" IF NOT "%ARG1%"=="-NEXTBOOT" IF NOT "%ARG1%"=="-BOOTMAKER" IF NOT "%ARG1%"=="-DISKMGR" IF NOT "%ARG1%"=="-FILEMGR" IF NOT "%ARG1%"=="-IMAGEPROC" IF NOT "%ARG1%"=="-IMAGEMGR" ECHO. Type windick.cmd -help for more options.&&GOTO:QUIT
IF "%ARG1%"=="/?" SET "ARG1=-HELP"
IF "%ARG1%"=="-HELP" CALL:COMMAND_HELP
IF "%ARG1%"=="-INTERNAL" GOTO:COMMAND_INTERNAL
IF "%ARG1%"=="-FILEMGR" IF NOT "%ARG2%"=="-GRANT" ECHO. Valid options are -grant
IF "%ARG1%"=="-FILEMGR" IF "%ARG2%"=="-GRANT" IF NOT EXIST "%ARG3%" ECHO. %XLR4%ERROR:%$$% %ARG3% doesn't exist
IF "%ARG1%"=="-FILEMGR" IF "%ARG2%"=="-GRANT" IF DEFINED ARG3 IF EXIST "%ARG3%" SET "$PICK=%ARG3%"&&CALL:FMGR_OWN
IF "%ARG1%"=="-NEXTBOOT" IF NOT "%ARG2%"=="-RECOVERY" IF NOT "%ARG2%"=="-VHDX" ECHO. Valid options are -recovery and -vhdx
IF "%ARG1%"=="-NEXTBOOT" FOR %%a in (VHDX RECOVERY) DO (IF "%ARG2%"=="-%%a" SET "BOOT_TARGET=%%a"&&CALL:BOOT_TOGGLE)
IF "%ARG1%"=="-NEXTBOOT" IF DEFINED NEXT_BOOT ECHO. Next boot is %NEXT_BOOT%
IF "%ARG1%"=="-NEXTBOOT" IF NOT DEFINED NEXT_BOOT ECHO. %XLR4%ERROR:%$$% The boot environment is not installed on this system.
IF "%ARG1%"=="-AUTOBOOT" IF NOT "%ARG2%"=="-INSTALL" IF NOT "%ARG2%"=="-REMOVE" ECHO. Valid options are -install and -remove
IF "%ARG1%"=="-AUTOBOOT" IF "%ARG2%"=="-REMOVE" SET "BOOTSVC=REMOVE"&&CALL:AUTOBOOT_SVC
IF "%ARG1%"=="-AUTOBOOT" IF "%ARG2%"=="-INSTALL" SET "BOOTSVC=INSTALL"&&CALL:AUTOBOOT_SVC
IF "%ARG1%"=="-BOOTMAKER" CALL:COMMAND_BOOTMAKER
IF "%ARG1%"=="-DISKMGR" CALL:COMMAND_DISKMGR
IF "%ARG1%"=="-IMAGEMGR" CALL:COMMAND_IMAGEMGR
IF "%ARG1%"=="-IMAGEPROC" CALL:COMMAND_IMAGEPROC
GOTO:QUIT
:COMMAND_INTERNAL
IF "%ARG2%"=="-IMAGEMGR" IF "%ARG3%"=="-NEW" CALL:IMAGEMGR_BUILDER
IF "%ARG2%"=="-IMAGEMGR" IF "%ARG3%"=="-EDIT" CALL:LIST_EDIT
IF "%ARG2%"=="-IMAGEMGR" IF "%ARG3%"=="-RUN" CALL:IMAGEMGR_RUN
IF "%ARG2%"=="-PACKCREATOR" IF "%ARG3%"=="-NEW" CALL:PROJ_NEW
IF "%ARG2%"=="-PACKCREATOR" IF "%ARG3%"=="-RESTORE" CALL:PROJ_RESTORE
IF "%ARG2%"=="-PACKCREATOR" IF "%ARG3%"=="-EDIT" CALL:PROJ_EDIT
IF "%ARG2%"=="-PACKCREATOR" IF "%ARG3%"=="-EXPORT" CALL:DRVR_EXPORT
IF "%ARG2%"=="-PACKCREATOR" IF "%ARG3%"=="-CREATE" CALL:PROJ_CREATE
IF "%ARG2%"=="-SETTINGS" SET "MENU_EXIT=1"&&GOTO:SETTINGS_MENU
:COMMAND_INTERNAL_END
GOTO:QUIT
:COMMAND_IMAGEPROC
IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO. %XLR4%ERROR:%$$% WIM %IMAGE_FOLDER%\%ARG3% doesn't exist&&EXIT /B
IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO. %XLR4%ERROR:%$$% VHDX %IMAGE_FOLDER%\%ARG3% doesn't exist&&EXIT /B
IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-VHDX" IF DEFINED ARG7 IF "%ARG8%"=="-SIZE" IF DEFINED ARG9 SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"&&SET "WIM_SOURCE=%ARG3%"&&SET "WIM_INDEX=%ARG5%"&&SET "VHDX_TARGET=%ARG7%"&&SET "VHDX_SIZE=%ARG9%"&&CALL:IMAGEPROC_START
SET "$IDX="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25) DO (IF "%ARG5%"=="%%a" SET "$IDX=X")
FOR %%$ in (WIM VHDX) DO (IF "%ARG2%"=="-%%$" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF NOT DEFINED $IDX ECHO. %XLR4%ERROR:%$$% Invalid index, trying index 1.&&SET "ARG5=1")
IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-WIM" IF DEFINED ARG7 IF "%ARG8%"=="-XLVL" IF DEFINED ARG9 SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"&&SET "VHDX_SOURCE=%ARG3%"&&SET "WIM_INDEX=%ARG5%"&&SET "WIM_TARGET=%ARG7%"&&SET "COMPRESS=%ARG9%"&&CALL:IMAGEPROC_START
EXIT /B
:COMMAND_IMAGEMGR
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-LIST" IF DEFINED ARG4 IF NOT EXIST "%LIST_FOLDER%\%ARG4%" ECHO. %XLR4%ERROR:%$$% %LIST_FOLDER%\%ARG4% doesn't exist&&EXIT /B
IF "%ARG2%"=="-RUN" IF "%ARG5%"=="-VHDX" IF DEFINED ARG6 IF NOT EXIST "%IMAGE_FOLDER%\%ARG6%" ECHO. %XLR4%ERROR:%$$% %IMAGE_FOLDER%\%ARG6% doesn't exist&&EXIT /B
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-ITEM" CALL:MOUNT_CLEAR&&IF DEFINED ARG4 SET "PARSE_X="&&FOR /F "TOKENS=1-9* DELIMS=[]" %%a in ('ECHO.%ARG0%') DO (IF "%%b"=="COMMAND" SET "PARSE_X=1"&&SET "ARG4=[%%b][%%c][%%d][%%e]"&&SET "ARGZ=5"&&CALL SET "ARGX=%%f"&&CALL:ARGUE)
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-ITEM" CALL:MOUNT_REST&&IF DEFINED PARSE_X FOR /F "TOKENS=1-6* DELIMS= " %%a in ('ECHO.%ARG5%') DO (SET "ARG5=%%a"&&SET "ARG6=%%b"&&SET "ARG7=%%c"&&SET "ARG8=%%d"&&SET "ARG9=%%e")
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-ITEM" IF DEFINED PARSE_X SET "PARSE_X="&&FOR %%a in (5 6 7 8 9) DO (SET "CAPS_SET=ARG%%a"&&CALL SET "CAPS_VAR=%%ARG%%a%%"&&CALL:CAPS_SET)
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-ITEM" IF DEFINED ARG4 SET "DEL_Z=1"&&SET "ARG3=-LIST"&&SET "ARG4=$LSTZ"&&(ECHO.EXEC-LIST&&ECHO.%ARG4%)>"%LIST_FOLDER%\$LSTZ"
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-LIST" IF DEFINED ARG4 IF EXIST "%LIST_FOLDER%\%ARG4%" SET "$RUN=%LIST_FOLDER%\%ARG4%"&&IF "%ARG5%"=="-LIVE" SET "LIVE_APPLY=1"&&SET "CURR_SESSION=EXEC"&&SET "LST_SESSION=1"&&CALL:LIST_RUN
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-LIST" IF DEFINED ARG4 IF EXIST "%LIST_FOLDER%\%ARG4%" SET "$RUN=%LIST_FOLDER%\%ARG4%"&&IF "%ARG5%"=="-VHDX" SET "LIVE_APPLY="&&IF DEFINED ARG6 IF EXIST "%IMAGE_FOLDER%\%ARG6%" SET "VDISK=%IMAGE_FOLDER%\%ARG6%"&&SET "CURR_SESSION=EXEC"&&SET "LST_SESSION=1"&&SET "VDISK_FLAG=1"&&CALL:LIST_RUN
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-PKX" IF DEFINED ARG4 IF EXIST "%PACK_FOLDER%\%ARG4%" SET "PKX_PACK=%PACK_FOLDER%\%ARG4%"&&IF "%ARG5%"=="-LIVE" SET "LIVE_APPLY=1"&&SET "CURR_SESSION=PACK"&&SET "PKX_SESSION=1"&&CALL:PKX_RUN
IF "%ARG2%"=="-RUN" IF "%ARG3%"=="-PKX" IF DEFINED ARG4 IF EXIST "%PACK_FOLDER%\%ARG4%" SET "PKX_PACK=%PACK_FOLDER%\%ARG4%"&&IF "%ARG5%"=="-VHDX" SET "LIVE_APPLY="&&IF DEFINED ARG6 IF EXIST "%IMAGE_FOLDER%\%ARG6%" SET "VDISK=%IMAGE_FOLDER%\%ARG6%"&&SET "CURR_SESSION=PACK"&&SET "PKX_SESSION=1"&&SET "VDISK_FLAG=1"&&CALL:PKX_RUN
SET "VDISK_FLAG="&&SET "CURR_SESSION="&&SET "LST_SESSION="&&SET "PKX_SESSION="&&IF DEFINED DEL_Z SET "DEL_Z="&&DEL /Q /F "%LIST_FOLDER%\$LSTZ">NUL 2>&1
EXIT /B
:COMMAND_DISKMGR
IF DEFINED ARG2 IF "%ARG3%"=="-DISKUID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_DETECT>NUL 2>&1
IF DEFINED ARG2 IF "%ARG3%"=="-DISKUID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_DETECT%"
IF DEFINED ARG2 IF "%ARG3%"=="-DISK" IF "%DISK_TARGET%"=="00000000" ECHO. %XLR4%ERROR:%$$% Disk uid 00000000 can not be addressed by uid. Convert to GPT first (erase).&&EXIT /B
IF "%ARG2%"=="-LIST" CALL:DISK_LIST
IF "%ARG3%"=="-DISK" IF DEFINED ARG4 CALL:DISK_DETECT>NUL 2>&1
IF "%ARG2%"=="-INSPECT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&CALL:DISKMGR_INSPECT
IF "%ARG2%"=="-ERASE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&SET "$GET=TST_LETTER"&&CALL:LETTER_ANY&&CALL:DISKMGR_ERASE&SET "TST_LETTER="
IF "%ARG2%"=="-CHANGEUID" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&SET "GET_DISK_ID=%ARG5%"&&CALL:DISKMGR_CHANGEID
IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-SIZE"  IF DEFINED ARG6 SET "PART_SIZE=%ARG6%"&&CALL:DISKMGR_CREATE
IF "%ARG2%"=="-FORMAT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" IF DEFINED ARG6 SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_FORMAT
IF "%ARG2%"=="-DELETE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" IF DEFINED ARG6 SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_DELETE
IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" IF DEFINED ARG6 SET "PART_NUMBER=%ARG6%"&&IF "%ARG7%"=="-LETTER" IF DEFINED ARG8 SET "DISK_LETTER=%ARG8%"&&CALL:DISKMGR_MOUNT
IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-VHDX" IF EXIST "%IMAGE_FOLDER%\%ARG4%" SET "VDISK=%IMAGE_FOLDER%\%ARG4%"&&IF "%ARG5%"=="-LETTER" IF DEFINED ARG6 SET "VDISK_LTR=%ARG6%"&&CALL:VDISK_ATTACH
IF "%ARG2%"=="-UNMOUNT" IF "%ARG3%"=="-LETTER" IF DEFINED ARG4 SET "$LTR=%ARG4%"&&CALL:DISKMGR_UNMOUNT
EXIT /B
:COMMAND_BOOTMAKER
IF "%ARG2%"=="-CREATE" IF NOT EXIST "%BOOT_FOLDER%\BOOT.SAV" ECHO. %XLR4%ERROR:%$$% BOOT MEDIA %BOOT_FOLDER%\BOOT.SAV doesn't exist&&EXIT /B
IF DEFINED ARG2 IF "%ARG3%"=="-DISKUID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_DETECT>NUL 2>&1
IF DEFINED ARG2 IF "%ARG3%"=="-DISKUID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_DETECT%"
IF DEFINED ARG2 IF "%ARG3%"=="-DISK" IF "%DISK_TARGET%"=="00000000" ECHO. %XLR4%ERROR:%$$% Disk uid 00000000 can not addressed by uid. Convert to GPT first (erase).&&EXIT /B
IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"
IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG7%"=="-SIZE" IF DEFINED ARG8 SET "HOST_SIZE=%ARG8%"&&SET "$CHECK=NUM"&&SET "CHECK_VAR=%ARG8%"&&CALL:CHECK
IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG7%"=="-SIZE" IF DEFINED ARG8 IF DEFINED ERROR ECHO. %XLR4%ERROR:%$$% Invalid host partition size.&&EXIT /B
IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF DEFINED ARG6 SET "VHDX_SLOTX=%ARG6%"&&CALL:BOOT_CREATOR_START
EXIT /B
:COMMAND_HELP
ECHO. Command Line Parameters:
ECHO.   %##%Miscellaneous%$$%
ECHO.   -help                                                           This menu
ECHO.   -nextboot -vhdx                                                 Schedule next boot to vhdx
ECHO.   -nextboot -recovery                                             Schedule next boot to recovery
ECHO.   -autoboot -install                                              Install reboot to recovery switcher service
ECHO.   -autoboot -remove                                               Remove reboot to recovery switcher service
ECHO.   %##%Image Processing%$$%
ECHO.   -imageproc -wim %@@%x.wim%$$% -index %@@%#%$$% -vhdx %@@%x.vhdx%$$% -size %@@%GB%$$%            WIM to VHDX Conversion
ECHO.   -imageproc -vhdx %@@%x.vhdx%$$% -index %@@%#%$$% -wim %@@%x.wim%$$% -xlvl %@@%fast/max%$$%      VHDX to WIM Conversion
ECHO. Examples-
ECHO.   %@@%-imageproc -wim x.wim -index 1 -vhdx x.vhdx -size 25%$$%
ECHO.   %@@%-imageproc -vhdx x.vhdx -index 1 -wim x.wim -xlvl fast%$$%
ECHO.   %##%Image Management%$$%
ECHO.   -imagemgr -run -list %@@%x.list%$$% -live /or/ -vhdx %@@%x.vhdx%$$%             Run list
ECHO.   -imagemgr -run -item %@@%"[x][x][x][x]"%$$% -live /or/ -vhdx %@@%x.vhdx%$$%     Run item
ECHO.   -imagemgr -run -pkx %@@%x.pkx%$$% -live /or/ -vhdx %@@%x.vhdx%$$%               Run Package w/integrated list
ECHO. Examples-
ECHO.   %@@%-imagemgr -run -list "x y z.list" -live%$$%
ECHO.   %@@%-imagemgr -run -pkx x.pkx -vhdx x.vhdx%$$%
ECHO.   %@@%-imagemgr -run -item "[EXTPACKAGE][x y z.appx][INSTALL][IA]" -vhdx x.vhdx%$$%
ECHO.   %##%File Management%$$%
ECHO.   -filemgr -grant %@@%file/folder%$$%                                     Take ownership + Grant Permissions
ECHO. Examples-
ECHO.   %@@%-filemgr -grant c:\x.txt%$$%
ECHO.   %##%Disk Management%$$%
ECHO.   -diskmgr -list                                                  Condensed list of disks
ECHO.   -diskmgr -inspect -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$%                     DiskPart inquiry on specified disk
ECHO.   -diskmgr -erase -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$%                       Delete all partitions on specified disk
ECHO.   -diskmgr -create -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$% -size %@@%GB%$$%             Create NTFS partition on specified disk
ECHO.   -diskmgr -format -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$% -part %@@%#%$$%              Format partition w/NTFS on specified disk
ECHO.   -diskmgr -delete -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$% -part %@@%#%$$%              Delete partition on specified disk
ECHO.   -diskmgr -changeuid -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$% %@@%new-uid%$$%           Change disk uid of specified disk
ECHO.   -diskmgr -mount -disk %@@%#%$$% /or/ -diskuid %@@%uid%$$% -part %@@%#%$$% -letter %@@%letter%$$%         Assign drive letter
ECHO.   -diskmgr -unmount -letter %@@%letter%$$%                                         Remove drive letter
ECHO.   -diskmgr -mount -vhdx %@@%x.vhdx%$$% -letter %@@%letter%$$%                              Mount virtual disk
ECHO. Examples-
ECHO.   %@@%-diskmgr -create -disk 0 -size 25%$$%
ECHO.   %@@%-diskmgr -mount -disk 0 -part 1 -letter e%$$%
ECHO.   %@@%-diskmgr -unmount -letter e%$$%
ECHO.   %##%Boot Creator%$$%
ECHO.   -bootmaker -create -disk %@@%#%$$% -vhdx %@@%x.vhdx%$$%                         Erase specified disk and make bootable
ECHO.   -bootmaker -create -diskuid %@@%uid%$$% -vhdx %@@%x.vhdx%$$% -size %@@%GB%$$%           Erase specified disk and make bootable + set host partition size
ECHO. Examples-
ECHO.   %@@%-bootmaker -create -disk 0 -vhdx x.vhdx%$$%                         Default is the entire disk when size is not specified
ECHO.   %@@%-bootmaker -create -diskuid 12345678-1234-1234-1234-123456781234 -vhdx x.vhdx -size 100%$$%
ECHO.
EXIT /B
:DISCLAIMER
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP
ECHO.                              %XLR2%DISCLAIMER%$$%&&ECHO.
ECHO.    It's recommended to backup your data before making any changes
ECHO.     to the live operating system or performing disk partitioning.
ECHO.      Running this tool on a host-OS language other than english
ECHO.        can cause serious malfunctions and is not recommended.
ECHO.
ECHO. The user assumes liability for loss relating to the use of this tool.     
ECHO.&&ECHO.                          Do You Agree? (%##%Y%$$%/%##%N%$$%)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&SET "$SELECT=ACCEPTX"&&CALL:MENU_SELECT
IF "%ACCEPTX%"=="Y" SET "DISCLAIMER=ACCEPTED"
IF NOT "%DISCLAIMER%"=="ACCEPTED" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.     The ( %##%@%$$% ) %##%Current Environment%$$% option ^& disk management area&&ECHO.         are the 'caution zones' and can be avoided if unsure.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
::#########################################################################
:SETTINGS_MENU
::#########################################################################
CLS&&CALL:SETS_HANDLER&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                        Settings Configuration&&ECHO.
ECHO. (%##%1%$$%) Appearance&&ECHO. (%##%2%$$%) Shortcuts&&ECHO. (%##%3%$$%) Compression          %@@%%COMPRESS%%$$%&&ECHO. (%##%4%$$%) Folder Layout        %@@%%FOLDER_MODE%%$$%&&ECHO. (%##%5%$$%) Current Environment  %@@%%ALLOW_ENV%%$$%&&IF "%PROG_MODE%"=="RAMDISK" ECHO. (%##%6%$$%) Host Hide            %@@%%HOST_HIDE%%$$%&&ECHO. (%##%7%$$%) Update
ECHO. (%##%@%$$%) Clear Settings
IF NOT "%PROG_MODE%"=="GUI" ECHO. (%##%*%$$%) %XLR2%Enable Custom Menu%$$%
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF DEFINED MENU_EXIT GOTO:COMMAND_INTERNAL_END
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="~" IF NOT "%DEBUG%"=="ENABLED" SET "DEBUG=ENABLED"&SET "SELECT="
IF "%SELECT%"=="~" IF "%DEBUG%"=="ENABLED" SET "DEBUG=DISABLED"&SET "SELECT="
IF "%SELECT%"=="*" IF NOT "%PROG_MODE%"=="GUI" GOTO:MENU_LIST
IF "%SELECT%"=="@" CALL:SETS_CLEAR&SET "SELECT="
IF "%SELECT%"=="1" GOTO:APPEARANCE
IF "%SELECT%"=="2" GOTO:SHORTCUTS
IF "%SELECT%"=="3" CALL:COMPRESS_LVL&SET "SELECT="
IF "%SELECT%"=="4" CALL:FOLDER_MODE&SET "SELECT="
IF "%SELECT%"=="5" IF NOT "%DISCLAIMER%"=="ACCEPTED" CALL:DISCLAIMER
IF "%SELECT%"=="5" IF "%DISCLAIMER%"=="ACCEPTED" IF NOT "%ALLOW_ENV%"=="ENABLED" SET "ALLOW_ENV=ENABLED"&&SET "SELECT="
IF "%SELECT%"=="5" IF "%DISCLAIMER%"=="ACCEPTED" IF NOT "%ALLOW_ENV%"=="DISABLED" SET "ALLOW_ENV=DISABLED"&&SET "SELECT="
IF "%SELECT%"=="6" IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_HIDE%"=="DISABLED" SET "HOST_HIDE=ENABLED"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.           The vhdx host partition will be hidden upon exit.&&ECHO.                     Boot into recovery to revert.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED&SET "SELECT="
IF "%SELECT%"=="6" IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_HIDE%"=="ENABLED" SET "HOST_HIDE=DISABLED"&&SET "SELECT="
IF "%SELECT%"=="7" IF "%PROG_MODE%"=="RAMDISK" GOTO:UPDATE_RECOVERY
GOTO:SETTINGS_MENU
:MENU_LIST
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                %XLR2%Attention:%$$% This is an advanced feature.&&ECHO.        Proceeding will load a list instead of the main menu.&&ECHO.&&ECHO.                         Press (%##%X%$$%) to proceed&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF NOT "%SELECTX%"=="X" GOTO:SETTINGS_MENU
SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Custom Main Menu&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) Create new template&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&ECHO.&&CALL:MENU_SELECT
IF "%SELECT%"=="." CALL:MENU_TEMPLATE
IF DEFINED $PICK SET "MENU_LIST=%$CHOICE%"&&SET "MENU_MODE=CUSTOM"&&ECHO.&&ECHO. Using %@@%%$CHOICE%%$$% instead of the main menu.&&ECHO.&&CALL:PAUSED&GOTO:CUSTOM_MODE
GOTO:SETTINGS_MENU
:MENU_TEMPLATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                       Custom Main Menu Template&&ECHO.&&ECHO. (%##%1%$$%) Multi-List&&ECHO. (%##%2%$$%) Exec-List&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF NOT "%SELECTX%"=="1" IF NOT "%SELECTX%"=="2" EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter name of new .LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
SET "$PICK=%LIST_FOLDER%\%NEW_NAME%.list"&&SET "$CHOICE=%NEW_NAME%.list"
IF "%SELECTX%"=="1" (ECHO.MULTI-LIST&&ECHO.This is an example of a custom menu for recovery.&&ECHO.Set a custom banner in windick.ini.&&ECHO.&&ECHO.[GROUP][Recovery Operation Example][Restore a wim to vhdx]&&ECHO.[COMMANDQ][IF EXIST "%%IMAGE_FOLDER%%\active_xyz.vhdx" ECHO.Deleting active_xyz.vhdx...%%+%%DEL /Q /F "%%IMAGE_FOLDER%%\active_xyz.vhdx"%%}%%NUL][CMD][IA]&&ECHO.[COMMAND][%%PROG_SOURCE%%\windick.cmd -imageproc -wim "backup_xyz.wim" -index 1 -vhdx "active_xyz.vhdx" -size 25000][CMD][IA]&&ECHO.[GROUP][Recovery Operation Example][Backup a vhdx to wim]&&ECHO.[COMMANDQ][IF EXIST "%%IMAGE_FOLDER%%\backup_xyz.wim" ECHO.Deleting backup_xyz.wim...%%+%%DEL /Q /F "%%IMAGE_FOLDER%%\backup_xyz.wim"%%}%%NUL][CMD][IA]&&ECHO.[COMMAND][%%PROG_SOURCE%%\windick.cmd -imageproc -vhdx "active_xyz.vhdx" -index 1 -wim "backup_xyz.wim" -xlvl fast][CMD][IA]&&ECHO.[GROUP][Recovery Operation Example][Restore a wim to vhdx with name prompt]&&ECHO.[PROMPT1][               Enter new vhdx name: 0-9 A-Z - No Spaces][VAR1]&&ECHO.[COMMANDQ][IF EXIST "%%IMAGE_FOLDER%%\%%VAR1%%.vhdx" ECHO.Deleting %%VAR1%%.vhdx...%%+%%DEL /Q /F "%%IMAGE_FOLDER%%\%%VAR1%%.vhdx"%%}%%NUL][CMD][IA]&&ECHO.[COMMAND][%%PROG_SOURCE%%\windick.cmd -imageproc -wim "backup_xyz.wim" -index 1 -vhdx "%%VAR1%%.vhdx" -size 25000][CMD][IA]&&ECHO.&&ECHO.[GROUP][Open an app Example][Notepad]&&ECHO.[COMMAND][start notepad.exe][CMD][IA]&&ECHO.[GROUP][Open an app Example][Regedit]&&ECHO.[COMMAND][start regedit.exe][CMD][IA])>"%$PICK%"
IF "%SELECTX%"=="2" (ECHO.EXEC-LIST&&ECHO.This is an example of an execution list for recovery. A reboot to restore scenerio.&&ECHO.[COMMANDQ][IF EXIST "Z:\$\active_xyz.vhdx" ECHO.Deleting active_xyz.vhdx...%%+%%DEL /f "Z:\$\active_xyz.vhdx"][CMD][IA]&&ECHO.[COMMAND][%%PROG_SOURCE%%\windick.cmd -imageproc -wim "backup_xyz.wim" -index 1 -vhdx "active_xyz.vhdx" -size 25000][CMD][IA]&&ECHO.[COMMANDQ][REM %%PROG_SOURCE%%\windick.cmd -nextboot -vhdx][CMD][IA]&&ECHO.[COMMANDQ][PAUSE][CMD][IA])>"%$PICK%"
START NOTEPAD.EXE "%$PICK%"
EXIT /B
:APPEARANCE
CLS&&CALL:SETS_HANDLER&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              Appearance&&ECHO.
ECHO. (%##%1%$$%) Pad Type           %@@%PAD %PAD_TYPE%%$$%&&ECHO. (%##%2%$$%) Pad Size           %@@%%PAD_SIZE%%$$%&&ECHO. (%##%7%$$%) Pad Box            %@@%%PAD_BOX%%$$%&&ECHO. (%##%3%$$%) Pad Sequence       %@@%%PAD_SEQ%%$$%&&CALL ECHO. (%##%4%$$%) Text Color         %@@%COLOR %%XLR%TXT_COLOR%%%%TXT_COLOR%%$$%&&CALL ECHO. (%##%5%$$%) Accent Color       %@@%COLOR %%XLR%ACC_COLOR%%%%ACC_COLOR%%$$%&&CALL ECHO. (%##%6%$$%) Button Color       %@@%COLOR %%XLR%BTN_COLOR%%%%BTN_COLOR%%$$%&&ECHO.&&ECHO.                         Color ( %##%-%$$% / %##%+%$$% ) Shift&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:SETTINGS_MENU
IF "%SELECT%"=="+" CALL:COLOR_SHIFT_TXT&SET "SELECT="
IF "%SELECT%"=="-" CALL:COLOR_SHIFT_PAD&SET "SELECT="
IF "%SELECT%"=="1" CALL:PAD_TYPE&SET "SELECT="
IF "%SELECT%"=="2" IF "%PAD_SIZE%"=="LARGE" SET "PAD_SIZE=SMALL"&SET "SELECT="
IF "%SELECT%"=="2" IF "%PAD_SIZE%"=="SMALL" SET "PAD_SIZE=LARGE"&SET "SELECT="
IF "%SELECT%"=="3" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                  Enter 10 digit color sequence seed&&ECHO.&&ECHO.                   [ %XLR0%0%XLR1%1%XLR2%2%XLR3%3%XLR4%4%XLR5%5%XLR6%6%XLR7%7%XLR8%8%XLR9%9%$$% ]    [ %XLR1%11%XLR2%22%XLR3%33%XLR4%44%XLR5%55%$$% ]&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&SET "$SELECT=COLOR_XXX"&&CALL:MENU_SELECT
IF "%SELECT%"=="3" IF "%COLOR_XXX%"=="-" SET "PAD_SEQ=6666600000"&SET "SELECT="
IF "%SELECT%"=="3" SET "XNTX="&&FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO.%COLOR_XXX%^| FIND /V ""') do (CALL SET /A XNTX+=1)
IF "%SELECT%"=="3" IF "%XNTX%"=="10" SET "PAD_SEQ=%COLOR_XXX%"&&SET "COLOR_XXX="&SET "SELECT="
IF "%SELECT%"=="4" SET "COLOR_TMP=TXT_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="5" SET "COLOR_TMP=ACC_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="6" SET "COLOR_TMP=BTN_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="7" IF "%PAD_BOX%"=="DISABLED" SET "PAD_BOX=ENABLED"&SET "SELECT="
IF "%SELECT%"=="7" IF "%PAD_BOX%"=="ENABLED" SET "PAD_BOX=DISABLED"&SET "SELECT="
GOTO:APPEARANCE
:PAD_TYPE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                           Choose a pad type&&ECHO.&&ECHO.   (%##%0%$$%)None (%##%1%$$%)◌ (%##%2%$$%)○ (%##%3%$$%)● (%##%4%$$%)□ (%##%5%$$%)■ (%##%6%$$%)░ (%##%7%$$%)▒ (%##%8%$$%)▓ (%##%9%$$%)~ (%##%10%$$%)= (%##%11%$$%)#&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11) DO (IF "%SELECTX%"=="%%a" SET "PAD_TYPE=%SELECTX%")
EXIT /B
:COLOR_CHOICE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                            Choose a color&&ECHO.&&ECHO.                  [ %XLR0% 0 %XLR1% 1 %XLR2% 2 %XLR3% 3 %XLR4% 4 %XLR5% 5 %XLR6% 6 %XLR7% 7 %XLR8% 8 %XLR9% 9 %$$% ]&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%SELECTX%"=="%%a" SET "%COLOR_TMP%=%SELECTX%")
SET "COLOR_TMP="&&EXIT /B
:COLOR_SHIFT_PAD
FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%PAD_SEQ%^| FIND /V ""') do (SET "XXX_XXX=%%G"&&SET /A "PAD_XNT+=1"&&CALL:PAD_XNT)
SET "PAD_SEQ=%PAD_SHIFT%"&&FOR %%a in (PAD_SHIFT PAD_XNT XXX_XXX) DO (SET "%%a=")
EXIT /B
:COLOR_SHIFT_TXT
FOR %%a in (TXT_COLOR ACC_COLOR BTN_COLOR) DO (SET /A "%%a+=1")
IF "%TXT_COLOR%"=="10" SET "TXT_COLOR=0"
IF "%ACC_COLOR%"=="10" SET "ACC_COLOR=0"
IF "%BTN_COLOR%"=="10" SET "BTN_COLOR=0"
EXIT /B
:PAD_XNT
IF %PAD_XNT% GTR 10 EXIT /B
SET /A "XXX_XXX+=1"&&IF "%XXX_XXX%"=="9" SET "XXX_XXX=0"
SET "PAD_SHIFT=%PAD_SHIFT%%XXX_XXX%"
EXIT /B
:COMPRESS_LVL
IF "%COMPRESS%"=="FAST" SET "COMPRESS=MAX"&&EXIT /B
IF "%COMPRESS%"=="MAX" SET "COMPRESS=FAST"&&EXIT /B
EXIT /B
:SHORTCUTS
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Shortcuts&&ECHO.
FOR %%a in (1 2 3 4 5) DO (CALL ECHO. Slot ^(%##%%%a%$$%^)  ^(%##%%%HOTKEY_%%a%%%$$%^)	%@@%%%SHORT_%%a%%%$$%)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=MOST"&&CALL:MENU_SELECT
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:SETTINGS_MENU
IF DEFINED SELECT CALL:SHORTCUT_RUN
SET "SHORT_SET="&&FOR %%a in (1 2 3 4 5) DO (IF "%SELECT%"=="%%a" SET "SHORT_SET=1"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                             Enter command&&SET "$SELECT=SHORT_%SELECT%"&&SET "$CASE=ANY"&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:MENU_SELECT&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter 3+ digit hotkey&&SET "$SELECT=HOTKEY_%SELECT%"&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:MENU_SELECT&&SET "SHORT_XNT=0"&&FOR /F "DELIMS=" %%G in ('CALL CMD.EXE /D /U /C ECHO.%%HOTKEY_%SELECT%%%^| FIND /V ""') do (CALL SET /A "SHORT_XNT+=1"))
IF DEFINED SHORT_SET IF NOT "%SHORT_XNT%" GEQ "3" SET "HOTKEY_%SELECT%="&&SET "SHORT_%SELECT%="
GOTO:SHORTCUTS
:SHORTCUT_RUN
IF "%SELECT%"=="%HOTKEY_1%" SET "SHORT_RUN=%SHORT_1%"
IF "%SELECT%"=="%HOTKEY_2%" SET "SHORT_RUN=%SHORT_2%"
IF "%SELECT%"=="%HOTKEY_3%" SET "SHORT_RUN=%SHORT_3%"
IF "%SELECT%"=="%HOTKEY_4%" SET "SHORT_RUN=%SHORT_4%"
IF "%SELECT%"=="%HOTKEY_5%" SET "SHORT_RUN=%SHORT_5%"
IF NOT DEFINED SHORT_RUN EXIT /B
CALL START %SHORT_RUN%
SET "SHORT_RUN="&&EXIT /B
:AUTOBOOT_SVC
CALL:GET_NEXTBOOT
IF NOT DEFINED BOOT_OK ECHO. %XLR4%ERROR:%$$% The boot environment is not installed on this system.&&EXIT /B
IF "%BOOTSVC%"=="INSTALL" ECHO. Recovery switcher service is installed.&&SC CREATE AutoBoot binpath="%WinDir%\SYSTEM32\CMD.EXE /C BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst" start=auto>NUL 2>&1
IF "%BOOTSVC%"=="REMOVE" ECHO.Recovery switcher service is removed.&&SC DELETE AutoBoot>NUL 2>&1
SET "BOOTSVC="&&EXIT /B
:UPDATE_RECOVERY
CLS&&CALL:SETS_HANDLER&&CALL:GET_SPACE&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Recovery Update&&ECHO.&&ECHO. (%##%1%$$%) Program  (%##%*%$$%) Test&&ECHO. (%##%2%$$%) Recovery Wallpaper&&ECHO. (%##%3%$$%) Recovery Password&&ECHO. (%##%4%$$%) Boot Media&&ECHO. (%##%5%$$%) Host Folder&&ECHO. (%##%6%$$%) EFI Files&&ECHO. (%##%7%$$%) windick.ini&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:SETTINGS_MENU
IF "%SELECT%"=="*" IF EXIST "%PROG_SOURCE%\windick.cmd" SET "VER_GET=%PROG_SOURCE%\windick.cmd"&&CALL:GET_PROGVER&&COPY /Y "%PROG_SOURCE%\windick.cmd" "%PROG_FOLDER%"&GOTO:MAIN_MENU
SET "$GO="&&FOR %%a in (1 2 3 4 5 6 7) DO (IF "%SELECT%"=="%%a" SET "$GO=1")
IF NOT DEFINED $GO GOTO:UPDATE_RECOVERY
FOR %%a in (0 1 2 3 4 5 ERROR) DO (IF "%FREE%"=="%%a" ECHO. %XLR2%ERROR:%$$% Not enough free space. Clear some space and try again. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END)
IF "%SELECT%"=="1" SET "UPDATE_TYPE=PROG"
IF "%SELECT%"=="2" SET "UPDATE_TYPE=WALL"
IF "%SELECT%"=="3" SET "UPDATE_TYPE=PASS"
IF "%SELECT%"=="4" SET "UPDATE_TYPE=BOOT"
IF "%SELECT%"=="5" SET "UPDATE_TYPE=HOST"
IF "%SELECT%"=="6" SET "UPDATE_TYPE=EFI"
IF "%SELECT%"=="7" SET "UPDATE_TYPE=SETS"
IF "%UPDATE_TYPE%"=="SETS" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Default Settings&&ECHO.&&ECHO. (%##%1%$$%) Replace windick.ini&&ECHO. (%##%2%$$%) Remove windick.ini&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%UPDATE_TYPE%"=="SETS" IF NOT "%SELECT%"=="1" IF NOT "%SELECT%"=="2" GOTO:UPDATE_RECOVERY
IF "%UPDATE_TYPE%"=="SETS" IF "%SELECT%"=="1" SET "UPDATE_TYPE=CONFIG"
IF "%UPDATE_TYPE%"=="SETS" IF "%SELECT%"=="2" SET "UPDATE_TYPE=DEL_CONFIG"
IF "%UPDATE_TYPE%"=="CONFIG" IF NOT EXIST "%PROG_SOURCE%\windick.ini" ECHO. %XLR4%ERROR:%$$% File windick.ini is not located in folder. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="EFI" IF NOT EXIST "%BOOT_FOLDER%\boot.sdi" IF NOT EXIST "%BOOT_FOLDER%\bootmgfw.efi" ECHO. %XLR4%ERROR:%$$% Files boot.sdi and bootmgfw.efi are not located in folder. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="BOOT" IF NOT EXIST "%BOOT_FOLDER%\boot.sav" ECHO. %XLR4%ERROR:%$$% File boot.sav is not located in folder. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="PROG" IF NOT EXIST "%PROG_SOURCE%\windick.cmd" ECHO. %XLR4%ERROR:%$$% File windick.cmd is not located in folder. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="PROG" SET "VER_GET=%PROG_SOURCE%\windick.cmd"&&SET "VER_SET=VER_X"&&CALL:GET_PROGVER
IF "%UPDATE_TYPE%"=="PROG" SET "VER_GET=%PROG_FOLDER%\windick.cmd"&&SET "VER_SET=VER_Y"&&CALL:GET_PROGVER
IF "%UPDATE_TYPE%"=="PROG" IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% File windick.cmd is corrupt. Abort.&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="PASS" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.      %XLR4%Important:%$$% Do not use any of these symbols [%XLR2% ^< ^> %% ^^! ^& ^^^^ %$$%].&&ECHO.&&ECHO.                       Enter new recovery password&&ECHO.               Press (%##%.%$$%) to remove the recovery password&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&SET "$SELECT=RECOVERY_LOCK"&&SET "$CASE=ANY"&&SET "$CHECK=MOST"&&SET "VERBOSE=1"&&CALL:MENU_SELECT
IF "%UPDATE_TYPE%"=="PASS" IF DEFINED ERROR CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="PASS" IF "%RECOVERY_LOCK%"=="." SET "RECOVERY_LOCK="
IF "%UPDATE_TYPE%"=="WALL" CALL:PE_WALLPAPER
IF "%UPDATE_TYPE%"=="WALL" IF NOT DEFINED $PICK SET "ERROR=UPDATE_RECOVERY"&&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="HOST" CALL:HOST_FOLDER
IF "%UPDATE_TYPE%"=="HOST" IF DEFINED ERROR GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="HOST" IF EXIST "Z:\%HOST_FOLDER%" ECHO. %XLR2%ERROR:%$$% Host folder %@@%%HOST_FOLDER%%$$% already exists. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="HOST" REN "Z:\%HOST_FOLDERX%" "%HOST_FOLDER%">NUL 2>&1
IF "%UPDATE_TYPE%"=="HOST" IF NOT EXIST "Z:\%HOST_FOLDER%" ECHO. %XLR2%ERROR:%$$% Host folder is currently in use. Abort.&&SET "ERROR=UPDATE_RECOVERY"&&CALL:PAUSED&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="HOST" REN "Z:\%HOST_FOLDER%" "%HOST_FOLDERX%">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" SET "PATH_X=%SYSTEMDRIVE%"&&CALL:GET_PATHINFO&MOVE /Y "%BOOT_FOLDER%\boot.sav" "%BOOT_FOLDER%\$BOOT.wim">NUL
IF "%UPDATE_TYPE%"=="BOOT" SET "INDEX_WORD=Setup"&&SET "IMAGE_X=%BOOT_FOLDER%\$BOOT.wim"&&CALL:GET_WIMINDEX
IF "%UPDATE_TYPE%"=="BOOT" IF NOT DEFINED INDEX_Z SET "INDEX_Z=1"
IF "%UPDATE_TYPE%"=="BOOT" SET "IMAGE_X=%BOOT_FOLDER%\$BOOT.wim"&&SET "INDEX_X=%INDEX_Z%"&&CALL:GET_IMAGEINFO
IF "%UPDATE_TYPE%"=="BOOT" MOVE /Y "%BOOT_FOLDER%\$BOOT.wim" "%BOOT_FOLDER%\boot.sav">NUL
IF "%UPDATE_TYPE%"=="BOOT" IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% File boot.sav is corrupt. Abort.&&CALL:PAUSED&GOTO:UPDATE_END
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.
IF "%UPDATE_TYPE%"=="DEL_CONFIG" ECHO.           This will remove the default windick.ini file.
IF "%UPDATE_TYPE%"=="CONFIG" ECHO.           This will replace the default windick.ini file.
IF "%UPDATE_TYPE%"=="EFI" ECHO.             This will replace the current EFI boot files.
IF "%UPDATE_TYPE%"=="BOOT" ECHO.        This will replace %@@%v%$PATHVER%%$$% with %@@%v%$IMGVER%%$$%
IF "%UPDATE_TYPE%"=="PROG" ECHO.                  This will replace %@@%v%VER_Y%%$$% with %@@%v%VER_X%%$$%.
IF "%UPDATE_TYPE%"=="PASS" IF DEFINED RECOVERY_LOCK ECHO.           Recovery password will be changed to %@@%%RECOVERY_LOCK%%$$%.
IF "%UPDATE_TYPE%"=="PASS" IF NOT DEFINED RECOVERY_LOCK ECHO.                  Recovery password will be cleared.
IF "%UPDATE_TYPE%"=="WALL" ECHO.              This will replace the recovery background.
IF "%UPDATE_TYPE%"=="HOST" ECHO.              Host folder will be changed to %@@%%HOST_FOLDER%%$$%.&&ECHO.       %XLR4%NOTE:%$$% The boot menu will need to be configured next boot.
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:CONFIRM
IF NOT "%CONFIRM%"=="X" SET "ERROR=UPDATE_RECOVERY"&&GOTO:UPDATE_END
SET "REBOOT_MAN=1"&&CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.                  %XLR4%Recovery update has been initiated.%$$%&&ECHO.  %XLR2%Caution:%$$% Interrupting this process can render the disk unbootable.&&ECHO.
CALL:EFI_MOUNT
IF DEFINED ERROR GOTO:UPDATE_END
SET "GET_SIZE=MB"&&SET "INPUT=%EFI_LETTER%:"&&SET "OUTPUT=EFI_FREE"&&CALL:GET_FREE
IF NOT DEFINED ERROR SET "GET_SIZE=MB"&&SET "INPUT=%EFI_LETTER%:\$.WIM"&&SET "OUTPUT=BOOT_X"&&CALL:GET_FILESIZE
IF NOT DEFINED ERROR SET /A "EFI_FREE+=%BOOT_X%"
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% Unable to get file size or free space. Abort.&&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="EFI" IF EXIST "%BOOT_FOLDER%\boot.sdi" ECHO. Using boot.sdi located in folder, for efi image boot support.&&COPY /Y "%BOOT_FOLDER%\boot.sdi" "%EFI_LETTER%:\Boot">NUL
IF "%UPDATE_TYPE%"=="EFI" IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" ECHO. Using bootmgfw.efi located in folder, for the efi bootloader.&&COPY /Y "%BOOT_FOLDER%\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL
IF "%UPDATE_TYPE%"=="EFI" FOR %%a in (boot.sdi bootmgfw.efi) DO (IF NOT EXIST "%BOOT_FOLDER%\%%a" ECHO. File %%a is not located in folder, skipping.)
IF "%UPDATE_TYPE%"=="EFI" ECHO. Unmounting EFI...&&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
CALL:VTEMP_CREATE
IF DEFINED ERROR CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
ECHO. Extracting boot-media...
IF "%UPDATE_TYPE%"=="BOOT" MOVE /Y "%BOOT_FOLDER%\boot.sav" "%BOOT_FOLDER%\$BOOT.wim">NUL
IF "%UPDATE_TYPE%"=="BOOT" SET "INDEX_WORD=Setup"&&SET "IMAGE_X=%BOOT_FOLDER%\$BOOT.wim"&&CALL:GET_WIMINDEX
IF NOT DEFINED INDEX_Z SET "INDEX_Z=1"
IF NOT "%UPDATE_TYPE%"=="BOOT" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%EFI_LETTER%:\$.WIM" /INDEX:1 /APPLYDIR:"%VDISK_LTR%:"&ECHO.&SET "INDEX_Z="
IF "%UPDATE_TYPE%"=="BOOT" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%BOOT_FOLDER%\$BOOT.wim" /INDEX:%INDEX_Z% /APPLYDIR:"%VDISK_LTR%:"&ECHO.&SET "INDEX_Z="
IF "%UPDATE_TYPE%"=="BOOT" MOVE /Y "%BOOT_FOLDER%\$BOOT.wim" "%BOOT_FOLDER%\boot.sav">NUL
IF NOT EXIST "%VDISK_LTR%:\Windows" ECHO. %XLR2%ERROR:%$$% BOOT MEDIA&&ECHO. Unmounting EFI...&&SET "ERROR=UPDATE_RECOVERY"&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
IF "%UPDATE_TYPE%"=="BOOT" MD "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%PROG_FOLDER%\windick.cmd" "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%PROG_FOLDER%\HOST_TARGET" "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%PROG_FOLDER%\HOST_FOLDER" "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%WINDIR%\System32\setup.bmp" "%VDISK_LTR%:\Windows\System32">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" IF NOT EXIST "%PROG_FOLDER%\SETTINGS_INI" DEL /Q /F "\\?\%VDISK_LTR%:\$\SETTINGS_INI">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" IF NOT EXIST "%PROG_FOLDER%\RECOVERY_LOCK" DEL /Q /F "\\?\%VDISK_LTR%:\$\RECOVERY_LOCK">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" IF EXIST "%PROG_FOLDER%\SETTINGS_INI" COPY /Y "%PROG_FOLDER%\SETTINGS_INI" "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" IF EXIST "%PROG_FOLDER%\RECOVERY_LOCK" COPY /Y "%PROG_FOLDER%\RECOVERY_LOCK" "%VDISK_LTR%:\$">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" IF EXIST "%VDISK_LTR%:\setup.exe" DEL /Q /F "\\?\%VDISK_LTR%:\setup.exe">NUL 2>&1
::IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%VDISK_LTR%:\Windows\Boot\DVD\EFI\boot.sdi" "%EFI_LETTER%:\Boot">NUL 2>&1
::IF "%UPDATE_TYPE%"=="BOOT" COPY /Y "%VDISK_LTR%:\Windows\Boot\EFI\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL 2>&1
IF "%UPDATE_TYPE%"=="BOOT" (ECHO.[LaunchApp]&&ECHO.AppPath=X:\$\windick.cmd)>"%VDISK_LTR%:\Windows\System32\winpeshl.ini"
IF "%UPDATE_TYPE%"=="BOOT" ECHO. Updating boot media %@@%v%$PATHVER%%$$% to %@@%v%$IMGVER%%$$%.
IF "%UPDATE_TYPE%"=="DEL_CONFIG" ECHO. Removing the default windick.ini file.&&DEL /Q /F "\\?\%VDISK_LTR%:\$\SETTINGS_INI">NUL 2>&1
IF "%UPDATE_TYPE%"=="CONFIG" ECHO. Updating the default windick.ini file.&&COPY /Y "%PROG_SOURCE%\windick.ini" "%VDISK_LTR%:\$\SETTINGS_INI">NUL
IF "%UPDATE_TYPE%"=="PROG" ECHO. Updating windick.cmd %@@%v%VER_Y%%$$% to %@@%v%VER_X%%$$%.&&COPY /Y "%PROG_SOURCE%\windick.cmd" "%VDISK_LTR%:\$">NUL
IF "%UPDATE_TYPE%"=="PASS" IF DEFINED RECOVERY_LOCK ECHO. Recovery password will be changed to %@@%%RECOVERY_LOCK%%$$%.&&ECHO.%RECOVERY_LOCK%>"%VDISK_LTR%:\$\RECOVERY_LOCK"
IF "%UPDATE_TYPE%"=="PASS" IF NOT DEFINED RECOVERY_LOCK ECHO. Recovery password will be cleared.&&DEL /Q /F "\\?\%VDISK_LTR%:\$\RECOVERY_LOCK">NUL 2>&1
IF "%UPDATE_TYPE%"=="WALL" ECHO. Using %PE_WALLPAPER% located in folder for the recovery wallpaper.
IF "%UPDATE_TYPE%"=="WALL" TAKEOWN /F "%VDISK_LTR%:\Windows\System32\setup.bmp">NUL 2>&1
IF "%UPDATE_TYPE%"=="WALL" ICACLS "%VDISK_LTR%:\Windows\System32\setup.bmp" /grant %USERNAME%:F>NUL 2>&1
IF "%UPDATE_TYPE%"=="WALL" COPY /Y "%CACHE_FOLDER%\%PE_WALLPAPER%" "%VDISK_LTR%:\Windows\System32\setup.bmp">NUL 2>&1
IF "%UPDATE_TYPE%"=="HOST" ECHO. Host folder will be changed to %@@%%HOST_FOLDER%%$$%.&&ECHO.%HOST_FOLDER%>"%VDISK_LTR%:\$\HOST_FOLDER"
ECHO. Saving boot-media...&&DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%VDISK_LTR%:" /IMAGEFILE:"%PROG_SOURCE%\$TEMP.wim" /COMPRESS:%COMPRESS% /NAME:"WindowsPE" /CheckIntegrity /Verify /Bootable&ECHO.
SET "IMAGE_X=%PROG_SOURCE%\$TEMP.wim"&&SET "INDEX_X=1"&&CALL:GET_IMAGEINFO
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% File boot.sav is corrupt. Abort.&&ECHO. Unmounting EFI...&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
SET "GET_SIZE=MB"&&SET "INPUT=%PROG_SOURCE%\$TEMP.wim"&&SET "OUTPUT=BOOT_X"&&CALL:GET_FILESIZE
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% Unable to get file size or free space. Abort.&&ECHO. Unmounting EFI...&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
CALL:GET_SPACE&&FOR %%a in (EFI_FREE BOOT_X) DO (IF NOT DEFINED %%a SET "%%a=0")
IF %EFI_FREE% LEQ %BOOT_X% ECHO. %XLR2%ERROR:%$$% File boot.sav %BOOT_X%MB exceeds %EFI_FREE%MB. Abort.&&ECHO. Unmounting EFI...&&SET "ERROR=UPDATE_RECOVERY"&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END
FOR %%a in (0 ERROR) DO (IF "%FREE%"=="%%a" ECHO. %XLR2%ERROR:%$$% Not enough free space. Clear some space and try again. Abort.&&ECHO. Unmounting EFI...&&SET "ERROR=UPDATE_RECOVERY"&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT&GOTO:UPDATE_END)
DEL /Q /F "%EFI_LETTER%:\$.WIM">NUL 2>&1
MOVE /Y "%PROG_SOURCE%\$TEMP.wim" "%EFI_LETTER%:\$.WIM">NUL
ECHO. Unmounting EFI...&&CALL:VTEMP_DELETE&CALL:EFI_UNMOUNT
:UPDATE_END
IF EXIST "%PROG_SOURCE%\$TEMP.wim" DEL /Q /F "%PROG_SOURCE%\$TEMP.wim">NUL 2>&1
IF "%UPDATE_TYPE%"=="HOST" IF NOT DEFINED ERROR REN "Z:\%HOST_FOLDERX%" "%HOST_FOLDER%">NUL 2>&1
IF NOT DEFINED ERROR FOR %%a in (Z:\%HOST_FOLDER% Z:) DO (ICACLS "%%a" /deny everyone:^(DE,WA,WDAC^)>NUL 2>&1)
IF DEFINED REBOOT_MAN ECHO.&&ECHO.                       THE SYSTEM WILL NOW RESTART.&&ECHO.&&ECHO.              %@@%UPDATE FINISH:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAUSED&GOTO:QUIT
SET "RECOVERY_LOCK="&&GOTO:UPDATE_RECOVERY
:VTEMP_CREATE
IF DEFINED ERROR EXIT /B
IF EXIST "%PROG_SOURCE%\$TEMP.vhdx" CALL:VTEMP_DELETE>NUL 2>&1
ECHO. Mounting temporary vdisk...&&SET "VDISK=%PROG_SOURCE%\$TEMP.vhdx"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE>NUL 2>&1
IF NOT EXIST "%VDISK_LTR%:\" SET "ERROR=VTEMP_CREATE"&&CALL:DEBUG
EXIT /B
:VTEMP_DELETE
IF EXIST "%PROG_SOURCE%\$TEMP.vhdx" ECHO. Unmounting temporary vdisk...&&SET "VDISK=%PROG_SOURCE%\$TEMP.vhdx"&&CALL:VDISK_DETACH>NUL 2>&1
IF EXIST "%PROG_SOURCE%\$TEMP.vhdx" DEL /Q /F "%PROG_SOURCE%\$TEMP.vhdx">NUL 2>&1
EXIT /B
:PE_WALLPAPER
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                          Recovery Wallpaper&&ECHO.&&ECHO.  %@@%AVAILABLE JPGs/PNGs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%CACHE_FOLDER%"&&SET "$FILT=*.JPG"&&CALL:FILE_LIST&&SET "$FOLD=%CACHE_FOLDER%"&&SET "$FILT=*.PNG"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=WALL"&&CALL:BASIC_FILE&EXIT /B
IF DEFINED $PICK SET "PE_WALLPAPER=%$CHOICE%"
IF NOT DEFINED $PICK SET "PE_WALLPAPER=SELECT"
EXIT /B
:HOST_FOLDER
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                      Enter the host folder name&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=ALPHA"&&SET "VERBOSE=1"&&SET "NO_SPACE=1"&&SET "NO_ASTRK=1"&&SET "$CASE=ANY"&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF NOT DEFINED SELECTX SET "ERROR=HOST_FOLDER"&&CALL:DEBUG
IF DEFINED ERROR CALL:PAUSED
IF NOT DEFINED ERROR SET "HOST_FOLDER=%SELECTX%"
EXIT /B
:BASIC_CREATOR
@ECHO OFF&&SET "MOUNT="&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:GET_SPACE&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                    Image Processing / Boot Creator&&ECHO.
SET "SOURCE_LOCATION="&&FOR %%a in (A B C D E F G H I J K L N O P Q R S T U W Y Z) DO (IF EXIST "%%a:\sources\boot.wim" SET "SOURCE_LOCATION=%%a:\sources")
SET "BOOT_EXIST="&&IF EXIST "%BOOT_FOLDER%\BOOT.SAV" SET "BOOT_EXIST=1"
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_EXIST=1"
SET "WIM_EXIST="&&IF EXIST "%IMAGE_FOLDER%\*.WIM" SET "WIM_EXIST=1"
SET "VHDX_EXIST="&&IF EXIST "%IMAGE_FOLDER%\*.VHDX" SET "VHDX_EXIST=1"
SET "IMAGEPROC_GO="&&FOR %%a in (WIM_EXIST VHDX_EXIST) DO (IF DEFINED %%a SET "IMAGEPROC_GO=1")
SET "BOOTCREATE_GO="&&IF DEFINED BOOT_EXIST IF DEFINED VHDX_EXIST SET "BOOTCREATE_GO=1"
IF DEFINED SOURCE_LOCATION ECHO. (%##%-%$$%) Import Boot  %XLR5%Windows Installation Media Detected%$$%  Import WIM (%##%+%$$%)&&ECHO.
IF NOT DEFINED IMAGEPROC_GO ECHO.        %@@%Insert a Windows Disc/ISO to import installation media%$$%&&ECHO.
IF NOT DEFINED BOOT_EXIST ECHO.            %@@%Insert a Windows Disc/ISO to import boot media%$$%&&ECHO.
ECHO.  %@@%AVAILABLE WIMs/VHDXs:%$$%&&ECHO.
IF EXIST "%IMAGE_FOLDER%\*.WIM" SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&SET "$DISP=BAS"&&CALL:FILE_LIST
IF EXIST "%IMAGE_FOLDER%\*.VHDX" SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$DISP=BAS"&&CALL:FILE_LIST
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&TITLE Windows Deployment Image Customization Kit v%VER_CUR%  (%PROG_SOURCE%)
IF "%PROG_MODE%"=="RAMDISK" IF DEFINED IMAGEPROC_GO IF NOT DEFINED BOOTCREATE_GO ECHO.                               (%##%C%$$%)onvert&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" IF DEFINED IMAGEPROC_GO IF DEFINED BOOTCREATE_GO ECHO.                           (%##%C%$$%)onvert   (%##%G%$$%)o^^!&&CALL:PAD_LINE
IF "%PROG_MODE%"=="PORTABLE" IF DEFINED IMAGEPROC_GO IF NOT DEFINED BOOTCREATE_GO ECHO. (%##%Q%$$%)uit  (%##%*%$$%) Main Menu         (%##%C%$$%)onvert                   %@@%%FREE%GB%$$% Free&&CALL:PAD_LINE
IF "%PROG_MODE%"=="PORTABLE" IF DEFINED IMAGEPROC_GO IF DEFINED BOOTCREATE_GO ECHO. (%##%Q%$$%)uit  (%##%*%$$%) Main Menu     (%##%C%$$%)onvert   (%##%G%$$%)o^^!               %@@%%FREE%GB%$$% Free&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" CALL:PAD_PREV
CALL:MENU_SELECT
IF DEFINED HOST_ERROR IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF NOT DEFINED SELECT IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF "%SELECT%"=="Q" GOTO:QUIT
IF "%SELECT%"=="C" CALL:CONVERT_PROMPT&SET "SELECT="
IF "%SELECT%"=="+" IF DEFINED SOURCE_LOCATION CALL:SOURCE_IMPORT&SET "SELECT="
IF "%SELECT%"=="-" IF DEFINED SOURCE_LOCATION CALL:BOOT_IMPORT&SET "SELECT="
IF "%SELECT%"=="G" IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%BOOT_FOLDER%\boot.sav" CALL:BOOT_FETCH
IF "%SELECT%"=="G" IF EXIST "%BOOT_FOLDER%\boot.sav" CALL:CREATOR_PROMPT&SET "SELECT="
IF "%SELECT%"=="*" IF "%PROG_MODE%"=="PORTABLE" SET "MENU_MODE=NORMAL"&&GOTO:MAIN_MENU
GOTO:BASIC_CREATOR
:CREATOR_PROMPT
IF NOT EXIST "%BOOT_FOLDER%\boot.sav" CLS&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                       %XLR4%ERROR:%$$% Missing boot media&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAUSED&&EXIT /B
SET "$VHDX=X"&&CALL:VHDX_CHECK
IF DEFINED ERROR EXIT /B
IF NOT DEFINED VHDX_SLOTX SET "ERROR=CREATOR_PROMPT"&&CALL:DEBUG
IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_SLOTX%" SET "ERROR=CREATOR_PROMPT"&&CALL:DEBUG
IF DEFINED ERROR CLS&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                     %XLR4%ERROR:%$$% No virtual disk selected&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAUSED&&EXIT /B
SET "QUERY_MSG=                         %XLR4%Select a disk to erase%$$%"&&CALL:DISK_MENU
IF DEFINED ERROR EXIT /B
CALL:CONFIRM
IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED DISK_NUMBER CALL:BOOT_CREATOR_START
EXIT /B
:CONVERT_PROMPT
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %@@%AVAILABLE WIMs/VHDXs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&CALL:FILE_LIST&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=IMAGE"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
SET "CONVERT_EXT="&&FOR %%G in ("%$PICK%") DO (SET "CAPS_SET=CONVERT_EXT"&&SET "CAPS_VAR=%%~xG"&&CALL:CAPS_SET)
IF "%CONVERT_EXT%"==".WIM" GOTO:BASIC_RESTORE_X
IF "%CONVERT_EXT%"==".VHDX" GOTO:BASIC_BACKUP_X
EXIT /B
:BASIC_BACKUP
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=VHDX"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
:BASIC_BACKUP_X
SET "VHDX_SOURCE=%$BODY%%$EXT%"
SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"&&CALL:IMAGEPROC_TARGET
IF NOT DEFINED WIM_TARGET EXIT /B
IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" ECHO.&&ECHO. %XLR2%ERROR:%$$% File already exists.&&EXIT /B
SET "WIM_INDEX=1"&&CALL:IMAGEPROC_START
EXIT /B
:BASIC_RESTORE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %@@%AVAILABLE WIMs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=WIM"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
:BASIC_RESTORE_X
SET "WIM_SOURCE=%$BODY%%$EXT%"
CALL:WIM_INDEX_MENU
IF DEFINED ERROR EXIT /B
SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"&&CALL:IMAGEPROC_TARGET
IF NOT DEFINED VHDX_TARGET EXIT /B
IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" ECHO.&&ECHO. %XLR2%ERROR:%$$% File already exists.&&EXIT /B
CALL:IMAGEPROC_VSIZE
IF DEFINED ERROR EXIT /B
CALL:IMAGEPROC_START
EXIT /B
::#########################################################################
:IMAGE_PROCESSING
::#########################################################################
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&FOR %%a in (SOURCE TARGET) DO (IF NOT DEFINED %%a_TYPE SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX")
SET "SOURCE_LOCATION="&&FOR %%a in (A B C D E F G H I J K L N O P Q R S T U W Y Z) DO (IF EXIST "%%a:\sources\boot.wim" SET "SOURCE_LOCATION=%%a:\sources")
SET "PROC_DISPLAY="&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.
IF DEFINED SOURCE_LOCATION ECHO. (%##%-%$$%) Import Boot  %XLR5%Windows Installation Media Detected%$$%  Import WIM (%##%+%$$%)&&ECHO.
IF NOT EXIST "%IMAGE_FOLDER%\*.WIM" ECHO.        %@@%Insert a Windows Disc/ISO to import installation media%$$%&&ECHO.
IF NOT EXIST "%BOOT_FOLDER%\BOOT.SAV" ECHO.            %@@%Insert a Windows Disc/ISO to import boot media%$$%&&ECHO.
::IF "%SOURCE_TYPE%"=="WIM" IF NOT "%WIM_SOURCE%"=="SELECT" SET "IMAGE_X=%IMAGE_FOLDER%\%WIM_SOURCE%"&&SET "INDEX_X=%WIM_INDEX%"&&CALL:GET_IMAGEINFO&SET "ERROR="
IF "%SOURCE_TYPE%"=="WIM" IF "%WIM_SOURCE%"=="SELECT" SET "WIM_INDEX=1"&&SET "$IMGEDIT="
IF NOT DEFINED $IMGEDIT SET "$IMGEDIT=SELECT"&&SET "WIM_INDEX=1"
FOR %%G in (%SOURCE_TYPE% %TARGET_TYPE%) DO (IF "%%G"=="VHDX" SET "PROC_DISPLAY=1")
FOR %%G in (%SOURCE_TYPE% %TARGET_TYPE%) DO (IF "%%G"=="PATH" SET "PROC_DISPLAY=2")
IF "%PROC_DISPLAY%"=="1" ECHO.  %@@%AVAILABLE %@@%%SOURCE_TYPE%s%$$% (%##%X%$$%) %@@%%TARGET_TYPE%s%$$%:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$APPEND=1"&&SET "$DISP=BAS"&&CALL:FILE_LIST
IF "%PROC_DISPLAY%"=="2" ECHO.  %@@%AVAILABLE %@@%%SOURCE_TYPE%s%$$% (%##%X%$$%) %@@%%TARGET_TYPE%s%$$%:%$$%&&ECHO.&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO.   %%G:)
IF "%PROC_DISPLAY%"=="2" SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&SET "$DISP=BAS"&&CALL:FILE_LIST
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="PATH" ECHO. [%@@%PATH%$$%] (%##%S%$$%)ource %@@%%PATH_SOURCE%%$$%&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="VHDX" ECHO. [%@@%VHDX%$$%] (%##%S%$$%)ource %@@%%VHDX_SOURCE%%$$%&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="WIM" ECHO. [%@@%WIM%$$%] (%##%S%$$%)ource %@@%%WIM_SOURCE%%$$%   (%##%I%$$%)ndex %@@%%WIM_INDEX%%$$%   Edition: %@@%%$IMGEDIT%%$$%&&CALL:PAD_LINE
IF "%TARGET_TYPE%"=="VHDX" ECHO. [%@@%VHDX%$$%] (%##%T%$$%)arget %@@%%VHDX_TARGET%%$$%          (%##%G%$$%)o^^!      (%##%V%$$%)disk Size %@@%%VHDX_SIZE%GB%$$%&&CALL:PAD_LINE
IF "%TARGET_TYPE%"=="WIM" ECHO. [%@@%WIM%$$%] (%##%T%$$%)arget %@@%%WIM_TARGET%%$$%            (%##%G%$$%)o^^!&&CALL:PAD_LINE
IF "%TARGET_TYPE%"=="PATH" ECHO. [%@@%PATH%$$%] (%##%T%$$%)arget %@@%%PATH_TARGET%%$$%          (%##%G%$$%)o^^!&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="G" CALL:IMAGEPROC_START&SET "SELECT="
IF "%SELECT%"=="X" CALL:IMAGEPROC_SLOT&SET "SELECT="
IF "%SELECT%"=="T" CALL:IMAGEPROC_TARGET&SET "SELECT="
IF "%SELECT%"=="S" CALL:IMAGEPROC_SOURCE&SET "SELECT="
IF "%SELECT%"=="V" IF "%TARGET_TYPE%"=="VHDX" CALL:IMAGEPROC_VSIZE&SET "SELECT="
IF "%SELECT%"=="I" IF "%SOURCE_TYPE%"=="WIM" IF NOT "%WIM_SOURCE%"=="SELECT" CALL:WIM_INDEX_MENU
IF "%SELECT%"=="+" IF DEFINED SOURCE_LOCATION CALL:SOURCE_IMPORT&SET "SELECT="
IF "%SELECT%"=="-" IF DEFINED SOURCE_LOCATION CALL:BOOT_IMPORT&SET "SELECT="
GOTO:IMAGE_PROCESSING
:IMAGEPROC_START
SET "SOURCE_X="&&SET "TARGET_X="&&IF NOT "%PROG_MODE%"=="COMMAND" CLS
SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.         %@@%IMAGE PROCESSING START:%$$%  %DATE%  %TIME%
CALL SET "SOURCE_X=%%%SOURCE_TYPE%_SOURCE%%%"
CALL SET "TARGET_X=%%%TARGET_TYPE%_TARGET%%%"
FOR %%a in (SOURCE_X TARGET_X) DO (IF NOT DEFINED %%a SET "%%a=SELECT")
IF "%SOURCE_X%"=="SELECT" ECHO.&&ECHO.                          %XLR4%Source %SOURCE_TYPE% not set.%$$%&&GOTO:IMAGEPROC_END
IF "%TARGET_X%"=="SELECT" ECHO.&&ECHO.                          %XLR4%Target %TARGET_TYPE% not set.%$$%&&GOTO:IMAGEPROC_END
IF "%SOURCE_TYPE%"=="PATH" IF NOT EXIST "%PATH_SOURCE%\" ECHO.&&ECHO.                         %XLR4%Source %SOURCE_TYPE% doesn't exist.%$$%&&GOTO:IMAGEPROC_END
IF "%TARGET_TYPE%"=="PATH" IF NOT EXIST "%PATH_TARGET%\" ECHO.&&ECHO.                         %XLR4%Target %TARGET_TYPE% doesn't exist.%$$%&&GOTO:IMAGEPROC_END
IF "%TARGET_TYPE%"=="WIM" IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" ECHO.&&ECHO. %XLR4%Target %WIM_TARGET% exists. Try another name or delete the existing file.%$$%&&GOTO:IMAGEPROC_END
IF "%TARGET_TYPE%"=="VHDX" IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" ECHO.&&ECHO.                    File %@@%%VHDX_TARGET%%$$% already exists.&&ECHO.  %XLR2%Note:%$$% Updating may cause errors. Try a new vhdx if having issues.&&ECHO.&&ECHO.                        Press (%##%X%$$%) to overwrite.&&ECHO.&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF "%TARGET_TYPE%"=="VHDX" IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" IF NOT "%CONFIRM%"=="X" ECHO.&&ECHO. %##%Abort.%$$%&&GOTO:IMAGEPROC_END
IF NOT DEFINED WIM_INDEX SET "WIM_INDEX=1"
IF NOT DEFINED VHDX_SIZE SET "VHDX_SIZE=25"
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" CALL:WIM2VHDX
IF "%SOURCE_TYPE%"=="VHDX" IF "%TARGET_TYPE%"=="WIM" CALL:VHDX2WIM
IF "%SOURCE_TYPE%"=="PATH" IF "%TARGET_TYPE%"=="WIM" SET "PATH_X=%PATH_SOURCE%"&&CALL:GET_PATHINFO
IF "%SOURCE_TYPE%"=="PATH" IF "%TARGET_TYPE%"=="WIM" IF NOT DEFINED $PATHEDIT SET "$PATHEDIT=Index_1"
IF "%SOURCE_TYPE%"=="PATH" IF "%TARGET_TYPE%"=="WIM" DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%PATH_SOURCE%" /IMAGEFILE:"%IMAGE_FOLDER%\%WIM_TARGET%" /COMPRESS:%COMPRESS% /NAME:"%$PATHEDIT%"
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="PATH" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_FOLDER%\%WIM_SOURCE%" /INDEX:%WIM_INDEX% /APPLYDIR:"%PATH_TARGET%"
:IMAGEPROC_END
ECHO.&&ECHO.          %@@%IMAGE PROCESSING END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&IF NOT "%PROG_MODE%"=="COMMAND" CALL:PAUSED
EXIT /B
:WIM2VHDX
ECHO.&&IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE
IF NOT EXIST "%VDISK_LTR%:\" ECHO.&&ECHO.          %XLR4%Vdisk Error. If VHDX refuses mounting, try another.%$$%
IF EXIST "%VDISK_LTR%:\" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_FOLDER%\%WIM_SOURCE%" /INDEX:%WIM_INDEX% /APPLYDIR:"%VDISK_LTR%:"
ECHO.&&CALL:VDISK_DETACH
EXIT /B
:VHDX2WIM
ECHO.&&SET "VDISK=%IMAGE_FOLDER%\%VHDX_SOURCE%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT EXIST "%VDISK_LTR%:\" ECHO.&&ECHO.          %XLR4%Vdisk Error. If VHDX refuses mounting, try another.%$$%
IF EXIST "%VDISK_LTR%:\" SET "PATH_X=%VDISK_LTR%:"&&CALL:GET_PATHINFO
IF EXIST "%VDISK_LTR%:\" IF NOT DEFINED $PATHEDIT SET "$PATHEDIT=Index_1"
IF EXIST "%VDISK_LTR%:\" DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%VDISK_LTR%:" /IMAGEFILE:"%IMAGE_FOLDER%\%WIM_TARGET%" /COMPRESS:%COMPRESS% /NAME:"%$PATHEDIT%"
ECHO.&&CALL:VDISK_DETACH
EXIT /B
:BOOT_IMPORT
IF EXIST "%BOOT_FOLDER%\boot.sav" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.         File boot.sav already exists. Press (%##%X%$$%) to overwrite.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF EXIST "%BOOT_FOLDER%\boot.sav" IF NOT "%CONFIRM%"=="X" EXIT /B
IF EXIST "%SOURCE_LOCATION%\boot.wim" ECHO.Importing %@@%boot.wim%$$% to boot.sav...&&COPY /Y "%SOURCE_LOCATION%\boot.wim" "%BOOT_FOLDER%\boot.sav"
EXIT /B
:SOURCE_IMPORT
SET "WIM_EXT="&&FOR %%G in (wim esd) DO (IF EXIST "%SOURCE_LOCATION%\install.%%G" SET "WIM_EXT=%%G")
IF EXIST "%SOURCE_LOCATION%\install.%WIM_EXT%" ECHO.&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter name of new .WIM&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
IF EXIST "%IMAGE_FOLDER%\%NEW_NAME%.wim" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.         File %NEW_NAME%.wim already exists. Press (%##%X%$$%) to overwrite.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF EXIST "%IMAGE_FOLDER%\%NEW_NAME%.wim" IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED NEW_NAME ECHO.Copying install.%WIM_EXT% to %@@%%NEW_NAME%.wim%$$%...&&COPY /Y "%SOURCE_LOCATION%\install.%WIM_EXT%" "%IMAGE_FOLDER%\%NEW_NAME%.wim"&&SET "NEW_NAME="
EXIT /B
:IMAGEPROC_VSIZE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                       Enter new VHDX size in GB&&ECHO.                 Note: 25GB or greater is recommended&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "VERBOSE=1"&&SET "$CHECK=NUM"&&SET "$SELECT=SELECTX"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF DEFINED ERROR CALL:PAUSED&EXIT /B
IF NOT DEFINED SELECTX SET "ERROR=IMAGEPROC_VSIZE"&&EXIT /B
IF %SELECTX% LSS 1 SET "ERROR=IMAGEPROC_VSIZE"
IF %SELECTX% GTR 9999 SET "ERROR=IMAGEPROC_VSIZE"
IF NOT DEFINED ERROR IF %SELECTX% LSS 25 CALL:CONFIRM
IF NOT DEFINED ERROR IF %SELECTX% LSS 25 IF NOT "%CONFIRM%"=="X" SET "ERROR=IMAGEPROC_VSIZE"
IF NOT DEFINED ERROR SET "VHDX_SIZE=%SELECTX%"
EXIT /B
:IMAGEPROC_TARGET
IF "%TARGET_TYPE%"=="PATH" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                         Enter the target PATH &&ECHO.&&ECHO.  %@@%AVAILABLE PATHs:%$$%&&ECHO.&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO. ^( %##%%%G%$$% ^) Volume %%G:)
IF "%TARGET_TYPE%"=="PATH" ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=MOST"&&SET "$SELECT=PATH_LETTER"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF "%TARGET_TYPE%"=="PATH" IF DEFINED PATH_LETTER FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%PATH_LETTER%"=="%%G" IF EXIST "%%G:\" SET "PATH_TARGET=%PATH_LETTER%:"&&EXIT /B)
IF "%TARGET_TYPE%"=="PATH" IF DEFINED PATH_LETTER SET "INPUT=%PATH_LETTER%"&&SET "OUTPUT=PATH_TARGET"&&CALL:SLASH
IF "%TARGET_TYPE%"=="PATH" IF NOT DEFINED PATH_LETTER SET "PATH_TARGET="
IF NOT "%TARGET_TYPE%"=="PATH" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter name of new .%TARGET_TYPE%&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT "%TARGET_TYPE%"=="PATH" IF NOT DEFINED SELECTX SET "%TARGET_TYPE%_TARGET="
IF "%TARGET_TYPE%"=="WIM" IF DEFINED SELECTX SET "WIM_TARGET=%SELECTX%.wim"
IF "%TARGET_TYPE%"=="VHDX" IF DEFINED SELECTX SET "VHDX_TARGET=%SELECTX%.vhdx"
EXIT /B
:IMAGEPROC_SOURCE
IF "%SOURCE_TYPE%"=="PATH" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                         Enter the source PATH &&ECHO.&&ECHO.  %@@%AVAILABLE PATHs:%$$%&&ECHO.&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO. ^( %##%%%G%$$% ^) Volume %%G:)
IF "%SOURCE_TYPE%"=="PATH" ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=MOST"&&SET "$SELECT=PATH_LETTER"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF "%SOURCE_TYPE%"=="PATH" FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%PATH_LETTER%"=="%%G" IF EXIST "%%G:\" SET "PATH_SOURCE=%PATH_LETTER%:"&&EXIT /B)
IF "%SOURCE_TYPE%"=="PATH" IF DEFINED PATH_LETTER SET "INPUT=%PATH_LETTER%"&&SET "OUTPUT=PATH_SOURCE"&&CALL:SLASH
IF "%SOURCE_TYPE%"=="PATH" IF NOT DEFINED PATH_LETTER SET "PATH_SOURCE="
IF NOT "%SOURCE_TYPE%"=="PATH" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %@@%AVAILABLE %SOURCE_TYPE%s:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.%SOURCE_TYPE%"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%SOURCE_TYPE%"=="PATH" IF "%SELECT%"=="." SET "FILE_TYPE=%SOURCE_TYPE%"&&CALL:BASIC_FILE&EXIT /B
IF NOT "%SOURCE_TYPE%"=="PATH" CALL SET "%SOURCE_TYPE%_SOURCE=%$CHOICE%"
EXIT /B
:WIM_INDEX_MENU
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %@@%AVAILABLE INDEXs:%$$%&&ECHO.
SET "INDEX_DSP="&&SET "NAME_DSP="&&FOR /F "TOKENS=1-7 SKIP=5 DELIMS=:<> " %%a in ('DISM /ENGLISH /GET-IMAGEINFO /IMAGEFILE:"%IMAGE_FOLDER%\%WIM_SOURCE%" 2^>NUL') DO (
IF "%%a"=="Index" SET "INDEX_DSP=%%b"
IF "%%a"=="Name" SET "NAME_DSP=%%b %%c %%d %%e %%f %%g"&&CALL:WIM_INDEX_LIST)
IF NOT DEFINED INDEX_DSP ECHO.%XLR2%ERROR%$$%&&SET "ERROR=WIM_INDEX_MENU"&&CALL:DEBUG&&EXIT /B
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "ERROR=WIM_INDEX_MENU"&&CALL:DEBUG&&EXIT /B
SET "IMAGE_X=%IMAGE_FOLDER%\%WIM_SOURCE%"&&SET "INDEX_X=%SELECT%"&&CALL:GET_IMAGEINFO
SET "WIM_INDEX=%SELECT%"&&IF DEFINED ERROR SET "WIM_INDEX=1"&&ECHO.%XLR2%ERROR%$$%
EXIT /B
:WIM_INDEX_LIST
ECHO. ( %##%%INDEX_DSP%%$$% ) %NAME_DSP%
EXIT /B
:IMAGEPROC_SLOT
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="PATH" SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"&&EXIT /B
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"&&EXIT /B
IF "%SOURCE_TYPE%"=="VHDX" IF "%TARGET_TYPE%"=="WIM" SET "SOURCE_TYPE=PATH"&&SET "TARGET_TYPE=WIM"&&EXIT /B
IF "%SOURCE_TYPE%"=="PATH" IF "%TARGET_TYPE%"=="WIM" SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=PATH"&&EXIT /B
EXIT /B
::#########################################################################
:IMAGE_MANAGER
::#########################################################################
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Image Management&&ECHO.
IF NOT DEFINED SAFE_EXCLUDE SET "SAFE_EXCLUDE=ENABLED"
ECHO.  %@@%AVAILABLE PKXs/LISTs:%$$%&&ECHO.&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.PKX"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&SET "$APPEND=1"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&ECHO. [%@@%LIST%$$%]    (%##%N%$$%)ew      (%##%E%$$%)dit     (%##%G%$$%)o^^!                    (%##%O%$$%)ptions&&CALL:PAD_LINE
IF DEFINED ADV_IMGM ECHO. [%@@%OPTIONS%$$%] (%##%S%$$%)afe Exclude %@@%%SAFE_EXCLUDE%%$$%&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="G" CALL:IMAGEMGR_RUN&SET "SELECT="
IF "%SELECT%"=="N" CALL:IMAGEMGR_BUILDER&SET "SELECT="
IF "%SELECT%"=="O" IF DEFINED ADV_IMGM SET "ADV_IMGM="&SET "SELECT="
IF "%SELECT%"=="O" IF NOT DEFINED ADV_IMGM SET "ADV_IMGM=1"&SET "SELECT="
IF "%SELECT%"=="E" CALL:LIST_EDIT&&SET "SELECT="
IF "%SELECT%"=="S" IF "%SAFE_EXCLUDE%"=="DISABLED" SET "SAFE_EXCLUDE=ENABLED"&SET "SELECT="
IF "%SELECT%"=="S" IF "%SAFE_EXCLUDE%"=="ENABLED" SET "SAFE_EXCLUDE=DISABLED"&SET "SELECT="
GOTO:IMAGE_MANAGER
:IMAGEMGR_RUN
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Execute&&ECHO.&&ECHO.  %@@%AVAILABLE PKXs/LISTs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.PKX"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=PKXLIST"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $CHOICE EXIT /B
SET "IMAGEMGR_EXT="&&FOR %%G in ("%$CHOICE%") DO (SET "CAPS_SET=IMAGEMGR_EXT"&&SET "CAPS_VAR=%%~xG"&&CALL:CAPS_SET)
IF "%IMAGEMGR_EXT%"==".PKX" SET "PKX_PACK=%PACK_FOLDER%\%$CHOICE%
IF "%IMAGEMGR_EXT%"==".LIST" SET "$RUN=%LIST_FOLDER%\%$CHOICE%"&&SET "HEAD_EXT=LIST"&&SET "HEAD_CHECK=%LIST_FOLDER%\%$CHOICE%"&&CALL:GET_HEADER
IF "%IMAGEMGR_EXT%"==".LIST" IF "%$HEAD%"=="MULTI-LIST" SET "LIST_TYPE_TMP=LIST"&&SET "MENUT0=                             List Execute"&&SET "MENUT1= "&&CALL:LIST_GROUP_VIEW&EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Execute&&ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%@%$$% ) %##%Current Environment%$$%&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX "&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="@" IF "%ALLOW_ENV%"=="ENABLED" SET "LIVE_APPLY=1"
IF "%SELECT%"=="@" IF NOT "%ALLOW_ENV%"=="ENABLED" ECHO.&&ECHO. %XLR4%ERROR:%$$% Enable the current environment as a target in settings.&&ECHO.&&CALL:PAUSED&EXIT /B
IF DEFINED LIVE_APPLY IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER
IF DEFINED LIVE_APPLY IF NOT DEFINED DISCLAIMER EXIT /B
IF NOT DEFINED LIVE_APPLY IF NOT DEFINED $PICK EXIT /B
SET "VDISK=%$PICK%"
IF "%IMAGEMGR_EXT%"==".PKX" SET "CURR_SESSION=PACK"&&SET "PKX_SESSION=1"&&SET "VDISK_FLAG=1"&&CALL:PKX_RUN
IF "%IMAGEMGR_EXT%"==".LIST" SET "CURR_SESSION=EXEC"&&SET "LST_SESSION=1"&&SET "VDISK_FLAG=1"&&CALL:LIST_RUN
SET "CURR_SESSION="&&SET "LST_SESSION="&&SET "PKX_SESSION="
EXIT /B
:LIST_EDIT
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              Edit List&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs/BASEs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=LISTS"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
START NOTEPAD "%$PICK%"
EXIT /B
:LIST_RUN
IF NOT DEFINED $RUN EXIT /B
FOR %%G in ("%$RUN%") DO SET "LIST_NAME=%%~nG%%~xG"
IF "%LIST_NAME%"=="$LST2" SET "LIST_NAME=multi.list"
IF DEFINED LST_SESSION IF DEFINED PKX_SESSION SET "DUAL_SESSION=1"
IF NOT "%PROG_MODE%"=="COMMAND" IF NOT DEFINED DUAL_SESSION CLS
IF NOT DEFINED LIST_ITEMS1 CALL:LIST_ITEMS
IF NOT DEFINED SAFE_EXCLUDE SET "SAFE_EXCLUDE=ENABLED"
SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.             %@@%%CURR_SESSION%-LIST START:%$$%  %DATE%  %TIME%&&ECHO.
SET "HEAD_EXT=LIST"&&SET "HEAD_CHECK=%$RUN%"&&CALL:GET_HEADER
IF NOT "%$HEAD%"=="EXEC-LIST" ECHO.&&ECHO. %XLR2%ERROR:%$$% Bad file header, not an execution list.&&ECHO.&&GOTO:LIST_RUN_END
IF DEFINED ERROR CALL:PAUSED&GOTO:LIST_RUN_END
COPY /Y "%$RUN%" "$RUN">NUL 2>&1
IF DEFINED DUAL_SESSION IF DEFINED VDISK_ATTACHED GOTO:LIST_RUN_JUMP
IF "%CURR_SESSION%"=="MULTI" GOTO:LIST_RUN_JUMP
IF DEFINED LIVE_APPLY ECHO. Using live system as target.
IF DEFINED VDISK_FLAG SET "VDISK_LTR=ANY"&CALL:MOUNT_INT&CALL:VDISK_ATTACH
IF NOT DEFINED LIVE_APPLY IF NOT EXIST "%VDISK_LTR%:\" ECHO.&&ECHO.           %XLR4%Vdisk error or Windows is not installed on Vdisk.%$$%&&ECHO.&&GOTO:LIST_RUN_CLEANUP
:LIST_RUN_JUMP
CALL:VAR_CLEAR&CALL:RAS_DELETE
FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%a in ($RUN) DO (FOR %%$ in (%LIST_ITEMS1% %LIST_ITEMS2%) DO (FOR %%X in (DRIVER COMMAND COMMANDQ) DO (IF "%%X"=="%%$" IF "%%$"=="%%a" CALL:MOUNT_CLEAR)
IF "%%$"=="%%a" CALL SET "LIST_ITEM=%%a"&&CALL SET "BASE_MEAT=%%b"&&CALL SET "LIST_ACTN=%%c"&&CALL SET "LIST_TIME=%%d"&&CALL SET "LIST_CLM5=%%e"&&CALL:UNIFIED_PARSE))
CALL:VAR_CLEAR&CALL:RAS_DELETE
:LIST_RUN_CLEANUP
IF "%CURR_SESSION%"=="PACK" IF DEFINED DUAL_SESSION IF DEFINED VDISK_FLAG GOTO:LIST_RUN_END
IF "%CURR_SESSION%"=="MULTI" IF NOT DEFINED DUAL_SESSION IF DEFINED MLT_SESSION IF NOT DEFINED PKX_SESSION CALL:MOUNT_INT&IF "%VDISK_ATTACHED%"=="1" CALL:VDISK_DETACH
IF DEFINED VDISK_FLAG CALL:MOUNT_INT&CALL:VDISK_DETACH
:LIST_RUN_END
IF NOT DEFINED DUAL_SESSION FOR %%a in (DRVR_QRY FEAT_QRY SC_PREPARE RO_PREPARE) DO (SET "%%a=")
ECHO.&&ECHO.             %@@%%CURR_SESSION%-LIST END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP
IF NOT DEFINED PKX_SESSION CALL:CLEAN
IF NOT DEFINED DUAL_SESSION CALL:MOUNT_INT&&IF NOT "%PROG_MODE%"=="COMMAND" CALL:PAUSED
FOR %%a in (DUAL_SESSION LIST_ITEMS1 LIST_ITEMS2 $RUN LIST_ITEM LIST_TIME LIST_ACTN BASE_MEAT LIST_CLM5) DO (SET "%%a=")
EXIT /B
:UNIFIED_PARSE
SET "$RAS="&&FOR %%a in (COMMAND COMMANDQ DRIVER) DO (IF "%%a"=="%LIST_ITEM%" CALL:MOUNT_REST)
IF DEFINED $HALT IF NOT DEFINED $HALTX SET "$HALTX=1"&&ECHO. %XLR2%ERROR:%$$% HALTED.
IF DEFINED $HALT EXIT /B
FOR %%a in (LIST_ITEM BASE_MEAT LIST_ACTN) DO (IF NOT DEFINED %%a EXIT /B)
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%LIST_ITEM%"=="PROMPT%%a" SET "VAR%%a=%LIST_ACTN%"&&EXIT /B)
IF "%LIST_ITEM%:%LIST_TIME%"=="COMMAND:IA" CALL:COMMAND_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="COMMANDQ:IA" CALL:COMMAND_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="APPX:IA" CALL:APPX_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="CAPABILITY:IA" CALL:CAP_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="COMPONENT:IA" CALL:COMP_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="DRIVER:IA" CALL:DRVR_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="FEATURE:IA" CALL:FEAT_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="SERVICE:IA" CALL:SVC_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="TASK:IA" CALL:TASK_ITEM
IF "%LIST_ITEM%:%LIST_TIME%"=="WINSXS:IA" CALL:WINSXS_REMOVE
IF "%LIST_ITEM%:%LIST_TIME%"=="EXTPACKAGE:IA" CALL SET "EXTPACKAGE=%PACK_FOLDER%\%BASE_MEAT%"&&CALL:PACK_ITEM
IF "%LIST_ITEM%"=="PICK" IF "%CURR_SESSION%"=="MULTI" CALL:PICK_ITEM
IF "%LIST_ITEM%"=="MOUNT" IF "%CURR_SESSION%"=="MULTI" CALL:MOUNT_ITEM
IF "%LIST_ITEM%"=="UNMOUNT" IF "%CURR_SESSION%"=="MULTI" CALL:UNMOUNT_ITEM
IF "%LIST_ITEM%"=="CONFIRM" IF "%CURR_SESSION%"=="MULTI" CALL:CONFIRM_ITEM
FOR %%a in (SC RO) DO (IF "%%a"=="%LIST_TIME%" CALL:SC_RO_CREATE)
IF EXIST "$*" CALL:CLEAN
EXIT /B
:PICK_ITEM
ECHO.&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.%BASE_MEAT%
FOR /F "TOKENS=1-1* DELIMS=*" %%a IN ("%LIST_TIME%") DO (SET "$FOLD=%%a"&&SET "$FILT=*%%b")
IF DEFINED $FOLD SET "INPUT=%$FOLD%"&&SET "OUTPUT=$FOLD"&&CALL:SLASH
ECHO.&&ECHO.  %@@%AVAILABLE %$FILT%s:%$$%&&ECHO.
CALL:FILE_LIST&&ECHO.&&ECHO.%LIST_ACTN%
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED $PICK SET "$HALT=1"
EXIT /B
:CONFIRM_ITEM
ECHO.&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.%BASE_MEAT%&&ECHO.                  %XLR4%Are you sure?%$$% Press (%##%X%$$%) to proceed&&ECHO.%LIST_ACTN%
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF NOT "%CONFIRM%"=="X" SET "$HALT=1"
EXIT /B
:RASTI_CREATE
IF NOT "%WINPE_BOOT%"=="1" SET "SRV_X="&&FOR /F "TOKENS=1-2* DELIMS= " %%a in ('REG QUERY "HKLM\SYSTEM\ControlSet001\Services\$RAS" /V ImagePath 2^>NUL') DO (IF "%%a"=="ImagePath" SET "SRV_X=1"&&IF NOT "%%c"=="CMD /C START %PROG_FOLDER%\$RAS.cmd" reg.exe add "HKLM\SYSTEM\ControlSet001\Services\$RAS" /v "ImagePath" /t REG_EXPAND_SZ /d "CMD /C START %PROG_FOLDER%\$RAS.cmd" /f)
IF NOT "%WINPE_BOOT%"=="1" IF NOT DEFINED SRV_X SC CREATE $RAS BINPATH="CMD /C START "%PROG_FOLDER%\$RAS.cmd"" START=DEMAND>NUL 2>&1
IF "%$RAS%"=="RATI" ECHO.reg.exe add "HKLM\SYSTEM\ControlSet001\Services\TrustedInstaller" /v "ImagePath" /t REG_EXPAND_SZ /d "CMD /C START %PROG_FOLDER%\$RATI.cmd" /f^>NUL 2^>^&^1>"%PROG_FOLDER%\$RAS.cmd"
IF "%$RAS%"=="RATI" ECHO.NET STOP TrustedInstaller^>NUL 2^>^&^1>>"%PROG_FOLDER%\$RAS.cmd"
IF "%$RAS%"=="RATI" ECHO.NET START TrustedInstaller^>NUL 2^>^&^1>>"%PROG_FOLDER%\$RAS.cmd"
IF "%$RAS%"=="RATI" ECHO.NET STOP TrustedInstaller^>NUL 2^>^&^1>>"%PROG_FOLDER%\$RAS.cmd"
IF "%$RAS%"=="RATI" ECHO.reg.exe add "HKLM\SYSTEM\ControlSet001\Services\TrustedInstaller" /v "ImagePath" /t REG_EXPAND_SZ /d "%%%%SystemRoot%%%%\servicing\TrustedInstaller.exe" /f^>NUL 2^>^&^1>>"%PROG_FOLDER%\$RAS.cmd"
IF "%$RAS%"=="RATI" ECHO.DEL /Q /F "%PROG_FOLDER%\$RAS.cmd"^>NUL^&EXIT>>"%PROG_FOLDER%\$RAS.cmd"
ECHO.@ECHO OFF^&CD /D "%PROG_FOLDER%">"%PROG_FOLDER%\$%$RAS%.cmd"
ECHO.CALL:ROUTINE^>"%PROG_FOLDER%\$LOG">>"%PROG_FOLDER%\$%$RAS%.cmd"
ECHO.DEL /Q /F "%PROG_FOLDER%\$%$RAS%.cmd"^>NUL^&EXIT>>"%PROG_FOLDER%\$%$RAS%.cmd"
ECHO.:ROUTINE>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%"=="COMMAND" CALL ECHO.CALL CMD.EXE /C %BASE_MEAT%>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%"=="COMMANDQ" CALL ECHO.CALL CMD.EXE /C %BASE_MEAT%>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%:%LIST_ACTN%"=="SERVICE:DELETE" CALL ECHO.REG DELETE "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%:%LIST_ACTN%"=="SERVICE:AUTO" CALL ECHO.REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "2" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%:%LIST_ACTN%"=="SERVICE:MANUAL" CALL ECHO.REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "3" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%:%LIST_ACTN%"=="SERVICE:DISABLE" CALL ECHO.REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "4" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%"=="TASK" CALL ECHO.REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%BASE_MEAT%" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%"=="TASK" CALL ECHO.REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{%TASKID%}" /F^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF "%LIST_ITEM%"=="TASK" CALL ECHO.DEL /Q /F "%WINTAR%\System32\Tasks\%BASE_MEAT%"^>NUL 2^>^&^1>>"%PROG_FOLDER%\$%$RAS%.cmd"
SET "XNT="&&ECHO.EXIT /B>>"%PROG_FOLDER%\$%$RAS%.cmd"
IF NOT "%WINPE_BOOT%"=="1" NET START $RAS>NUL 2>&1
IF "%WINPE_BOOT%"=="1" IF "%$RAS%"=="RAS" CALL CMD.EXE /C "%PROG_FOLDER%\$RAS.cmd"
IF "%WINPE_BOOT%"=="1" IF "%$RAS%"=="RATI" CALL CMD.EXE /C "%PROG_FOLDER%\$RAS.cmd">NUL 2>&1
:$RASTI_WAIT
SET /A "XNT+=1"&&FOR %%$ in (SERVICE TASK) DO (IF "%LIST_ITEM%"=="%%$" FOR %%a in (RAS RATI) DO (
IF EXIST "%PROG_FOLDER%\$%%a.cmd" CALL:TIMER_POINT3
IF EXIST "%PROG_FOLDER%\$%%a.cmd" IF "%XNT%"=="10" IF NOT DEFINED RETRY SET "RETRY=1"&&GOTO:RASTI_CREATE
IF EXIST "%PROG_FOLDER%\$%%a.cmd" IF "%XNT%"=="10" IF DEFINED RETRY CALL:RASTI_CHECK&DEL /Q /F "%PROG_FOLDER%\$%%a.cmd">NUL 2>&1))
FOR %%a in (RAS RATI) DO (IF EXIST "%PROG_FOLDER%\$%%a.cmd" GOTO:$RASTI_WAIT)
IF EXIST "%PROG_FOLDER%\$LOG" IF NOT "%LIST_ITEM%"=="SERVICE" IF NOT "%LIST_ITEM%"=="TASK" FOR /F "TOKENS=* DELIMS=" %%a in (%PROG_FOLDER%\$LOG) DO (ECHO.%%a)
IF EXIST "%PROG_FOLDER%\$LOG" DEL /Q /F "%PROG_FOLDER%\$LOG">NUL 2>&1
SET "RETRY="&&SET "XNT="&&EXIT /B
:RASTI_CHECK
SET "$GO="&&FOR /F "TOKENS=1-3* DELIMS= " %%a in ('REG QUERY "HKLM\SYSTEM\ControlSet001\Services\TrustedInstaller" /V ImagePath 2^>NUL') DO (IF "%%a"=="ImagePath" IF "%%c"=="CMD" SET "$GO=1")
IF NOT DEFINED $GO EXIT /B
IF NOT "%WINPE_BOOT%"=="1" SET "SRV_X="&&FOR /F "TOKENS=1-2* DELIMS= " %%a in ('REG QUERY "HKLM\SYSTEM\ControlSet001\Services\$RAS" /V ImagePath 2^>NUL') DO (IF "%%a"=="ImagePath" SET "SRV_X=1"&&IF NOT "%%c"=="CMD /C START %PROG_FOLDER%\$RAS.cmd" reg.exe add "HKLM\SYSTEM\ControlSet001\Services\$RAS" /v "ImagePath" /t REG_EXPAND_SZ /d "CMD /C START %PROG_FOLDER%\$RAS.cmd" /f)
IF NOT "%WINPE_BOOT%"=="1" IF NOT DEFINED SRV_X SC CREATE $RAS BINPATH="CMD /C START "%PROG_FOLDER%\$RAS.cmd"" START=DEMAND>NUL 2>&1
ECHO.NET STOP TrustedInstaller^>NUL 2^>^&^1>"%PROG_FOLDER%\$RAS.cmd"
ECHO.reg.exe add "HKLM\SYSTEM\ControlSet001\Services\TrustedInstaller" /v "ImagePath" /t REG_EXPAND_SZ /d "%%%%SystemRoot%%%%\servicing\TrustedInstaller.exe" /f^>NUL 2^>^&^1>>"%PROG_FOLDER%\$RAS.cmd"
ECHO.DEL /Q /F "%PROG_FOLDER%\$RAS.cmd"^>NUL^&EXIT>>"%PROG_FOLDER%\$RAS.cmd"
IF NOT "%WINPE_BOOT%"=="1" NET START $RAS>NUL 2>&1
IF "%WINPE_BOOT%"=="1" CALL CMD.EXE /C "%PROG_FOLDER%\$RAS.cmd"
EXIT /B
:RAS_DELETE
IF "%WINPE_BOOT%"=="1" EXIT /B
FOR /F "TOKENS=1 DELIMS= " %%a IN ('REG QUERY "HKLM\SYSTEM\ControlSet001\SERVICES\$RAS" /V ImagePath 2^>NUL') DO (IF "%%a"=="ImagePath" SC DELETE $RAS>NUL 2>&1)
EXIT /B
:UNMOUNT_ITEM
IF NOT DEFINED VDISK_ATTACHED EXIT /B
IF DEFINED LIVE_APPLY SET "VDISK_ATTACHED="&&EXIT /B
CALL:MOUNT_INT&CALL:VDISK_DETACH
IF EXIST "%VDISK_LTR%:\" SET "$HALT=1"
IF NOT EXIST "%VDISK_LTR%:\" SET "LIVE_APPLY=1"&&SET "VDISK_ATTACHED="&&ECHO. Using current environment.
EXIT /B
:MOUNT_ITEM
IF DEFINED VDISK_ATTACHED EXIT /B
ECHO.&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.%BASE_MEAT%
ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%@%$$% ) %##%Current Environment%$$%&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&ECHO.%LIST_ACTN%
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&&ECHO.&&SET "LIVE_APPLY="
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"
IF NOT DEFINED $PICK IF DEFINED LIVE_APPLY SET "VDISK_ATTACHED=SKIP"&&ECHO. Using current environment.&&EXIT /B
IF NOT DEFINED $PICK IF NOT DEFINED LIVE_APPLY SET "$HALT=1"&&EXIT /B
IF DEFINED $PICK SET "VDISK=%$PICK%"&&SET "VDISK_LTR=ANY"&&CALL:MOUNT_INT&CALL:VDISK_ATTACH
IF DEFINED $PICK IF EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED=1"
IF DEFINED $PICK IF NOT EXIST "%VDISK_LTR%:\" SET "$HALT=1"
EXIT /B
:COMMAND_ITEM
IF NOT "%LIST_ACTN%"=="CMD" IF NOT "%LIST_ACTN%"=="REG" IF NOT "%LIST_ACTN%"=="REG_RAS" IF NOT "%LIST_ACTN%"=="REG_RATI" IF NOT "%LIST_ACTN%"=="CMD_RAS" IF NOT "%LIST_ACTN%"=="CMD_RATI" ECHO. %XLR4%ERROR:%$$% Command list action is not CMD, REG, CMD_RAS, CMD_RATI, REG_RAS, or REG_RATI.&&EXIT /B
SET "RUN_AS="&&FOR /F "TOKENS=1-2 DELIMS=_" %%a IN ("%LIST_ACTN%") DO (SET "LIST_ACTN=%%a"&&SET "$RAS=%%b")
IF "%LIST_ACTN%"=="CMD" CALL:IF_LIVE_MIX
IF "%LIST_ACTN%"=="REG" CALL:IF_LIVE_EXT
IF NOT DEFINED $RAS SET "RUN_AS=user"
IF "%$RAS%"=="RAS" SET "RUN_AS=system"
IF "%$RAS%"=="RATI" SET "RUN_AS=trustedinstaller"
IF "%LIST_ITEM%"=="COMMAND" FOR /F "TOKENS=*" %%a in ("%BASE_MEAT%") DO (CALL ECHO.Executing command as %##%%RUN_AS% %@@%%%a%$$%...)
IF "%LIST_ACTN%"=="CMD" SET "MOUNT_SAVE=%MOUNT%"&&SET "MOUNT="&&FOR %%a in (HIVE_SOFTWARE HIVE_SYSTEM HIVE_USER) DO (CALL SET "%%a_X=%%%%a%%"&&CALL SET "%%a=%XLR4%ERROR:%$$% Non-registry command")
::CALL SET "BASE_MEAT=%BASE_MEAT%"
IF NOT DEFINED $RAS CALL CMD.EXE /C %BASE_MEAT%
IF DEFINED $RAS CALL:RASTI_CREATE
IF "%LIST_ACTN%"=="CMD" SET "MOUNT=%MOUNT_SAVE%"&&SET "MOUNT_SAVE="&&SET "HIVE_SOFTWARE=%HIVE_SOFTWARE_X%"&&SET "HIVE_SYSTEM=%HIVE_SYSTEM_X%"&&SET "HIVE_USER=%HIVE_USER_X%"&&FOR %%a in (HIVE_SOFTWARE HIVE_SYSTEM HIVE_USER) DO (SET "%%a_X=")
IF NOT DEFINED PKX_SESSION CD /D "%PROG_FOLDER%">NUL
IF DEFINED PKX_SESSION CD /D "%PKX_FOLDER%">NUL
EXIT /B
:PACK_ITEM
SET "PACKEXT="&&IF NOT "%LIST_ACTN%"=="INSTALL" ECHO. %XLR4%ERROR:%$$% External package list action is not INSTALL.&&EXIT /B
IF NOT EXIST "%EXTPACKAGE%" ECHO. %XLR4%%EXTPACKAGE% doesn't exist.%$$%&&EXIT /B
SET "PACK_GOOD=The operation completed successfully"&&SET "PACK_BAD=The operation did not complete successfully"
FOR %%G in ("%EXTPACKAGE%") DO SET "PACKFULL=%%~nG%%~xG"&&SET "PACKEXT=%%~xG"
FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PACKEXT=%%PACKEXT:%%G=%%G%%")
IF "%PACKEXT%"==".PKX" IF EXIST "%PROG_SOURCE%\scratchPKX" ECHO. %XLR4%ERROR:%$$% %PACKFULL% - %PKX_NAME% is already in session. Abort.&&EXIT /B
IF "%PACKEXT%"==".PKX" IF DEFINED PKX_SESSION ECHO. %XLR4%ERROR:%$$% %PACKFULL% - %PKX_NAME% is already in session. Abort.&&EXIT /B
IF "%PACKEXT%"==".PKX" SET "PKX_SESSION=1"&&SET "PKX_PACK=%EXTPACKAGE%"&&GOTO:PKX_RUN
FOR %%G in (APPXBUNDLE MSIXBUNDLE) DO (IF "%PACKEXT%"==".%%G" SET "PACKEXT=.APPX")
ECHO.Installing %@@%%PACKFULL%%$$%...&&CALL:IF_LIVE_MIX
IF "%PACKEXT%"==".APPX" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /ADD-PROVISIONEDAPPXPACKAGE /PACKAGEPATH:"%EXTPACKAGE%" 2^>NUL') DO (IF "%%1"=="%PACK_GOOD%" ECHO. %XLR5%%PACK_GOOD%.%$$%&&EXIT /B)
IF "%PACKEXT%"==".APPX" FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /ADD-PROVISIONEDAPPXPACKAGE /PACKAGEPATH:"%EXTPACKAGE%" /SKIPLICENSE 2^>NUL') DO (IF "%%1"=="%PACK_GOOD%" ECHO. %XLR5%%PACK_GOOD%.%$$%&&EXIT /B)
IF "%PACKEXT%"==".APPX" ECHO. %XLR2%%PACK_BAD%.%$$%&&EXIT /B
IF "%PACKEXT%"==".CAB" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /ADD-PACKAGE /PACKAGEPATH:"%EXTPACKAGE%" 2^>NUL') DO (IF "%%1"=="%PACK_GOOD%" ECHO. %XLR5%%PACK_GOOD%.%$$%&&EXIT /B)
IF "%PACKEXT%"==".CAB" GOTO:CAB_RUN
IF "%PACKEXT%"==".MSU" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /ADD-PACKAGE /PACKAGEPATH:"%EXTPACKAGE%" 2^>NUL') DO (IF "%%1"=="%PACK_GOOD%" ECHO. %XLR5%%PACK_GOOD%.%$$%&&EXIT /B)
IF "%PACKEXT%"==".MSU" ECHO. %XLR2%%PACK_BAD%.%$$%&&EXIT /B
EXIT /B
:CAB_RUN
SET "CAB_FOLDER=%PROG_SOURCE%\scratchCAB"
IF EXIST "%CAB_FOLDER%" SET "FOLDER_DEL=%CAB_FOLDER%"&&CALL:FOLDER_DEL
ECHO.Extracting %@@%%PACKFULL%%$$%... &&MD "%CAB_FOLDER%">NUL 2>&1
EXPAND "%EXTPACKAGE%" -F:* "%CAB_FOLDER%">NUL 2>&1
SET "BASE_MEAT=%CAB_FOLDER%"&&CALL:DRVR_INSTALL
IF EXIST "%CAB_FOLDER%" SET "FOLDER_DEL=%CAB_FOLDER%"&&CALL:FOLDER_DEL
SET "CAB_FOLDER="&&EXIT /B
:PKX_RUN
SET "PKX_FOLDER=%PROG_SOURCE%\scratchPKX"&&MD "%PROG_SOURCE%\scratchPKX">NUL 2>&1
FOR %%G in ("%PKX_PACK%") DO (SET "PKX_NAME=%%~nG%%~xG")
ECHO.Extracting %@@%%PKX_NAME%%$$%...
SET "LAST_SESSION=%CURR_SESSION%"&&SET "LIST_FOLDER_Z=%LIST_FOLDER%"&&SET "PACK_FOLDER_Z=%PACK_FOLDER%"&&SET "CACHE_FOLDER_Z=%CACHE_FOLDER%"&&DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%PKX_PACK%" /INDEX:1 /APPLYDIR:"%PKX_FOLDER%">NUL 2>&1
IF EXIST "%PKX_FOLDER%\package.list" CD /D "%PKX_FOLDER%">NUL
IF NOT EXIST "%PKX_FOLDER%\package.list" ECHO. %XLR2%ERROR:%$$% Package is either missing package.list or unable to extract.
SET "CURR_SESSION=PACK"&&SET "LIST_FOLDER=%PKX_FOLDER%"&&SET "PACK_FOLDER=%PKX_FOLDER%"&&SET "CACHE_FOLDER=%PKX_FOLDER%"&&IF EXIST "%PKX_FOLDER%\package.list" SET "$RUN=%PKX_FOLDER%\package.list"&&CALL:LIST_RUN
SET "CURR_SESSION=%LAST_SESSION%"&&SET "LIST_FOLDER=%LIST_FOLDER_Z%"&&SET "PACK_FOLDER=%PACK_FOLDER_Z%"&&SET "CACHE_FOLDER=%CACHE_FOLDER_Z%"&&CD /D "%PROG_FOLDER%">NUL
IF EXIST "%PKX_FOLDER%" SET "FOLDER_DEL=%PKX_FOLDER%"&&CALL:FOLDER_DEL
FOR %%a in (LIST_FOLDER_Z PACK_FOLDER_Z CACHE_FOLDER_Z PKX_SESSION PKX_PACK PKX_FOLDER PKX_NAME) DO (SET "%%a=")
EXIT /B
:APPX_ITEM
IF NOT "%LIST_ACTN%"=="DELETE" ECHO. %XLR4%ERROR:%$$% Appx list action is not DELETE.&&EXIT /B
ECHO.Removing AppX %@@%%BASE_MEAT%%$$%...&&CALL:IF_LIVE_EXT
SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
IF DEFINED APPX_SKIP SET "CAPS_SET=APPX_SKIPX"&&SET "CAPS_VAR=%APPX_SKIP%"&&CALL:CAPS_SET
IF DEFINED APPX_SKIP FOR %%1 in (%APPX_SKIPX%) DO (IF "%BASE_MEAT%"=="%%1" ECHO. %XLR2%The operation has been skipped.%$$%&&GOTO:APPX_END)
FOR /F "TOKENS=1-1* DELIMS=\" %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Applications" /F "%BASE_MEAT%" 2^>NUL') DO (IF "%%a"=="HKEY_LOCAL_MACHINE" SET "APPX_KEY=%%a\%%b"&&CALL:APPX_NML)
IF NOT DEFINED APPX_KEY FOR /F "TOKENS=1-1* DELIMS=\" %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\InboxApplications" /F "%BASE_MEAT%" 2^>NUL') DO (IF "%%a"=="HKEY_LOCAL_MACHINE" SET "APPX_KEY=%%a\%%b"&&CALL:APPX_IBX)
IF NOT DEFINED APPX_KEY IF NOT DEFINED APPX_DONE ECHO. %XLR4%AppX %BASE_MEAT% doesn't exist.%$$%
IF DEFINED APPX_KEY IF NOT DEFINED APPX_DONE ECHO. %XLR2%AppX %BASE_MEAT% is a stub or unable to remove.%$$%
:APPX_END
FOR %%a in (APPX_DONE APPX_PATH APPX_VER APPX_KEY) DO (SET "%%a=")
EXIT /B
:APPX_NML
FOR /F "TOKENS=1-9 SKIP=2 DELIMS=\ " %%a in ('REG QUERY "%APPX_KEY%" /V Path 2^>NUL') DO (IF "%%a"=="Path" SET "APPX_PATH=%DRVTAR%\Program Files\WindowsApps\%%g")
FOR /F "TOKENS=1-3* DELIMS=_" %%a IN ("%APPX_KEY%") DO (SET "APPX_VER=%%d")
IF DEFINED APPX_PATH IF DEFINED APPX_VER CALL:IF_LIVE_MIX
IF DEFINED APPX_PATH IF DEFINED APPX_VER FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /REMOVE-Provisionedappxpackage /PACKAGENAME:"%BASE_MEAT%_%APPX_VER%" 2^>NUL') DO (IF "%%1"=="The operation completed successfully" SET "APPX_DONE=1"&&ECHO. %XLR5%%%1.%$$%&&IF EXIST "%APPX_PATH%\*" SET "FOLDER_DEL=%APPX_PATH%"&&CALL:FOLDER_DEL)
IF DEFINED APPX_DONE CALL:IF_LIVE_EXT
IF DEFINED APPX_DONE REG ADD "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Deprovisioned\%BASE_MEAT%_%APPX_VER%" /f>NUL 2>&1
EXIT /B
:APPX_IBX
CALL:IF_LIVE_EXT
FOR /F "TOKENS=1-9 SKIP=2 DELIMS=\ " %%a in ('REG QUERY "%APPX_KEY%" /V Path 2^>NUL') DO (IF "%%a"=="Path" SET "APPX_PATH=%DRVTAR%\Windows\SystemApps\%%f")
FOR /F "TOKENS=1-3* DELIMS=_" %%a IN ("%APPX_KEY%") DO (SET "APPX_VER=%%d")
IF DEFINED APPX_PATH IF DEFINED APPX_VER FOR /F "TOKENS=1 DELIMS=." %%1 in ('REG DELETE "%APPX_KEY%" /F 2^>NUL') DO (IF "%%1"=="The operation completed successfully" SET "APPX_DONE=1"&&ECHO. %XLR5%%%1.%$$%&&IF EXIST "%APPX_PATH%\*" SET "FOLDER_DEL=%APPX_PATH%"&&CALL:FOLDER_DEL&REG ADD "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Deprovisioned\%BASE_MEAT%_%APPX_VER%" /f>NUL 2>&1)
EXIT /B
:CAP_ITEM
IF NOT "%LIST_ACTN%"=="DELETE" ECHO. %XLR4%ERROR:%$$% Capability list action is not DELETE.&&EXIT /B
ECHO.Removing Capability %@@%%BASE_MEAT%%$$%...&&CALL:IF_LIVE_MIX
SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /REMOVE-CAPABILITY /CAPABILITYNAME:"%BASE_MEAT%" 2^>NUL') DO (IF "%%1"=="The operation completed successfully" CALL ECHO. %XLR5%%%1.%$$%&&EXIT /B)
ECHO. %XLR4%Capability %BASE_MEAT% doesn't exist.%$$%
EXIT /B
:COMP_ITEM
IF NOT "%LIST_ACTN%"=="DELETE" ECHO. %XLR4%ERROR:%$$% Component list action is not DELETE.&&EXIT /B
ECHO.Removing Component %@@%%BASE_MEAT%%$$%...&&CALL:IF_LIVE_EXT
SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
IF DEFINED COMP_SKIP SET "CAPS_SET=COMP_SKIPX"&&SET "CAPS_VAR=%COMP_SKIP%"&&CALL:CAPS_SET
IF DEFINED COMP_SKIP FOR %%1 in (%COMP_SKIPX%) DO (IF "%BASE_MEAT%"=="%%1" ECHO. %XLR2%The operation has been skipped.%$$%&&EXIT /B)
SET "X0Z="&&SET "COMP_XNT="&&SET "FNL_XNT="&&FOR /F "TOKENS=1* DELIMS=:~" %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%BASE_MEAT%" 2^>NUL') DO (IF NOT "%%a"=="" CALL SET /A "COMP_XNT+=1"&&CALL SET /A "FNL_XNT+=1"&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&CALL:COMP_ITEM2)
EXIT /B
:COMP_ITEM2
IF "%X0Z%"=="%TX1%" EXIT /B
IF "%COMP_XNT%" GTR "1" EXIT /B
IF "%TX1%"=="End of search" ECHO. %XLR4%Component %BASE_MEAT% doesn't exist.%$$%&&EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
FOR %%a in (1 2 3 4 5 6 7 8 9) DO (CALL SET "COMP_Z%%a=")
SET "X0Z="&&SET "SUB_XNT="&&SET "COMP_FLAG="&&FOR /F "TOKENS=1* DELIMS=:~" %%1 IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%BASE_MEAT%" 2^>NUL') DO (IF NOT "%%1"=="" CALL SET /A "SUB_XNT+=1"&&CALL SET "X1=%%1"&&CALL SET "X2=%%2"&&CALL:COMP_DELETE)
EXIT /B
:COMP_AVOID
IF "%BASE_MEAT%~%X2%"=="%COMPX%" SET "COMP_AVD=1"
EXIT /B
:COMP_DELETE
IF "%X1%"=="End of search" EXIT /B
IF "%FNL_XNT%" GTR "9" EXIT /B
IF "%SUB_XNT%" GTR "9" EXIT /B
IF "%X0Z%"=="%BASE_MEAT%~%X2%" EXIT /B
SET "COMP_AVD="&&FOR %%a in (1 2 3 4 5 6 7 8 9) DO (CALL SET "COMPX=%%COMP_Z%%a%%"&&CALL:COMP_AVOID)
IF DEFINED COMP_AVD EXIT /B
SET "COMP_ABT=X"&&SET "COMP_ABT1="&&IF "%SAFE_EXCLUDE%"=="ENABLED" FOR /F "TOKENS=1-9 DELIMS=-" %%1 IN ("%BASE_MEAT%") DO (IF "%%4"=="FEATURES" SET "COMP_ABT1=1")
SET "COMP_ABT2="&&IF "%SAFE_EXCLUDE%"=="ENABLED" FOR /F "TOKENS=1-9 DELIMS=-" %%1 IN ("%BASE_MEAT%") DO (IF "%%5"=="REQUIRED" SET "COMP_ABT2=1")
SET "COMP_Z%FNL_XNT%=%BASE_MEAT%~%X2%"&&SET "COMP_ABT3="&&FOR %%1 in (%COMP_SKIPX%) DO (IF "%BASE_MEAT%"=="%%1" SET "COMP_ABT3=1")
IF NOT DEFINED COMP_ABT1 IF NOT DEFINED COMP_ABT2 IF NOT DEFINED COMP_ABT3 SET "COMP_ABT="
SET /A "FNL_XNT+=1"&&SET "X0Z=%BASE_MEAT%~%X2%"&&IF NOT DEFINED COMP_FLAG ECHO.Removing Subcomp %@@%%BASE_MEAT%~%X2%%$$%...
IF DEFINED COMP_ABT IF "%FNL_XNT%"=="2" SET "COMP_FLAG=1"&&ECHO. %XLR2%Component %BASE_MEAT% is required or unable to remove.%$$%
IF DEFINED COMP_ABT EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
REG ADD "%X1%~%X2%" /V "Visibility" /T REG_DWORD /D "1" /F>NUL 2>&1
REG DELETE "%X1%~%X2%\Owners" /F>NUL 2>&1
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /REMOVE-PACKAGE /PACKAGENAME:"%BASE_MEAT%~%X2%" 2^>NUL') DO (SET "DISMSG="&&IF "%%1"=="The operation completed successfully" CALL SET "DISMSG=%%1.")
IF NOT DEFINED DISMSG ECHO. %XLR2%Component %BASE_MEAT% is a stub or unable to remove.%$$%
IF DEFINED DISMSG ECHO. %XLR5%%DISMSG%%$$%
EXIT /B
:DRVR_ITEM
IF NOT "%LIST_ACTN%"=="DELETE" IF NOT "%LIST_ACTN%"=="INSTALL" ECHO. %XLR4%ERROR:%$$% Driver list action is not INSTALL or DELETE.&&EXIT /B
IF "%LIST_ITEM%:%LIST_ACTN%:%LIST_TIME%"=="DRIVER:INSTALL:IA" CALL:DRVR_INSTALL
IF "%LIST_ITEM%:%LIST_ACTN%:%LIST_TIME%"=="DRIVER:DELETE:IA" CALL:DRVR_REMOVE
EXIT /B
:DRVR_INSTALL
SET "PACK_GOOD=The operation completed successfully"&&SET "PACK_BAD=The operation did not complete successfully"&&CALL:IF_LIVE_MIX
FOR /F "TOKENS=*" %%a in ('DIR/S/B "%BASE_MEAT%\*.INF" 2^>NUL') DO (
IF NOT EXIST "%%a\*" FOR %%G in ("%%a") DO (CALL ECHO.Installing %@@%%%~nG.inf%$$%...)
IF NOT EXIST "%%a\*" IF DEFINED LIVE_APPLY SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('pnputil.exe /add-driver "%%a" /install 2^>NUL') DO (IF "%%1"=="Driver package added successfully" CALL SET "DISMSG=%PACK_GOOD%")
IF NOT EXIST "%%a\*" IF NOT DEFINED LIVE_APPLY SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /ADD-DRIVER /DRIVER:"%%a" /ForceUnsigned 2^>NUL') DO (IF "%%1"=="%PACK_GOOD%" CALL SET "DISMSG=%PACK_GOOD%")
IF NOT EXIST "%%a\*" IF DEFINED DISMSG CALL ECHO. %XLR5%%PACK_GOOD%.%$$%
IF NOT EXIST "%%a\*" IF NOT DEFINED DISMSG CALL ECHO. %XLR2%%PACK_BAD%.%$$%)
EXIT /B
:DRVR_REMOVE
SET "FILE_OUTPUT=$DRVR"&&CALL:IF_LIVE_MIX
IF NOT DEFINED DRVR_QRY IF EXIST "$DRVR" DEL /Q /F "$DRVR">NUL 2>&1
IF NOT EXIST "$DRVR" SET "DRVR_QRY=1"&&ECHO.Getting driver listing...&&FOR /F "TOKENS=1-9 DELIMS=|" %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-DRIVERS /FORMAT:TABLE 2^>NUL') DO (FOR /F "TOKENS=1 DELIMS= " %%# in ("%%a") DO (SET "X1=%%#")
FOR /F "TOKENS=1 DELIMS= " %%# in ("%%g") DO (SET "X3=%%#")
FOR /F "TOKENS=1 DELIMS= " %%# in ("%%b") DO (SET "CAPS_SET=X2"&&SET "CAPS_VAR=%%#"&&CALL:CAPS_SET&&CALL:FILE_OUTPUT))
ECHO.Removing driver %@@%%BASE_MEAT%%$$%...&&SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
SET "DISMSG="&&IF EXIST "$DRVR" FOR /F "TOKENS=1-3 DELIMS=|" %%a in ($DRVR) DO (IF "%%b"=="%BASE_MEAT%" ECHO.Uninstalling %@@%%%a%$$% v%%c...
IF "%%b"=="%BASE_MEAT%" IF DEFINED LIVE_APPLY FOR /F "TOKENS=1 DELIMS=." %%1 in ('PNPUTIL.EXE /DELETE-DRIVER "%%a" /UNINSTALL /FORCE 2^>NUL') DO (IF "%%1"=="Driver package deleted successfully" SET "DISMSG=The operation completed successfully.")
IF "%%b"=="%BASE_MEAT%" IF NOT DEFINED LIVE_APPLY FOR /F "TOKENS=1 DELIMS=." %%1 in ('DISM /ENGLISH /%APPLY_TARGET% /REMOVE-DRIVER /DRIVER:"%%a" 2^>NUL') DO (IF "%%1"=="The operation completed successfully" SET "DISMSG=%%1."))
IF NOT DEFINED DISMSG ECHO. %XLR4%Driver %BASE_MEAT% doesn't exist.%$$%
IF DEFINED DISMSG ECHO. %XLR5%%DISMSG%%$$%
EXIT /B
:FILE_OUTPUT
IF "%FILE_OUTPUT%"=="$FEAT" ECHO.%X1%%-%%X2%>>"$FEAT"
IF "%FILE_OUTPUT%"=="$DRVR" ECHO.%X1%%-%%X2%%-%%X3%>>"$DRVR"
EXIT /B
:FEAT_ITEM
IF NOT "%LIST_ACTN%"=="ENABLE" IF NOT "%LIST_ACTN%"=="DISABLE" ECHO. %XLR4%ERROR:%$$% Feature list action is not ENABLE or DISABLE.&&EXIT /B
SET "FILE_OUTPUT=$FEAT"&&CALL:IF_LIVE_MIX
IF NOT DEFINED FEAT_QRY IF EXIST "$FEAT" DEL /Q /F "$FEAT">NUL 2>&1
IF NOT EXIST "$FEAT" SET "FEAT_QRY=1"&&ECHO.Getting feature listing...&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS=| " %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-FEATURES /FORMAT:TABLE 2^>NUL') DO (FOR %%X in (Enabled Disabled) DO (IF "%%b"=="%%X" SET "CAPS_SET=X1"&&SET "CAPS_VAR=%%a"&&SET "X2=%%b"&&CALL:CAPS_SET&&CALL:FILE_OUTPUT))
IF "%LIST_ACTN%"=="ENABLE" ECHO.Enabling Feature %@@%%BASE_MEAT%%$$%... &&SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
IF "%LIST_ACTN%"=="DISABLE" ECHO.Disabling Feature %@@%%BASE_MEAT%%$$%... &&SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
SET "FEAT="&&IF EXIST "$FEAT" FOR /F "TOKENS=1-9 SKIP=6 DELIMS=|" %%a in ($FEAT) DO (IF "%%a"=="%BASE_MEAT%" SET "FEAT=1"&&SET "X1=%%a"&&SET "X2=%%b")
IF NOT DEFINED FEAT ECHO. %XLR4%Feature %BASE_MEAT% doesn't exist.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="ENABLE" IF "%X2%"=="Enabled" ECHO. %XLR5%The operation completed successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="DISABLE" IF "%X2%"=="Disabled" ECHO. %XLR5%The operation completed successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="ENABLE" FOR /F "TOKENS=1 DELIMS=." %%$ in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /ENABLE-FEATURE /FEATURENAME:"%BASE_MEAT%" /ALL 2^>NUL') DO (IF "%%$"=="The operation completed successfully" CALL ECHO. %XLR5%%%$.%$$% &&SET "X2=Enabled"&&CALL:FILE_OUTPUT&&EXIT /B)
IF "%LIST_ACTN%"=="DISABLE" FOR /F "TOKENS=1 DELIMS=." %%$ in ('DISM /ENGLISH /%APPLY_TARGET% /NORESTART /DISABLE-FEATURE /FEATURENAME:"%BASE_MEAT%" /REMOVE 2^>NUL') DO (IF "%%$"=="The operation completed successfully" CALL ECHO. %XLR5%%%$.%$$% &&SET "X2=Disabled"&&CALL:FILE_OUTPUT&&EXIT /B)
ECHO. %XLR2%Feature %BASE_MEAT% is a stub or unable to change.%$$%
EXIT /B
:SVC_ITEM
IF NOT "%LIST_ACTN%"=="AUTO" IF NOT "%LIST_ACTN%"=="MANUAL" IF NOT "%LIST_ACTN%"=="DISABLE" IF NOT "%LIST_ACTN%"=="DELETE" ECHO. %XLR4%ERROR:%$$% Service list action is not AUTO, MANUAL, DISABLE, or DELETE.&&EXIT /B
CALL:IF_LIVE_EXT
IF "%LIST_ACTN%"=="DELETE" ECHO.Removing Service %@@%%BASE_MEAT%%$$%...
IF NOT "%LIST_ACTN%"=="DELETE" ECHO.Changing start to %@@%%LIST_ACTN%%$$% for Service %@@%%BASE_MEAT%%$$%...
SET "CAPS_SET=BASE_MEAT"&&SET "CAPS_VAR=%BASE_MEAT%"&&CALL:CAPS_SET
IF DEFINED SVC_SKIP SET "CAPS_SET=SVC_SKIPX"&&SET "CAPS_VAR=%SVC_SKIP%"&&CALL:CAPS_SET
IF DEFINED SVC_SKIP FOR %%1 in (%SVC_SKIPX%) DO (IF "%BASE_MEAT%"=="%%1" ECHO. %XLR2%The operation has been skipped.%$$%&&EXIT /B)
SET "$GO="&&FOR /F "TOKENS=1-3 DELIMS= " %%a IN ('REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V Start 2^>NUL') DO (
IF "%%a"=="Start" SET "$GO=1"
IF "%LIST_ACTN%"=="AUTO" IF "%%a"=="Start" IF "%%c"=="0x2" ECHO. %XLR5%The operation completed successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="MANUAL" IF "%%a"=="Start" IF "%%c"=="0x3" ECHO. %XLR5%The operation completed successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="DISABLE" IF "%%a"=="Start" IF "%%c"=="0x4" ECHO. %XLR5%The operation completed successfully.%$$%&&EXIT /B)
IF NOT DEFINED $GO ECHO. %XLR4%Service %BASE_MEAT% doesn't exist.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="DELETE" SET "$RAS=RATI"&&CALL:RASTI_CREATE
IF NOT "%LIST_ACTN%"=="DELETE" SET "$RAS=RAS"&&CALL:RASTI_CREATE
FOR /F "TOKENS=1-3 DELIMS= " %%a IN ('REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V Start 2^>NUL') DO (
IF "%LIST_ACTN%"=="AUTO" IF "%%a"=="Start" IF NOT "%%c"=="0x2" ECHO. %XLR2%The operation did not complete successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="MANUAL" IF "%%a"=="Start" IF NOT "%%c"=="0x3" ECHO. %XLR2%The operation did not complete successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="DISABLE" IF "%%a"=="Start" IF NOT "%%c"=="0x4" ECHO. %XLR2%The operation did not complete successfully.%$$%&&EXIT /B
IF "%LIST_ACTN%"=="DELETE" IF "%%a"=="Start" ECHO. %XLR2%The operation did not complete successfully.%$$%&&EXIT /B)
ECHO. %XLR5%The operation completed successfully.%$$%
EXIT /B
:TASK_ITEM
IF NOT "%LIST_ACTN%"=="DELETE" ECHO. %XLR4%ERROR:%$$% Task list action is not DELETE.&&EXIT /B
ECHO.Removing Task %@@%%BASE_MEAT%%$$%...&&CALL:IF_LIVE_EXT
SET "TASKID="&&FOR /F "TOKENS=1-4 DELIMS={} " %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%BASE_MEAT%" /V Id 2^>NUL') DO (IF "%%a"=="Id" SET "TASKID=%%c")
IF NOT DEFINED TASKID ECHO. %XLR4%Task %BASE_MEAT% doesn't exist.%$$%&&EXIT /B
SET "$RAS=RAS"&&CALL:RASTI_CREATE
FOR /F "TOKENS=1 DELIMS= " %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%BASE_MEAT%" /V Id 2^>NUL') DO (IF "%%a"=="Id" ECHO. %XLR2%The operation did not complete successfully.%$$%&&EXIT /B)
ECHO. %XLR5%The operation completed successfully.%$$%
EXIT /B
:WINSXS_REMOVE
IF NOT "%LIST_ACTN%"=="DELETE" EXIT /B
CALL:IF_LIVE_EXT
IF NOT DEFINED SXS_SKIP SET "SXS_SKIP=amd64_microsoft-windows-s..cingstack.resources amd64_microsoft-windows-servicingstack amd64_microsoft.vc80.crt amd64_microsoft.vc90.crt amd64_microsoft.windows.c..-controls.resources amd64_microsoft.windows.common-controls amd64_microsoft.windows.gdiplus x86_microsoft.vc80.crt x86_microsoft.vc90.crt x86_microsoft.windows.c..-controls.resources x86_microsoft.windows.common-controls x86_microsoft.windows.gdiplus"
ECHO.&&ECHO.Removing %@@%WinSxS folder%$$%...&&SET "SUBZ="&&SET "SUBXNT="&&FOR /F "TOKENS=1-2* DELIMS=_" %%a IN ('DIR "%WINTAR%\WinSxS" /A: /B /O:GN') DO (IF NOT "%%a"=="" SET "QUERYX=%%a_%%b"&&SET "SUBX=%%c"&&SET /A "SUBXNT+=1"&&CALL:LATERS_WINSXS)
EXIT /B
:LATERS_WINSXS
IF "%QUERYX%_%SUBX%"=="%SUBZ%" EXIT /B
FOR %%1 in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF %SUBXNT% EQU %%1500 CALL ECHO.WinSxS folder queue item %##%%%1500%$$%...
IF "%SUBXNT%"=="%%1000" CALL ECHO.WinSxS folder queue item %##%%%1000%$$%...)
SET "DNTX="&&FOR %%a in (%SXS_SKIP%) DO (IF "%QUERYX%"=="%%a" SET "DNTX=1")
SET "SUBZ=%QUERYX%_%SUBX%"&&SET "DNTX="&&FOR %%a in (%SXS_SKIP%) DO (IF "%QUERYX%"=="%%a" SET "DNTX=1")
IF NOT DEFINED DNTX (TAKEOWN /F "%WINTAR%\WinSxS\%QUERYX%_%SUBX%" /R /D Y>NUL 2>&1
ICACLS "%WINTAR%\WinSxS\%QUERYX%_%SUBX%" /grant %USERNAME%:F /T>NUL 2>&1
RD /Q /S "\\?\%WINTAR%\WinSxS\%QUERYX%_%SUBX%" >NUL 2>&1) ELSE (ECHO.Keeping %@@%%QUERYX%_%SUBX%%$$%)
EXIT /B
:SC_RO_CREATE
IF "%LIST_ITEM%"=="PICK" EXIT /B
CALL:IF_LIVE_EXT
IF "%LIST_TIME%"=="SC" SET "SCRO=SetupComplete"
IF "%LIST_TIME%"=="RO" SET "SCRO=RunOnce"
IF NOT DEFINED %LIST_TIME%_PREPARE SET "%LIST_TIME%_PREPARE=1"&&CALL:SC_RO_PREPARE
IF NOT DEFINED BASE_MEAT EXIT /B
IF "%LIST_ITEM%"=="EXTPACKAGE" ECHO.Copying Package %@@%%BASE_MEAT% for %##%%SCRO%%$$%...
IF "%LIST_ITEM%"=="EXTPACKAGE" IF NOT EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO. %XLR4%%PACK_FOLDER%\%BASE_MEAT% doesn't exist.%$$%&&EXIT /B
IF "%LIST_ITEM%"=="EXTPACKAGE" IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" COPY /Y "%PACK_FOLDER%\%BASE_MEAT%" "%APPLYDIR_MASTER%\$">NUL
IF "%LIST_ITEM%"=="EXTPACKAGE" IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO.[EXTPACKAGE][%BASE_MEAT%][INSTALL][IA]>>"%APPLYDIR_MASTER%\$\%SCRO%.list"
IF NOT "%LIST_ITEM%"=="EXTPACKAGE" CALL:MOUNT_CLEAR
IF NOT "%LIST_ITEM%"=="EXTPACKAGE" ECHO.Scheduling %@@%%LIST_ITEM%%$$% %BASE_MEAT% %@@%%LIST_ACTN%%$$% for %##%%SCRO%%$$%.&&ECHO.[%LIST_ITEM%][%BASE_MEAT%][%LIST_ACTN%][IA]>>"%APPLYDIR_MASTER%\$\%SCRO%.list"
IF NOT "%LIST_ITEM%"=="EXTPACKAGE" CALL:MOUNT_REST
SET "BASE_MEAT="&&EXIT /B
:SC_RO_PREPARE
IF NOT EXIST "%APPLYDIR_MASTER%\$" MD "%APPLYDIR_MASTER%\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\windick.cmd" "%APPLYDIR_MASTER%\$">NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\$\%SCRO%.LIST" ECHO.EXEC-LIST>"%APPLYDIR_MASTER%\$\%SCRO%.list"
IF "%SCRO%"=="RunOnce" Reg.exe add "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce" /v "Runonce" /t REG_EXPAND_SZ /d "%%WINDIR%%\Setup\Scripts\RunOnce.cmd" /f>NUL 2>&1
IF NOT EXIST "%WINTAR%\Setup\Scripts" MD "%WINTAR%\Setup\Scripts">NUL 2>&1
ECHO.%%SYSTEMDRIVE%%\$\windick.cmd -imagemgr -run -list %SCRO%.list -live>"%WINTAR%\Setup\Scripts\%SCRO%.cmd"
ECHO.EXIT 0 >>"%WINTAR%\Setup\Scripts\%SCRO%.cmd"
EXIT /B
::#########################################################################
:IMAGEMGR_BUILDER
::#########################################################################
SET "LIST_ACTN="&&SET "LIST_ITEM="&&SET "LIST_TIME="&&SET "LIST_TYPE="&&SET "$HEAD="
CLS&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO. ( %##%.%$$% ) Miscellaneous&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHOICE="&&CALL:MENU_SELECT
IF "%SELECT%"=="." CALL:LIST_MISCELLANEOUS&GOTO:IMAGEMGR_BUILDER
IF NOT DEFINED SELECT EXIT /B
IF NOT DEFINED $CHOICE GOTO:IMAGEMGR_BUILDER
IF "%SELECT%" GEQ "99" GOTO:IMAGEMGR_BUILDER
IF NOT "%SELECT%" GEQ "1" GOTO:IMAGEMGR_BUILDER
SET "HEAD_EXT=BASE"&&SET "HEAD_CHECK=%LIST_FOLDER%\%$CHOICE%"&&CALL:GET_HEADER
IF DEFINED ERROR CALL:PAUSED
IF "%$HEAD%"=="BASE-LIST" CALL:LIST_BASE_VIEW
IF "%$HEAD%"=="BASE-GROUP" SET "LIST_TYPE_TMP=BASE"&&SET "MENUT0=                             List Builder"&&SET "MENUT1= "&&CALL:LIST_GROUP_VIEW
GOTO:IMAGEMGR_BUILDER
:LIST_BASE_VIEW
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO. (%##%1%$$%) AppX&&ECHO. (%##%2%$$%) Feature&&ECHO. (%##%3%$$%) Component&&ECHO. (%##%4%$$%) Capability&&ECHO. (%##%5%$$%) Service&&ECHO. (%##%6%$$%) Task&&ECHO. (%##%7%$$%) Driver&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF NOT "%SELECTX%"=="1" IF NOT "%SELECTX%"=="2" IF NOT "%SELECTX%"=="3" IF NOT "%SELECTX%"=="4" IF NOT "%SELECTX%"=="5" IF NOT "%SELECTX%"=="6" IF NOT "%SELECTX%"=="7" EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             Type of Action&&ECHO.
IF "%SELECTX%"=="1" SET "LIST_ITEM=APPX"&&ECHO. (%##%1%$$%) Delete&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="2" SET "LIST_ITEM=FEATURE"&&ECHO. (%##%1%$$%) Disable&&ECHO. (%##%2%$$%) Enable&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="3" SET "LIST_ITEM=COMPONENT"&&ECHO. (%##%1%$$%) Delete&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="4" SET "LIST_ITEM=CAPABILITY"&&ECHO. (%##%1%$$%) Delete&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="5" SET "LIST_ITEM=SERVICE"&&ECHO. (%##%1%$$%) Delete&&ECHO. (%##%2%$$%) Automatic&&ECHO. (%##%3%$$%) Manual&&ECHO. (%##%4%$$%) Disable&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="6" SET "LIST_ITEM=TASK"&&ECHO. (%##%1%$$%) Delete&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%SELECTX%"=="7" SET "LIST_ITEM=DRIVER"&&ECHO. (%##%1%$$%) Delete&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF "%LIST_ITEM%"=="APPX" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF "%LIST_ITEM%"=="FEATURE" IF "%SELECTY%"=="1" SET "LIST_ACTN=DISABLE"
IF "%LIST_ITEM%"=="FEATURE" IF "%SELECTY%"=="2" SET "LIST_ACTN=ENABLE"
IF "%LIST_ITEM%"=="COMPONENT" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF "%LIST_ITEM%"=="CAPABILITY" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="2" SET "LIST_ACTN=AUTO"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="3" SET "LIST_ACTN=MANUAL"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="4" SET "LIST_ACTN=DISABLE"
IF "%LIST_ITEM%"=="TASK" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF "%LIST_ITEM%"=="DRIVER" IF "%SELECTY%"=="1" SET "LIST_ACTN=DELETE"
IF NOT DEFINED LIST_ACTN EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&SET "MENUT0=                             List Builder"&&SET "MENUT1= "&&SET "MENUT2=  %@@%GETTING %LIST_ITEM% LISTING%$$%..."&&SET "MENUT3= "&&SET "MENUB0= "&&SET "$LIST=%LIST_FOLDER%\%$CHOICE%"&&SET "ONLY1=%LIST_ITEM%"&&SET "LIST_TYPE=BASE"&&CALL:LIST_FILE
IF DEFINED ERROR EXIT /B
ECHO.                         Multiples OK ( %##%1 2 3%$$% )&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
SET "LIST_TIME=IA"&&FOR %%a in (%SELECT%) DO (IF NOT "%%a"=="" CALL SET "LIST_WRITE=[%%$ITEM%%a%%]"&&CALL:LIST_WRITE)
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="0" CALL:LIST_MAKE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&SET "COMBINE_HEAD=EXEC-LIST"&&SET "$LST1=%$PICK%"&&CALL:LIST_COMBINE
CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_GROUP_VIEW
SET "MENUT0X="&&SET "MENUT1X="&&IF DEFINED MENUT0 SET "MENUT0X=%MENUT0%"&&IF DEFINED MENUT1 SET "MENUT1X=%MENUT1%"
CLS&&SET "LIST_ACTN="&&SET "LIST_TIME="&&SET "LIST_ITEM=GROUP"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&SET "MENUT2=  %@@%GETTING GROUP LISTING%$$%..."&&SET "MENUT3= "&&SET "MENUB0= "&&SET "$LIST=%LIST_FOLDER%\%$CHOICE%"&&SET "$LISTX=%LIST_FOLDER%\%$CHOICE%"&&SET "ONLY1=GROUP"&&SET "LIST_TYPE=%LIST_TYPE_TMP%"&&CALL:LIST_FILE&&SET "$BOX=RB"&&CALL:BOX_DISP
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CALL SET "ITEM_SELECT=%%$ITEM%SELECT%%%"
IF NOT DEFINED ITEM_SELECT EXIT /B
IF DEFINED MENUT0X SET "MENUT0=%MENUT0X%"&&IF DEFINED MENUT1X SET "MENUT1=%MENUT1X%"
SET "MENUT0X="&&SET "MENUT1X="&&FOR /F "TOKENS=1-9 DELIMS=[]" %%1 IN ("%ITEM_SELECT%") DO (SET "GROUP_TARGET=%%2")
CLS&&SET "LIST_ACTN="&&SET "LIST_TIME="&&SET "LIST_ITEM=GROUP"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&SET "MENUT2=  %@@%GETTING SUBGROUP LISTING%$$%..."&&SET "MENUT3= "&&SET "MENUB0= "&&SET "$LIST=%$LISTX%"&&SET "ONLY1=GROUP"&&SET "ONLY2=%GROUP_TARGET%"&&SET "LIST_TYPE=%LIST_TYPE_TMP%"&&CALL:LIST_FILE
IF DEFINED ERROR EXIT /B
ECHO.                         Multiples OK ( %##%1 2 3%$$% )&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
ECHO.&&ECHO. Parsing results...&&COPY /Y "%$LISTX%" "$HZ">NUL
IF "%$HEAD%"=="MULTI-LIST" SET "MLT_SESSION=1"&&ECHO.EXEC-LIST>"$LST2"
FOR %%a in (%SELECT%) DO (IF NOT "%%a"=="" CALL SET "FULL_TARGET=%%$ITEM%%a%%"&&CALL:GROUP_POPULATE)
IF "%$HEAD%"=="BASE-GROUP" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%$HEAD%"=="BASE-GROUP" IF "%SELECT%"=="0" CALL:LIST_MAKE
IF DEFINED MLT_SESSION SET "$RUN=%PROG_FOLDER%\$LST2"&&SET "CURR_SESSION=MULTI"&&SET "LST_SESSION=1"&&SET "LIVE_APPLY=1"&&CALL:LIST_RUN&SET "CURR_SESSION="&SET "MLT_SESSION="&SET "LST_SESSION="&SET "PKX_SESSION="&EXIT /B
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&SET "COMBINE_HEAD=EXEC-LIST"&&SET "$LST1=%$PICK%"&&CALL:LIST_COMBINE
SET "LIST_TYPE_TMP="&&CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_MAKE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter name of new .LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET /P "$LIST_NAME=$>>"
IF NOT DEFINED $LIST_NAME SET "ERROR=LIST_MAKE"&&CALL:DEBUG&&EXIT /B
SET "$CHOICE=%$LIST_NAME%.list"&&ECHO.EXEC-LIST>"%LIST_FOLDER%\%$LIST_NAME%.list"
IF EXIST "%LIST_FOLDER%\%$CHOICE%" SET "$PICK=%LIST_FOLDER%\%$CHOICE%"
EXIT /B
:CUSTOM_MODE
@ECHO OFF&&SET "MOUNT="&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:GET_SPACE
IF NOT DEFINED MENU_LIST SET "MENU_MODE=NORMAL"&&GOTO:MAIN_MENU
IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="Z:\%HOST_FOLDERX%" IF EXIST "%LIST_FOLDER%\%MENU_LIST%" IF NOT EXIST "%PROG_FOLDER%\%MENU_LIST%" COPY /Y "%LIST_FOLDER%\%MENU_LIST%" "%PROG_FOLDER%">NUL
IF NOT EXIST "%LIST_FOLDER%\%MENU_LIST%" SET "MENU_MODE=NORMAL"&&SET "MENU_LIST="&&GOTO:MAIN_MENU
SET "HEAD_EXT=LIST"&&SET "HEAD_CHECK=%LIST_FOLDER%\%MENU_LIST%"&&CALL:GET_HEADER&TITLE  
IF NOT "%$HEAD%"=="MULTI-LIST" IF NOT "%$HEAD%"=="EXEC-LIST" ECHO.&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.       %XLR4%ERROR:%$$% %MENU_LIST% is not a multi or execution list. Leaving custom menu.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAUSED&SET "MENU_MODE=NORMAL"&GOTO:MAIN_MENU
IF "%$HEAD%"=="EXEC-LIST" SET "MENU_MODE=NORMAL"&&CALL:SETS_HANDLER&&SET "TIMER_MSG= %$$%Executing %@@%%MENU_LIST%%$$% in [ %XLR4%%%TIMER%%%$$% ] seconds. %##%Close window to abort.%$$%"&&SET "TIMER=10"&&CALL:TIMER&&SET "$RUN=%LIST_FOLDER%\%MENU_LIST%"&&SET "CURR_SESSION=EXEC"&&SET "LST_SESSION=1"&&SET "LIVE_APPLY=1"&&SET "NO_PAUSE=1"&&CALL:LIST_RUN&SET "MENU_MODE=CUSTOM"&CALL:SETS_HANDLER&CALL:CLEAN&GOTO:QUIT
IF NOT DEFINED MENU_BANNER SET "MENU_BANNER=                Press ( * ) to return to the main menu"
SET "LIST_ACTN="&&SET "LIST_TIME="&&SET "LIST_ITEM=GROUP"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&SET "MENUT0=%$$%%MENU_BANNER%%$$%"&&SET "MENUT1= "&&SET "MENUB1= ( %##%Q%$$% ) Quit"&&SET "MENUB2= "
IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="Z:\%HOST_FOLDERX%" SET "MENUB3=          ^< Disk %@@%%HOST_NUMBER%%$$% UID %@@%%HOST_TARGET%%$$% ^>"
IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" SET "MENUB3=        ^< Disk %XLR2%Error%$$% UID %XLR2%%HOST_TARGET%%$$% ^>"
SET "$LIST=%LIST_FOLDER%\%MENU_LIST%"&&SET "ONLY1=GROUP"&&SET "LIST_TYPE=LIST"&&CALL:LIST_FILE&&SET "$BOX=RB"&&CALL:BOX_DISP
CALL:PAD_LINE&&CALL:MENU_SELECT
IF "%SELECT%"=="Q" GOTO:QUIT
IF DEFINED HOST_ERROR GOTO:CUSTOM_MODE
IF "%SELECT%"=="*" SET "MENU_MODE=NORMAL"&&GOTO:MAIN_MENU
CALL SET "ITEM_SELECT=%%$ITEM%SELECT%%%"
IF NOT DEFINED ITEM_SELECT GOTO:CUSTOM_MODE
FOR /F "TOKENS=1-9 DELIMS=[]" %%1 IN ("%ITEM_SELECT%") DO (SET "GROUP_TARGET=%%2")
IF NOT DEFINED GROUP_TARGET GOTO:CUSTOM_MODE
CLS&&SET "LIST_ACTN="&&SET "LIST_TIME="&&SET "LIST_ITEM=GROUP"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&SET "MENUT0=%$$%%MENU_BANNER%%$$%"&&SET "MENUT1= "&&SET "MENUB0= "&&SET "$LIST=%LIST_FOLDER%\%MENU_LIST%"&&SET "ONLY1=GROUP"&&SET "ONLY2=%GROUP_TARGET%"&&SET "LIST_TYPE=LIST"&&CALL:LIST_FILE&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
IF DEFINED ERROR GOTO:MAIN_MENU
CALL:PAD_PREV&&CALL:MENU_SELECT
CALL SET "ITEM_SELECT=%%$ITEM%SELECT%%%"
IF NOT DEFINED ITEM_SELECT GOTO:CUSTOM_MODE
COPY /Y "%LIST_FOLDER%\%MENU_LIST%" "$HZ">NUL&&SET "MLT_SESSION=1"&&ECHO.EXEC-LIST>"$LST2"
CALL SET "FULL_TARGET=%ITEM_SELECT%"&&CALL:GROUP_POPULATE
SET "$RUN=%PROG_FOLDER%\$LST2"&&SET "CURR_SESSION=MULTI"&&SET "LST_SESSION=1"&&SET "LIVE_APPLY=1"&&CALL:LIST_RUN
SET "CURR_SESSION="&&SET "MLT_SESSION="&&SET "LST_SESSION="&&SET "PKX_SESSION="
GOTO:CUSTOM_MODE
:GROUP_POPULATE
IF NOT DEFINED FULL_TARGET EXIT /B
SET "SUB_TARGET="&&FOR /F "TOKENS=1-9 DELIMS=[]" %%1 in ("%FULL_TARGET%") DO (SET "SUB_TARGET=%%3")
CALL:MOUNT_CLEAR&&CALL:VAR_CLEAR
SET "WRITEX="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%a in ($HZ) DO (
IF "%%a"=="GROUP" IF "%%b"=="%GROUP_TARGET%" IF "%%c"=="%SUB_TARGET%" SET "WRITEX=1"
IF "%%a"=="GROUP" IF NOT "%%b"=="%GROUP_TARGET%" SET "WRITEX="
IF "%%a"=="GROUP" IF NOT "%%c"=="%SUB_TARGET%" SET "WRITEX="
IF NOT "%%a"=="" IF "%%b"=="" SET GROUP_WRITE=[%%a]
IF NOT "%%a"=="" IF NOT "%%b"=="" IF "%%c"=="" SET GROUP_WRITE=[%%a][%%b]
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF "%%d"=="" SET GROUP_WRITE=[%%a][%%b][%%c]
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF "%%e"=="" SET GROUP_WRITE=[%%a][%%b][%%c][%%d]
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF NOT "%%e"=="" SET GROUP_WRITE=[%%a][%%b][%%c][%%d][%%e]
IF NOT "%%a"=="" CALL SET "$CLM1=%%a"&&CALL SET "$CLM2=%%b"&&CALL SET "$CLM3=%%c"&&CALL SET "$CLM4=%%d"&&CALL SET "$CLM5=%%e"&&CALL:GROUP_WRITE)
CALL:MOUNT_REST
EXIT /B
:GROUP_WRITE
IF NOT DEFINED WRITEX EXIT /B
FOR %%a in (PROMPT0 PROMPT1 PROMPT2 PROMPT3 PROMPT4 PROMPT5 PROMPT6 PROMPT7 PROMPT8 PROMPT9) DO (IF "%%a"=="%$CLM1%" CALL:GROUP_WRITE_PROMPT)
FOR /F "TOKENS=*" %%a in ("%GROUP_WRITE%") DO (ECHO.%%a>>"$LST2")
EXIT /B
:GROUP_WRITE_PROMPT
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.%$CLM2%&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&SET "$CASE=ANY"&&SET "$SELECT=VARX1"&&CALL:MENU_SELECT
SET "GROUP_WRITE=[%$CLM1%][%$CLM2%][%VARX1%]"
EXIT /B
:VAR_CLEAR
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "VAR%%a=")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "VAR%%a=%%VAR%%a%%")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=%%COLOR%%a%%")
EXIT /B
:MOUNT_CLEAR
IF NOT DEFINED PROG_SOURCE EXIT /B
SET "MOUNT_SAVE=%MOUNT%"&&SET "MOUNT="&&FOR %%a in (DRVTAR WINTAR USRTAR HIVE_SOFTWARE HIVE_SYSTEM HIVE_USER IMAGE_FOLDER LIST_FOLDER PACK_FOLDER CACHE_FOLDER PROG_SOURCE PKX_FOLDER APPLY_TARGET) DO (CALL SET "%%a_X=%%%%a%%"&&SET "%%a="
SET "%%a=%%%%a%%")
SET "MOUNT_SAVE=%MOUNT%"&&SET "MOUNT="&&FOR %%a in (: LB RB @ - + }} } {) DO (SET "%%a="
SET "%%a=%%%%a%%")
EXIT /B
:MOUNT_REST
IF NOT DEFINED PROG_SOURCE_X EXIT /B
SET "MOUNT=%MOUNT_SAVE%"&&SET "MOUNT_SAVE="&&FOR %%a in (DRVTAR WINTAR USRTAR HIVE_SOFTWARE HIVE_SYSTEM HIVE_USER IMAGE_FOLDER LIST_FOLDER PACK_FOLDER CACHE_FOLDER PROG_SOURCE PKX_FOLDER APPLY_TARGET) DO (CALL SET "%%a=%%%%a_X%%"&&SET "%%a_X=")
SET ":=;"&&SET "LB=["&&SET "RB=]"&&SET "@=^^"&&SET "+=^&"&&SET "{=^<"&&SET "}=^>"&&SET "}}=^>^>"&&SET "-=^|"
EXIT /B
:LIST_MISCELLANEOUS
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO. (%##%*%$$%) Create Source Base&&ECHO. (%##%.%$$%) Create Group Base&&ECHO.&&ECHO. (%##%1%$$%) Group Seperator Item&&ECHO. (%##%2%$$%) External Package Item&&ECHO. (%##%3%$$%) Command Operation Item&&ECHO. (%##%4%$$%) Prompt / Variable Item&&ECHO.&&ECHO. (%##%-%$$%) Difference Base Lists&&ECHO. (%##%+%$$%) Create Multi List&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF "%SELECTX%"=="*" CALL:LIST_BASE_CREATE
IF "%SELECTX%"=="." CALL:LIST_GROUP_CONVERT
IF "%SELECTX%"=="-" CALL:LIST_DIFFERENCER
IF "%SELECTX%"=="+" CALL:LIST_MULTI_TEMPLATE
IF "%SELECTX%"=="1" CALL:LIST_GROUP_BOUNDRY
IF "%SELECTX%"=="2" CALL:LIST_PACK_CREATE
IF "%SELECTX%"=="3" CALL:LIST_COMMAND_CREATE
IF "%SELECTX%"=="4" CALL:LIST_PROMPT_CREATE
EXIT /B
:LIST_MULTI_TEMPLATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                  This feature is a work in progress.&&ECHO.      It's a hybrid of a group base and an execution list, with&&ECHO.    simple scripted tools in mind. A example list will be created.&&ECHO.&&ECHO.                          Enter new list name&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
(ECHO.MULTI-LIST&&ECHO.[GROUP][Mount and Unmount VHDX list items][EXAMPLE]&&ECHO.&&ECHO.[MOUNT][                      Select the filesystem target][                           This is an example]&&ECHO.&&ECHO.[CONFIRM][                    This is a confirmation prompt.][              If not confirmed, progress will be halted.]&&ECHO.[COMMANDQ][ECHO.Recommended to put this at the top of any subgroup.][CMD][IA]&&ECHO.[COMMANDQ][ECHO.Default target is the live system when this item is not used.][CMD][IA]&&ECHO.[COMMAND][DIR /B %%DRVTAR%%\][CMD][IA]&&ECHO.[COMMAND][REG QUERY %%HIVE_USER%%][REG][IA]&&ECHO.&&ECHO.[UNMOUNT][Unmount VHDX][Detaches virtual disk if it was attached during this instance.]&&ECHO.&&ECHO.[COMMANDQ][ECHO.Recommended to put this at the bottomm of any subgroup.][CMD][IA]&&ECHO.[COMMANDQ][ECHO.Target returns to the live system following the usage of this item.][CMD][IA]&&ECHO.[COMMAND][DIR /B %%DRVTAR%%\][CMD][IA]&&ECHO.[COMMAND][REG QUERY %%HIVE_USER%%][REG][IA]&&ECHO.&&ECHO.[GROUP][Pick file][EXAMPLE]&&ECHO.[PICK][                             Select a file][                           This is an example][%%IMAGE_FOLDER%%\*.WIM]&&ECHO.[COMMANDQ][ECHO. $PICK: %%$PICK%%  $CHOICE: %%$CHOICE%%][CMD][IA]&&ECHO.[PICK][                             Select a file][                           This is an example][%%LIST_FOLDER%%\*.BASE]&&ECHO.[COMMANDQ][ECHO. $PICK: %%$PICK%%  $CHOICE: %%$CHOICE%%][CMD][IA])>"%LIST_FOLDER%\%NEW_NAME%.list"
START NOTEPAD.EXE "%LIST_FOLDER%\%NEW_NAME%.list"
EXIT /B
:LIST_COMMAND_CREATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             Command Type&&ECHO.&&ECHO. (%##%1%$$%) Non-registry command - %XLR4%hives always remain unmounted%$$%&&ECHO. (%##%2%$$%) Registry command - %XLR4%hives mounted when target is a virtual disk%$$%&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "QUIET="&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF NOT "%SELECTY%"=="1" IF NOT "%SELECTY%"=="2" EXIT /B
IF "%SELECTY%"=="1" SET "COMMAND_TYPE=CMD"
IF "%SELECTY%"=="2" SET "COMMAND_TYPE=REG"
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Elevation&&ECHO.&&ECHO. (%##%1%$$%) Run as User&&ECHO. (%##%2%$$%) Run as System&&ECHO. (%##%3%$$%) Run as TrustedInstaller&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTZ"&&CALL:MENU_SELECT
IF NOT "%SELECTZ%"=="1" IF NOT "%SELECTZ%"=="2" IF NOT "%SELECTZ%"=="3" EXIT /B
IF "%SELECTZ%"=="1" SET "COMMAND_TYPE=%COMMAND_TYPE%"
IF "%SELECTZ%"=="2" SET "COMMAND_TYPE=%COMMAND_TYPE%_RAS"
IF "%SELECTZ%"=="3" SET "COMMAND_TYPE=%COMMAND_TYPE%_RATI"
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              Announcement&&ECHO.&&ECHO. (%##%1%$$%) Announcement normal&&ECHO. (%##%2%$$%) Announcement quiet&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTY"&&CALL:MENU_SELECT
IF NOT "%SELECTY%"=="1" IF NOT "%SELECTY%"=="2" EXIT /B
IF "%SELECTY%"=="1" SET "COMMAND_ENTRY=COMMAND"
IF "%SELECTY%"=="2" SET "COMMAND_ENTRY=COMMANDQ"
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&CALL:MOUNT_CLEAR
ECHO.%XLR2%Important:%$$% Do not use any of these symbols directly [%XLR2% ^< ^> ^| [ ] ^& ^^ %$$%].&&ECHO.    These can cause the program to crash when the list is accessed.&&ECHO.%XLR5%Substitutions: %XLR2%^<%$$%=%XLR5%%{% %XLR2%^>%$$%=%XLR5%%}% %XLR2%^>^>%$$%=%XLR5%%}}% %XLR2%^|%$$%=%XLR5%%-% %XLR2%^[%$$%=%XLR5%%LB% %XLR2%^]%$$%=%XLR5%%RB% %XLR2%^&%$$%=%XLR5%%+% %XLR2%^^%$$%=%XLR5%%@%%$$%
ECHO.   To quiet command execution, put %XLR5%%}%NUL%$$% at the end of the command.&&ECHO.    If complex commands are required, launch an additional script.&&ECHO.&&ECHO.                           %@@%Built-in variables:%$$%&&ECHO.                       %%DRVTAR%% %%WINTAR%% %%USRTAR%%&&ECHO.                %%HIVE_SOFTWARE%% %%HIVE_SYSTEM%% %%HIVE_USER%%&&ECHO.      %%IMAGE_FOLDER%% %%LIST_FOLDER%% %%PACK_FOLDER%% %%CACHE_FOLDER%%&&ECHO.               %%PROG_SOURCE%% %%PKX_FOLDER%% %%APPLY_TARGET%%&&ECHO.&&ECHO.                             %@@%ENTER COMMAND:%$$%&&ECHO.
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=MOST"&&SET "VERBOSE=1"&&SET "$SELECT=COMMANDX"&&SET "$CASE=ANY"&&CALL:MENU_SELECT
CALL:MOUNT_REST&&IF NOT DEFINED COMMANDX EXIT /B
CALL:LIST_TIME
IF NOT DEFINED LIST_TIME EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="0" CALL:LIST_MAKE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&ECHO.&&CALL:MOUNT_CLEAR
FOR /F "TOKENS=1* DELIMS=" %%1 IN ("%COMMANDX%") DO (ECHO. %@@%%COMMAND_ENTRY%%$$% %%1 %@@%%COMMAND_TYPE%%$$% %##%%LIST_TIME%%$$%
ECHO.[%COMMAND_ENTRY%][%%1][%COMMAND_TYPE%][%LIST_TIME%]>>"%$PICK%")
CALL:MOUNT_REST&&ECHO.&&CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_GROUP_BOUNDRY
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter new group name&&ECHO.         Note: %@@%Place this entry at the start of the group%$$%&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=GRP_NAME"&&SET "$CASE=ANY"&&CALL:MENU_SELECT
IF NOT DEFINED GRP_NAME EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter subgroup name&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=GRP_SUB"&&SET "$CASE=ANY"&&CALL:MENU_SELECT
IF NOT DEFINED GRP_SUB EXIT /B
CALL:PAD_LINE&&ECHO.       Choose subgroup color: [ %XLR0% 0 %XLR1% 1 %XLR2% 2 %XLR3% 3 %XLR4% 4 %XLR5% 5 %XLR6% 6 %XLR7% 7 %XLR8% 8 %XLR9% 9 %$$% ]&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=COLOR_XYZ"&&CALL:MENU_SELECT
IF NOT DEFINED COLOR_XYZ EXIT /B
SET "$GO="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%COLOR_XYZ%"=="%%a" SET "$GO=1")
IF NOT DEFINED $GO SET "COLOR_XYZ="&&ECHO. %XLR2%ERROR&&EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter subgroup comment&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&ECHO.                        Press (%##%Enter%$$%) for none&&SET "$SELECT=GRP_COM"&&SET "$CASE=ANY"&&CALL:MENU_SELECT
IF DEFINED GRP_COM CALL:PAD_LINE&&ECHO.       Choose comment color: [ %XLR0% 0 %XLR1% 1 %XLR2% 2 %XLR3% 3 %XLR4% 4 %XLR5% 5 %XLR6% 6 %XLR7% 7 %XLR8% 8 %XLR9% 9 %$$% ]&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=COLOR_123"&&CALL:MENU_SELECT
IF DEFINED GRP_COM IF NOT DEFINED COLOR_123 EXIT /B
IF DEFINED GRP_COM SET "$GO="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%COLOR_123%"=="%%a" SET "$GO=1")
IF DEFINED GRP_COM IF NOT DEFINED $GO SET "COLOR_123="&&ECHO. %XLR2%ERROR&&EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="0" CALL:LIST_MAKE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&ECHO.&&CALL ECHO. GROUP %GRP_NAME% %%XLR%COLOR_XYZ%%%%GRP_SUB%%$$% %%XLR%COLOR_123%%%%GRP_COM%%$$%
IF DEFINED GRP_COM ECHO.[GROUP][%GRP_NAME%][%%COLOR%COLOR_XYZ%%%%GRP_SUB%][%%COLOR%COLOR_123%%%%GRP_COM%]>>"%$PICK%"
IF NOT DEFINED GRP_COM ECHO.[GROUP][%GRP_NAME%][%%COLOR%COLOR_XYZ%%%%GRP_SUB%]>>"%$PICK%"
ECHO.&&CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_GROUP_CONVERT
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=LIST"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
COPY /Y "%$PICK%" "$LST">NUL
SET "ISGROUP="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%1 in ($LST) DO (IF "%%1"=="GROUP" SET "ISGROUP=1")
IF "%$HEAD%"=="MULTI-LIST" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                  List cannot be a multi list. Abort.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED&EXIT /B
IF NOT DEFINED ISGROUP CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                List does not contain any groups. Abort.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED&EXIT /B
SET "$LST2=%$PICK%"&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                   Enter name of new group base list&&ECHO.&&ECHO.Note: This converts an execution list (.list) into a base list (.base)&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
SET "$LST1=%LIST_FOLDER%\%NEW_NAME%.base"
CALL:PAD_ADD&&SET "COMBINE_HEAD=BASE-GROUP"&&CALL:LIST_COMBINE&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:LIST_PROMPT_CREATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.            Enter the message for the prompt: [ %@@%A-Z 0-9%$$% ]&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CASE=ANY"&&SET "$SELECT=PROMPT_XYZ"&&CALL:MENU_SELECT
IF NOT DEFINED PROMPT_XYZ EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                     Select a var number: [ %@@%0-9%$$% ]&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CASE=ANY"&&SET "$SELECT=VAR_XYZ"&&CALL:MENU_SELECT
IF NOT DEFINED VAR_XYZ EXIT /B
SET "$GO="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%VAR_XYZ%"=="%%a" SET "$GO=1")
ECHO.&&IF NOT DEFINED $GO ECHO. %XLR2%ERROR%$$%&&EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="0" CALL:LIST_MAKE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&ECHO.&&ECHO. %@@%PROMPT%VAR_XYZ%%$$% %PROMPT_XYZ% %##%VAR%VAR_XYZ%%$$%&&ECHO.[PROMPT%VAR_XYZ%][%PROMPT_XYZ%][VAR%VAR_XYZ%]>>"%$PICK%"
ECHO.&&CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_PACK_CREATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE PACKAGEs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.PKX"&&CALL:FILE_LIST&&FOR %%X IN (CAB MSU APPX APPXBUNDLE MSIXBUNDLE) DO (SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.%%X"&&SET "$APPEND=1"&&CALL:FILE_LIST)
ECHO.&&ECHO.                         Multiples OK ( %##%1 2 3%$$% )&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=PACK"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED SELECT EXIT /B
CALL:LIST_TIME
IF NOT DEFINED LIST_TIME EXIT /B
SET "LIST_ITEM=EXTPACKAGE"&&SET "LIST_ACTN=INSTALL"&&FOR %%a in (%SELECT%) DO (IF NOT "%%a"=="" CALL SET "LIST_WRITE=[%%$ITEM%%a%%]"&&CALL:LIST_WRITE)
SET "LIST_ITEM="&&SET "LIST_ACTN="&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs:%$$%&&ECHO.&&ECHO. ( %##%0%$$% ) Create new list&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="0" CALL:LIST_MAKE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&SET "COMBINE_HEAD=EXEC-LIST"&&SET "$LST1=%$PICK%"&&CALL:LIST_COMBINE
CALL:PAD_END&&CALL:PAUSED
EXIT /B
:LIST_TIME
SET "LIST_TIME="&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Time of Action&&ECHO.&&ECHO. (%##%1%$$%) Image Apply      %@@%IA%$$% - Action is immediate&&ECHO. (%##%2%$$%) Setup Complete   %@@%SC%$$% - Before user logon&&ECHO. (%##%3%$$%) Run Once         %@@%RO%$$% - Upon user logon&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTZ"&&CALL:MENU_SELECT
IF "%SELECTZ%"=="1" SET "LIST_TIME=IA"
IF "%SELECTZ%"=="2" SET "LIST_TIME=SC"
IF "%SELECTZ%"=="3" SET "LIST_TIME=RO"
EXIT /B
:LIST_DIFFERENCER
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Base Difference&&ECHO.&&ECHO.  %@@%AVAILABLE BASEs:%$$%&&ECHO.&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED $PICK EXIT /B
IF "%$HEAD%"=="BASE-GROUP" ECHO.&&ECHO.%XLR4%Incompatible:%$$% Base list is a group base. Abort.&&ECHO.&&CALL:PAUSED&EXIT /B
SET "$LST1=%$PICK%"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Base Difference&&ECHO.&&ECHO.  %@@%AVAILABLE BASEs:%$$%&&ECHO.&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED $PICK EXIT /B
IF "%$HEAD%"=="BASE-GROUP" ECHO.&&ECHO.%XLR4%Incompatible:%$$% Base list is a group base. Abort.&&ECHO.&&CALL:PAUSED&EXIT /B
SET "$LST2=%$PICK%"&&CALL:PAD_SAME
IF "%$LST1%"=="%$LST2%" EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter name of new list&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
CALL:PAD_LINE&&ECHO.Differencing [%$LST1%] and [%$LST2%]...&&CALL:PAD_LINE
COPY /Y "%$LST1%" "$LST2">NUL
COPY /Y "%$LST2%" "$LST1">NUL
ECHO.EXEC-LIST>"%LIST_FOLDER%\%NEW_NAME%.list"
FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%a in ($LST1) DO (SET "$X0$="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS=[]" %%1 in ($LST2) DO (IF "[%%1:%%2]"=="[%%a:%%b]" SET "$X0$=1")
IF "%%a"=="APPX" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][DELETE][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="COMPONENT" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][DELETE][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="CAPABILITY" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][DELETE][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="FEATURE" IF DEFINED $X0$ CALL ECHO.[%%a][%%b][DISABLE][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="FEATURE" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][ABSENT]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="SERVICE" IF DEFINED $X0$ CALL ECHO.[%%a][%%b][%%c][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="SERVICE" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][DELETE][IA]>>"%LIST_FOLDER%\%NEW_NAME%.list"
IF "%%a"=="TASK" IF NOT DEFINED $X0$ CALL ECHO.[%%a][%%b][DELETE][IA][RAS]>>"%LIST_FOLDER%\%NEW_NAME%.list")
SET "$LST1="&&SET "$LST2="&&IF EXIST "$LST*" DEL /F $LST*>NUL
CALL:PAUSED
EXIT /B
:LIST_BASE_CREATE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             List Builder&&ECHO.&&ECHO. (%##%*%$$%) All base list items&&ECHO. (%##%1%$$%) Appx&&ECHO. (%##%2%$$%) Feature&&ECHO. (%##%3%$$%) Component&&ECHO. (%##%4%$$%) Capability&&ECHO. (%##%5%$$%) Service&&ECHO. (%##%6%$$%) Task&&ECHO. (%##%7%$$%) Driver&&ECHO.&&ECHO.                         Multiples OK ( %##%1 2 3%$$% )&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=BASE_CHOICE"&&SET "$CASE=ANY"&&CALL:MENU_SELECT
IF "%BASE_CHOICE%"=="*" SET "BASE_CHOICE=1 4 2 5 6 7 3"
SET "$GO="&&FOR /F "TOKENS=1" %%a IN ("%BASE_CHOICE%") DO (FOR %%1 IN (1 2 3 4 5 6 7) DO (IF "%%a"=="%%1" SET "$GO=1"))
IF NOT DEFINED $GO EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                   Choose a source to generate base&&ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%@%$$% ) %##%Current Environment%$$%&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"
IF NOT DEFINED LIVE_APPLY IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                      Enter name of new base list&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.       %@@%BASE-LIST CREATION START:%$$%  %DATE%  %TIME%&&ECHO.
IF NOT DEFINED LIVE_APPLY SET "VDISK=%$PICK%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT DEFINED LIVE_APPLY IF NOT "%VDISK_SYS%"=="1" ECHO.&&ECHO.             %##%Vdisk error or Windows not installed on Vdisk.%$$%&&ECHO.&&CALL:VDISK_DETACH&&GOTO:LIST_BASE_CLEANUP
ECHO. %@@%GETTING VERSION%$$%..&&ECHO.&&CALL:IF_LIVE_MIX
SET "INFO_E="&&SET "INFO_V="&&ECHO.BASE-LIST>"%LIST_FOLDER%\%NEW_NAME%.base"
FOR /F "TOKENS=1-9 DELIMS=: " %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-CURRENTEDITION 2^>NUL') DO (
IF "%%a %%b"=="Image Version" SET "INFO_V=%%c"
IF "%%a %%b"=="Current Edition" IF NOT "%%c"=="is" SET "INFO_E=%%c")
FOR %%a in (INFO_V INFO_E) DO (IF NOT DEFINED %%a SET "%%a=NULL")
ECHO.Version %@@%%INFO_V%%$$% Edition %@@%%INFO_E%%$$%&&ECHO.Version %INFO_V% Edition %INFO_E% >>"%LIST_FOLDER%\%NEW_NAME%.base"
FOR %%$ IN (%BASE_CHOICE%) DO (
IF "%%$"=="1" CALL:GET_BASE_APPX
IF "%%$"=="2" CALL:GET_BASE_FEATURE
IF "%%$"=="3" CALL:GET_BASE_COMPONENT
IF "%%$"=="4" CALL:GET_BASE_CAPABILITY
IF "%%$"=="5" CALL:GET_BASE_SERVICE
IF "%%$"=="6" CALL:GET_BASE_TASK
IF "%%$"=="7" CALL:GET_BASE_DRIVER)
SET "BASE_WRITE="&&SET "BASE_WRITELST="&&CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
:LIST_BASE_CLEANUP
ECHO.&&ECHO.        %@@%BASE-LIST CREATION END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:CLEAN&&CALL:PAUSED
EXIT /B
:GET_BASE_APPX
ECHO.&&ECHO. %@@%GETTING APPX LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=APPX"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_EXT
SET "LIST_ACTN=STANDARD"&&FOR /F "TOKENS=9* DELIMS=\" %%a in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Applications" 2^>NUL') DO (FOR /F "TOKENS=1-1* DELIMS=_" %%1 in ("%%a") DO (SET "BASE_WRITE=%%1"&&CALL:BASE_WRITE))
SET "LIST_ACTN=INBOXED"&&FOR /F "TOKENS=9* DELIMS=\" %%a in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\InboxApplications" 2^>NUL') DO (FOR /F "TOKENS=1-1* DELIMS=_" %%1 in ("%%a") DO (SET "BASE_WRITE=%%1"&&CALL:BASE_WRITE))
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_FEATURE
ECHO.&&ECHO. %@@%GETTING FEATURE LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=FEATURE"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_MIX
FOR /F "TOKENS=1-9 DELIMS=|: " %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-FEATURES /FORMAT:TABLE 2^>NUL') DO (
IF "%%b"=="Enabled" SET "LIST_ACTN=ENABLE"&&SET "BASE_WRITE=%%a"&&CALL:BASE_WRITE
IF "%%b"=="Disabled" SET "LIST_ACTN=DISABLE"&&SET "BASE_WRITE=%%a"&&CALL:BASE_WRITE)
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_COMPONENT
ECHO.&&ECHO. %@@%GETTING COMPONENT LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=COMPONENT"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_EXT
FOR /F "TOKENS=8* DELIMS=\" %%a in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" 2^>NUL') DO (FOR /F "TOKENS=1-1* DELIMS=~" %%1 in ("%%a") DO (SET "BASE_WRITE=%%1"&&CALL:BASE_WRITE))
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_CAPABILITY
ECHO.&&ECHO. %@@%GETTING CAPABILITY LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=CAPABILITY"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_MIX
FOR /F "TOKENS=1-2 DELIMS=|: " %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-CAPABILITIES /FORMAT:TABLE 2^>NUL') DO (
IF "%%b"=="Installed" SET "BASE_WRITE=%%a"&&CALL:BASE_WRITE)
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_SERVICE
ECHO.&&ECHO. %@@%GETTING SERVICE LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=SERVICE"&&CALL:IF_LIVE_EXT
FOR /F "TOKENS=1-4* DELIMS=\" %%a in ('REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services" 2^>NUL') DO (FOR /F "TOKENS=1-9 DELIMS= " %%1 in ('REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%%e" 2^>NUL') DO (SET "BASE_WRITE=%%e"
IF "%%1"=="Start" IF "%%3"=="0x2" SET "LIST_ACTN=AUTO"
IF "%%1"=="Start" IF "%%3"=="0x3" SET "LIST_ACTN=MANUAL"
IF "%%1"=="Start" IF "%%3"=="0x4" SET "LIST_ACTN=DISABLE"
IF "%%1"=="Type" IF "%%3"=="0x10" CALL:BASE_WRITE
IF "%%1"=="Type" IF "%%3"=="0x20" CALL:BASE_WRITE
IF "%%1"=="Type" IF "%%3"=="0x60" CALL:BASE_WRITE
IF "%%1"=="Type" IF "%%3"=="0x110" CALL:BASE_WRITE))
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_TASK
ECHO.&&ECHO. %@@%GETTING TASK LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=TASK"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_EXT
FOR /F "TOKENS=1-3* DELIMS= " %%a in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree" /f ID /e /s 2^>NUL') DO (IF "%%b"=="REG_SZ" IF NOT "%%c"=="" FOR /F "TOKENS=2* DELIMS=\ " %%1 in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\%%c" /f PATH /e /s 2^>NUL') DO (IF "%%1"=="REG_SZ" IF NOT "%%2"=="" SET "BASE_WRITE=%%2"&&CALL:BASE_WRITE))
SET "BASE_WRITELST="&&EXIT /B
:GET_BASE_DRIVER
ECHO.&&ECHO. %@@%GETTING DRIVER LISTING%$$%..&&ECHO.&&SET "LIST_ITEM=DRIVER"&&SET "LIST_ACTN=PRESENT"&&CALL:IF_LIVE_MIX
SET "DRIVER_NAME="&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS=: " %%a in ('DISM /ENGLISH /%APPLY_TARGET% /GET-DRIVERS 2^>NUL') DO (
IF "%%a %%b"=="Published Name" SET "DRIVER_INF=%%c"
IF "%%a %%b %%c"=="Original File Name" SET "DRIVER_NAME=%%d"&&SET "BASE_WRITE=%%d"
IF "%%a %%b"=="Class Name" SET "DRIVER_CLS=%%c"
IF "%%a"=="Version" SET "DRIVER_VER=%%b"&&CALL:BASE_WRITE)
IF NOT DEFINED DRIVER_NAME ECHO. No 3rd party drivers installed.
SET "BASE_WRITELST="&&EXIT /B
:BASE_WRITE
IF DEFINED BASE_WRITE IF DEFINED BASE_WRITELST IF "%BASE_WRITE%"=="%BASE_WRITELST%" EXIT /B
CALL SET "BASE_WRITELST=%BASE_WRITE%"&&CALL ECHO. %@@%%LIST_ITEM%%$$% %BASE_WRITE% %@@%%LIST_ACTN%%$$%&&CALL ECHO.[%LIST_ITEM%][%BASE_WRITE%][%LIST_ACTN%]>>"%LIST_FOLDER%\%NEW_NAME%.base"
EXIT /B
:LIST_COMBINE
IF DEFINED $LST1 COPY /Y "%$LST1%" "$LST1">NUL
IF DEFINED $LST2 COPY /Y "%$LST2%" "$LST2">NUL
ECHO.%COMBINE_HEAD%>"$LST3"
SET "COMBINE_HEAD="&&CALL:MOUNT_CLEAR&&CALL:VAR_CLEAR&&ECHO.
IF EXIST "$LST1" FOR /F "TOKENS=1-9 DELIMS=[]" %%a in ($LST1) DO (
IF NOT "%%a"=="" IF "%%b"=="" IF NOT "%%a"=="MULTI-LIST" IF NOT "%%a"=="EXEC-LIST" IF NOT "%%a"=="BASE-LIST" IF NOT "%%a"=="BASE-GROUP" ECHO.[%%a]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF "%%c"=="" ECHO.[%%a][%%b]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF "%%d"=="" ECHO.[%%a][%%b][%%c]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF "%%e"=="" ECHO.[%%a][%%b][%%c][%%d]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF NOT "%%e"=="" ECHO.[%%a][%%b][%%c][%%d][%%e]>>"$LST3")
IF EXIST "$LST2" FOR /F "TOKENS=1-9 DELIMS=[]" %%a in ($LST2) DO (
IF NOT "%%a"=="" IF "%%b"=="" IF NOT "%%a"=="MULTI-LIST" IF NOT "%%a"=="EXEC-LIST" IF NOT "%%a"=="BASE-LIST" IF NOT "%%a"=="BASE-GROUP" ECHO.[%%a]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF "%%c"=="" ECHO.[%%a][%%b]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF "%%d"=="" ECHO.[%%a][%%b][%%c]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF "%%e"=="" ECHO.[%%a][%%b][%%c][%%d]>>"$LST3"
IF NOT "%%a"=="" IF NOT "%%b"=="" IF NOT "%%c"=="" IF NOT "%%d"=="" IF NOT "%%e"=="" ECHO.[%%a][%%b][%%c][%%d][%%e]>>"$LST3"
IF NOT "%%a"=="EXEC-LIST" IF NOT "%%a"=="MULTI-LIST" IF NOT "%%a"=="BASE-LIST" IF NOT "%%a"=="BASE-GROUP" ECHO.  %@@%%%a%$$% %%b %@@%%%c%$$% %##%%%d%$$% %##%%%e%$$%)
IF EXIST "$LST2" ECHO.
COPY /Y "$LST3" "%$LST1%">NUL
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (SET "COLOR%%a=")
CALL:MOUNT_REST&&SET "$LST1="&&SET "$LST2="&&SET "$LST3="&&IF EXIST "$LST*" DEL /F "$LST*">NUL
EXIT /B
:LIST_WRITE
FOR /F "TOKENS=1-9 DELIMS=[]" %%1 IN ("%LIST_WRITE%") DO (
IF "%LIST_ITEM%"=="EXTPACKAGE" CALL ECHO.[EXTPACKAGE][%%1][%LIST_ACTN%][%LIST_TIME%]>>"$LST2"
IF NOT "%LIST_ITEM%"=="EXTPACKAGE" IF "%%1"=="%LIST_ITEM%" CALL ECHO.[%%1][%%2][%LIST_ACTN%][%LIST_TIME%]>>"$LST2")
EXIT /B
:PAD_SAME
IF "%$LST1%"=="%$PICK%" CALL:PAD_LINE&&ECHO.%@@%%$LST1%%$$% and %@@%%$PICK%%$$% are the same...&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:PAD_ADD
CLS&&CALL:PAD_LINE&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.                   The following items were appended:
EXIT /B
:PAD_END
SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAD_LINE
EXIT /B
:LIST_ITEMS
SET LIST_ITEMS1=APPX FEATURE COMPONENT CAPABILITY SERVICE TASK WINSXS DRIVER EXTPACKAGE COMMAND COMMANDQ PICK MOUNT UNMOUNT CONFIRM
SET LIST_ITEMS2=PROMPT0 PROMPT1 PROMPT2 PROMPT3 PROMPT4 PROMPT5 PROMPT6 PROMPT7 PROMPT8 PROMPT9 GROUP
EXIT /B
:IF_LIVE_EXT
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF DEFINED LIVE_APPLY IF NOT DEFINED CUR_SID IF "%PROG_MODE%"=="COMMAND" CALL:MOUNT_USR
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
EXIT /B
:IF_LIVE_MIX
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
EXIT /B
:MOUNT_INT
FOR /F "TOKENS=1 DELIMS=\" %%X in ('REG QUERY "HKLM\$SOFTWARE" /VE 2^>NUL') DO (IF "%%X"=="HKEY_LOCAL_MACHINE" SET "MOUNT=")
IF "%MOUNT%"=="INT" EXIT /B
SET "HIVE_USER=HKCU"&&REG UNLOAD HKU\$ALLUSER>NUL 2>&1
SET "HIVE_SOFTWARE=HKLM\SOFTWARE"&&REG UNLOAD HKLM\$SOFTWARE>NUL 2>&1
SET "HIVE_SYSTEM=HKLM\SYSTEM"&&REG UNLOAD HKLM\$SYSTEM>NUL 2>&1
SET "MOUNT=INT"&&SET "APPLYDIR_MASTER=%SYSTEMDRIVE%"&&SET "CAPTUREDIR_MASTER=%SYSTEMDRIVE%"
SET "APPLY_TARGET=ONLINE"&&SET "DRVTAR=%SYSTEMDRIVE%"&&SET "WINTAR=%WINDIR%"&&SET "USRTAR=%USERPROFILE%"
IF DEFINED CUR_SID SET "HIVE_USER=HKU\%CUR_SID%"
EXIT /B
:MOUNT_USR
IF "%MOUNT%"=="USR" EXIT /B
SET "MOUNT=USR"&&SET "HIVE_USER=HKU\$ALLUSER"&&REG UNLOAD HKU\$ALLUSER>NUL 2>&1
SET "USRTAR=%SYSTEMDRIVE%\Users\Default"&&REG LOAD HKU\$ALLUSER "%SYSTEMDRIVE%\Users\Default\Ntuser.dat">NUL 2>&1
EXIT /B
:MOUNT_EXT
SET "$GO="&&FOR /F "TOKENS=1 DELIMS=\" %%X in ('REG QUERY "HKLM\$SOFTWARE" /VE 2^>NUL') DO (IF "%%X"=="HKEY_LOCAL_MACHINE" SET "$GO=1")
IF NOT DEFINED $GO SET "MOUNT="
IF "%MOUNT%"=="EXT" EXIT /B
SET "MOUNT=EXT"&&REG UNLOAD HKU\$ALLUSER>NUL 2>&1
SET "APPLYDIR_MASTER=%VDISK_LTR%:"&&REG UNLOAD HKLM\$SOFTWARE>NUL 2>&1
SET "CAPTUREDIR_MASTER=%VDISK_LTR%:"&&REG UNLOAD HKLM\$SYSTEM>NUL 2>&1
SET "APPLY_TARGET=IMAGE:%VDISK_LTR%:"&&SET "DRVTAR=%VDISK_LTR%:"&&SET "WINTAR=%VDISK_LTR%:\Windows"&&SET "USRTAR=%VDISK_LTR%:\Users\Default"
SET "HIVE_USER=HKU\$ALLUSER"&&REG LOAD HKU\$ALLUSER "%VDISK_LTR%:\Users\Default\Ntuser.dat">NUL 2>&1
SET "HIVE_SOFTWARE=HKLM\$SOFTWARE"&&REG LOAD HKLM\$SOFTWARE "%VDISK_LTR%:\WINDOWS\SYSTEM32\Config\SOFTWARE">NUL 2>&1
SET "HIVE_SYSTEM=HKLM\$SYSTEM"&&REG LOAD HKLM\$SYSTEM "%VDISK_LTR%:\WINDOWS\SYSTEM32\Config\SYSTEM">NUL 2>&1
EXIT /B
:MOUNT_MIX
FOR /F "TOKENS=1 DELIMS=\" %%X in ('REG QUERY "HKLM\$SOFTWARE" /VE 2^>NUL') DO (IF "%%X"=="HKEY_LOCAL_MACHINE" SET "MOUNT=")
IF "%MOUNT%"=="MIX" EXIT /B
SET "HIVE_USER=HKCU"&&REG UNLOAD HKU\$ALLUSER>NUL 2>&1
SET "HIVE_SOFTWARE=HKLM\SOFTWARE"&&REG UNLOAD HKLM\$SOFTWARE>NUL 2>&1
SET "HIVE_SYSTEM=HKLM\SYSTEM"&&REG UNLOAD HKLM\$SYSTEM>NUL 2>&1
SET "MOUNT=MIX"&&SET "APPLYDIR_MASTER=%VDISK_LTR%:"&&SET "CAPTUREDIR_MASTER=%VDISK_LTR%:"
SET "APPLY_TARGET=IMAGE:%VDISK_LTR%:"&&SET "DRVTAR=%VDISK_LTR%:"&&SET "WINTAR=%VDISK_LTR%:\Windows"&&SET "USRTAR=%VDISK_LTR%:\Users\Default"
EXIT /B
::#########################################################################
:PACKAGE_CREATOR
::#########################################################################
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Package Creator&&ECHO.
IF NOT DEFINED PROJ_SLOT SET "PROJ_SLOT=1"
SET "MAKER_FOLDER=%PROG_SOURCE%\Project%PROJ_SLOT%"
ECHO.  %@@%PACKAGE CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%MAKER_FOLDER%"&&SET "$FILT=*.*"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
IF EXIST "%MAKER_FOLDER%\*" ECHO. (%##%X%$$%) Project%@@% %PROJ_SLOT%%$$%  (%##%N%$$%)ew  (%##%C%$$%)reate  (%##%R%$$%)estore  (%##%E%$$%)dit  (%##%D%$$%)river Export&&CALL:PAD_LINE
IF NOT EXIST "%MAKER_FOLDER%\*" ECHO. (%##%X%$$%) Project%@@% %PROJ_SLOT%%$$%        (%##%N%$$%)ew        (%##%R%$$%)estore        (%##%D%$$%)river Export&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF DEFINED MENU_EXIT GOTO:COMMAND_INTERNAL_END
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="N" CALL:PROJ_NEW&SET "SELECT="
IF "%SELECT%"=="D" CALL:DRVR_EXPORT&SET "SELECT="
IF "%SELECT%"=="C" CALL:PROJ_CREATE&SET "SELECT="
IF "%SELECT%"=="R" CALL:PROJ_RESTORE&SET "SELECT="
IF "%SELECT%"=="X" SET /A "PROJ_SLOT+=1"&&IF "%PROJ_SLOT%" GEQ "5" SET "PROJ_SLOT=1"
IF "%SELECT%"=="E" CALL:PROJ_EDIT&SET "SELECT="
GOTO:PACKAGE_CREATOR
:DRVR_EXPORT
IF NOT EXIST "%MAKER_FOLDER%\*" SET "EDIT_SKIP=1"&&CALL:PROJ_NEW
IF DEFINED ERROR EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             Driver Export&&ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%@%$$% ) %##%Current Environment%$$%&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"
IF NOT DEFINED LIVE_APPLY IF NOT DEFINED $PICK EXIT /B
CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.           %@@%DRIVER-EXPORT START:%$$%  %DATE%  %TIME%&&ECHO.
IF DEFINED LIVE_APPLY ECHO. Using live system for driver export.
IF NOT DEFINED LIVE_APPLY SET "VDISK=%$PICK%"&&CALL:VDISK_ATTACH
CALL:IF_LIVE_MIX
IF NOT EXIST "%MAKER_FOLDER%\driver" MD "%MAKER_FOLDER%\driver">NUL 2>&1
IF EXIST "%MAKER_FOLDER%\driver" DISM /ENGLISH /%APPLY_TARGET% /EXPORT-DRIVER /destination:"%MAKER_FOLDER%\driver"
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
ECHO.&&ECHO.            %@@%DRIVER-EXPORT END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAUSED
EXIT /B
:PROJ_EDIT
FOR %%a in (package.cmd package.list) DO (IF EXIST "%MAKER_FOLDER%\%%a" START NOTEPAD.EXE "%MAKER_FOLDER%\%%a")
EXIT /B
:PROJ_RESTORE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Package Extract&&ECHO.&&ECHO.  %@@%AVAILABLE PKXs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.PKX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." SET "FILE_TYPE=PKX"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
CALL:PROJ_CLEAR
IF DEFINED ERROR EXIT /B
CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.          %@@%PACKAGE RESTORE START:%$$%  %DATE%  %TIME%
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%$PICK%" /INDEX:1 /APPLYDIR:"%MAKER_FOLDER%"
IF NOT EXIST "%MAKER_FOLDER%\package.list" ECHO. %XLR2%ERROR:%$$% Package is either missing package.list or unable to extract.&&RD /S /Q "%MAKER_FOLDER%">NUL 2>&1
ECHO.&&ECHO.           %@@%PACKAGE RESTORE END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAUSED
EXIT /B
:PROJ_CREATE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&IF NOT EXIST "%MAKER_FOLDER%\*" ECHO.                     %XLR4%ERROR:%$$% Package folder is empty.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED&EXIT /B
ECHO.                      Enter new %@@%.PKX%$$% package name&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&SET "$SELECT=PACKNAME"&&SET "$CASE=ANY"&&CALL:PAD_PREV&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED PACKNAME EXIT /B
CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.           %@@%PACKAGE CREATE START:%$$%  %DATE%  %TIME%
DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%MAKER_FOLDER%" /IMAGEFILE:"%PACK_FOLDER%\%PACKNAME%.pkx" /COMPRESS:%COMPRESS% /NAME:"PKX" /CheckIntegrity /Verify
ECHO.&&ECHO.            %@@%PACKAGE CREATE END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAUSED
EXIT /B
:PROJ_NEW
SET "PKX_FOLDER="&&CALL:PROJ_CLEAR
IF DEFINED ERROR SET "EDIT_SKIP="&&EXIT /B
SET "PKX_FOLDER=%PKX_FOLDER%"&&MD "%MAKER_FOLDER%\driver">NUL
(ECHO.EXEC-LIST&&ECHO.&&ECHO.Delete the driver list entry below and driver folder if there aren't drivers included in the package.&&ECHO.[DRIVER]["%%PKX_FOLDER%%\driver"][INSTALL][IA]&&ECHO.&&ECHO.Delete the command list entry below and package.cmd if a script is not needed.&&ECHO.[COMMAND][CMD /C "%%PKX_FOLDER%%\package.cmd"][CMD][IA]&&ECHO.&&ECHO.Manually add, copy and paste items, or replace this package.list with an existing execution list.&&ECHO.Copy any listed items such as scripts, installers, appx, cab, and msu packages into the project folder before package creation.)>"%MAKER_FOLDER%\package.list"
(ECHO.::================================================&&ECHO.::These variables are built in and can help&&ECHO.::keep a script consistant throughout the entire&&ECHO.::process, whether applying to a vhdx or live.&&ECHO.::Add any files to package folder before creating.&&ECHO.::================================================&&ECHO.::Windows folder :    %%WINTAR%%&&ECHO.::Drive root :        %%DRVTAR%%&&ECHO.::User or defuser :   %%USRTAR%%&&ECHO.::HKLM\SOFTWARE :     %%HIVE_SOFTWARE%%&&ECHO.::HKLM\SYSTEM :       %%HIVE_SYSTEM%%&&ECHO.::HKCU or defuser :   %%HIVE_USER%%&&ECHO.::DISM target :       %%APPLY_TARGET%%&&ECHO.::==================START OF PACK=================&&ECHO.&&ECHO.@ECHO OFF&&ECHO.REM "%%PKX_FOLDER%%\example.msi" /quiet /noprompt&&ECHO.&&ECHO.::===================END OF PACK==================)>"%MAKER_FOLDER%\package.cmd"
IF NOT DEFINED EDIT_SKIP CALL:PROJ_EDIT
SET "EDIT_SKIP="&&EXIT /B
:PROJ_CLEAR
IF DEFINED MENU_SKIP GOTO:PROJ_CLEAR_SKIP
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                   Project %@@%%PROJ_SLOT%%$$% folder will be cleared&&ECHO.&&ECHO.                         Press (%##%X%$$%) to proceed&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF NOT "%CONFIRM%"=="X" SET "ERROR=PROJ_CLEAR"&&CALL:DEBUG&&EXIT /B
:PROJ_CLEAR_SKIP
IF EXIST "%MAKER_FOLDER%" SET "FOLDER_DEL=%MAKER_FOLDER%"&&CALL:FOLDER_DEL
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
EXIT /B
::#########################################################################
:FILE_MANAGER
::#########################################################################
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            File Management&&ECHO.
IF NOT DEFINED FMGR_DUAL SET "FMGR_DUAL=DISABLED"
IF NOT DEFINED FMGR_SOURCE SET "FMGR_SOURCE=%PROG_SOURCE%"&&SET "FMGR_TARGET=%PROG_SOURCE%"
IF NOT EXIST "%FMGR_SOURCE%\*" SET "FMGR_SOURCE=%PROG_SOURCE%"&&SET "FMGR_TARGET=%PROG_SOURCE%"
IF "%FMGR_DUAL%"=="ENABLED" ECHO.                           %@@%SOURCE%$$% (%##%X%$$%) %@@%TARGET%$$%&&ECHO.&&ECHO.  %@@%TARGET FOLDER:%$$% %FMGR_TARGET%&&ECHO.&&SET "$FOLD=%FMGR_TARGET%"&&SET "$FILT=*.*"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.
ECHO.  %@@%SOURCE FOLDER:%$$% %FMGR_SOURCE%&&ECHO.&&ECHO.  (%##%..%$$%)&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
ECHO. (%##%E%$$%)xplore (%##%N%$$%)ew (%##%O%$$%)pen (%##%C%$$%)opy (%##%M%$$%)ove (%##%R%$$%)ename (%##%D%$$%)elete (%##%#%$$%)Own (%##%V%$$%)iew&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF DEFINED MENU_EXIT GOTO:COMMAND_INTERNAL_END
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="X" CALL:FMGR_SWAP&SET "SELECT="
IF "%SELECT%"=="N" CALL:FMGR_NEW&SET "SELECT="
IF "%SELECT%"=="E" CALL:FMGR_EXPLORE&SET "SELECT="
IF "%SELECT%"=="C" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_COPY&SET "SELECT="
IF "%SELECT%"=="O" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_OPEN&SET "SELECT="
IF "%SELECT%"=="M" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_MOVE&SET "SELECT="
IF "%SELECT%"=="R" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_REN&SET "SELECT="
IF "%SELECT%"=="#" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_OWN&SET "SELECT="
IF "%SELECT%"=="D" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%FOLDER CONTENTS:%$$%&&ECHO.&&SET "$FOLD=%FMGR_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&CALL:FMGR_DEL&SET "SELECT="
IF "%SELECT%"=="V" IF "%FMGR_DUAL%"=="DISABLED" SET "FMGR_DUAL=ENABLED"&SET "SELECT="
IF "%SELECT%"=="V" IF "%FMGR_DUAL%"=="ENABLED" SET "FMGR_DUAL=DISABLED"&SET "SELECT="
IF "%SELECT%"==".." CALL SET "FMGR_SOURCE=%%FMGR_SOURCE_%FMS#%%%"&&CALL SET /A "FMS#-=1"
GOTO:FILE_MANAGER
:FMGR_NEW
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Create which type&&ECHO.&&ECHO. (%##%1%$$%) Folder&&ECHO. (%##%2%$$%) File&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_TYPE"&&CALL:MENU_SELECT
IF NOT "%NEW_TYPE%"=="1" IF NOT "%NEW_TYPE%"=="2" EXIT /B
IF "%NEW_TYPE%"=="1" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                         Enter new folder name&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF "%NEW_TYPE%"=="1" IF NOT DEFINED NEW_NAME EXIT /B
IF "%NEW_TYPE%"=="1" SET "NEW_TYPE="&&MD "%FMGR_SOURCE%\%NEW_NAME%">NUL 2>&1
IF "%NEW_TYPE%"=="2" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                Enter new file name including extension&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF "%NEW_TYPE%"=="2" IF NOT DEFINED NEW_NAME EXIT /B
IF "%NEW_TYPE%"=="2" SET "NEW_TYPE="&&ECHO.>"%FMGR_SOURCE%\%NEW_NAME%"
EXIT /B
:FMGR_REN
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&IF EXIST "%$PICK%\*" ECHO.                         Enter new folder name
IF NOT EXIST "%$PICK%\*" ECHO.                Enter new file name including extension
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=NEW_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED NEW_NAME EXIT /B
ECHO. Renaming %@@%%$PICK%%$$% to %@@%%FMGR_SOURCE%\%NEW_NAME%%$$%.
REN "%$PICK%" "%NEW_NAME%"
EXIT /B
:FMGR_DEL
IF NOT DEFINED $PICK EXIT /B
IF NOT EXIST "%$PICK%\*" DEL /Q /F "\\?\%$PICK%"
IF EXIST "%$PICK%\*" RD /S /Q "\\?\%$PICK%"
IF NOT EXIST "%$PICK%\*" IF NOT EXIST "%$PICK%" ECHO. Deleting %@@%%$PICK%%$$%.
EXIT /B
:FMGR_OPEN
IF NOT DEFINED $PICK EXIT /B
IF NOT EXIST "%$PICK%\*" "%$PICK%"&EXIT /B
IF EXIST "%$PICK%\*" CALL SET /A "FMS#+=1"
CALL SET "FMGR_SOURCE_%FMS#%=%FMGR_SOURCE%"&&CALL SET "FMGR_SOURCE=%$PICK%"
EXIT /B
:FMGR_COPY
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:FMGR_SAME&EXIT /B
IF NOT EXIST "%$PICK%\*" ECHO.Copying %@@%%$PICK%%$$% to %@@%%FMGR_TARGET%%$$%...&&XCOPY "%$PICK%" "%FMGR_TARGET%" /C /Y>NUL 2>&1
IF EXIST "%$PICK%\*" ECHO.Copying %@@%%$PICK%%$$% to %@@%%FMGR_TARGET%%$$%...&&XCOPY "%$PICK%" "%FMGR_TARGET%\%$CHOICE%\" /E /C /I /Y>NUL 2>&1
EXIT /B
:FMGR_SYM
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:FMGR_SAME&EXIT /B
IF EXIST "%$PICK%\*" MKLINK /J "%FMGR_TARGET%\%$CHOICE%" "%$PICK%"
IF NOT EXIST "%$PICK%\*" MKLINK "%FMGR_TARGET%\%$CHOICE%" "%$PICK%"
EXIT /B
:FMGR_MOVE
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:FMGR_SAME&EXIT /B
IF NOT EXIST "%$PICK%\*" ECHO.Moving %@@%%$PICK%%$$% to %@@%%FMGR_TARGET%%$$%...&&MOVE /Y "%$PICK%" "%FMGR_TARGET%">NUL 2>&1
IF EXIST "%$PICK%\*" ECHO.Moving %@@%%$PICK%%$$% to %@@%%FMGR_TARGET%%$$%...&&XCOPY "%$PICK%" "%FMGR_TARGET%\%$CHOICE%\" /E /C /I /Y>NUL 2>&1
IF EXIST "%$PICK%\*" RD /S /Q "\\?\%$PICK%">NUL 2>&1
EXIT /B
:FMGR_OWN
IF NOT DEFINED $PICK EXIT /B
ECHO.
IF NOT EXIST "%$PICK%\*" TAKEOWN /F "%$PICK%"
IF NOT EXIST "%$PICK%\*" ICACLS "%$PICK%" /grant %USERNAME%:F >NUL 2>&1
IF EXIST "%$PICK%\*" TAKEOWN /F "%$PICK%" /R /D Y
IF EXIST "%$PICK%\*" ICACLS "%$PICK%" /grant %USERNAME%:F /T >NUL 2>&1
ECHO.
CALL:PAUSED
EXIT /B
:FMGR_EXPLORE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                       Enter the PATH to explore&&ECHO.&&ECHO.  %@@%AVAILABLE PATHs:%$$%&&ECHO.&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO. ^( %##%%%G%$$% ^) Volume %%G:)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=MOST"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF DEFINED SELECT FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%SELECT%"=="%%G" IF EXIST "%%G:\" SET "FMGR_SOURCE=%SELECT%:"&&EXIT /B)
IF DEFINED SELECT SET "INPUT=%SELECT%"&&SET "OUTPUT=FMGR_SOURCE"&&CALL:SLASH
EXIT /B
:FMGR_SAME
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                       Source/Target are the same..&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_SWAP
IF NOT EXIST "%FMGR_SOURCE%" EXIT /B
IF NOT EXIST "%FMGR_TARGET%" EXIT /B
SET "FMGR_SOURCE=%FMGR_TARGET%"&&SET "FMGR_TARGET=%FMGR_SOURCE%"
EXIT /B
::#########################################################################
:BASIC_FILE
::#########################################################################
IF DEFINED FILE_OPER GOTO:BASIC_FILETYPE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            File Operation&&ECHO.&&ECHO. (%##%1%$$%) Rename&&ECHO. (%##%2%$$%) Delete&&ECHO. (%##%3%$$%) Copy&&IF "%FOLDER_MODE%"=="ISOLATED" FOR %%G in (VHDX MAIN IMAGE) DO (IF "%FILE_TYPE%"=="%%G" ECHO. ^(%##%4%$$%^) Move)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=FILE_PROMPT"&&CALL:MENU_SELECT
IF "%FILE_PROMPT%"=="1" SET "FILE_OPER=Rename"
IF "%FILE_PROMPT%"=="2" SET "FILE_OPER=Delete"
IF "%FILE_PROMPT%"=="3" SET "FILE_OPER=Copy"
IF "%FILE_PROMPT%"=="4" IF "%FOLDER_MODE%"=="ISOLATED" FOR %%G in (VHDX MAIN IMAGE) DO (IF "%FILE_TYPE%"=="%%G" SET "FILE_OPER=MoveVHDX")
IF NOT DEFINED FILE_OPER GOTO:BASIC_ERROR
:BASIC_FILETYPE
IF "%FILE_OPER%"=="MoveVHDX" IF "%FOLDER_MODE%"=="ISOLATED" CALL:VHDX_MOVE&GOTO:BASIC_ERROR
IF DEFINED FILE_SKIP GOTO:BASIC_FILEOPER
:BASIC_FILEPICK
FOR %%X in (WIM VHDX ISO) DO (IF "%%X"=="%FILE_TYPE%" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE %%Xs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.%%X"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT)
FOR %%X in (LIST BASE) DO (IF "%%X"=="%FILE_TYPE%" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE %%Xs:%$$%&&ECHO.&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.%%X"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT)
FOR %%X in (CAB MSU PKX APPX APPXBUNDLE MSIXBUNDLE) DO (IF "%%X"=="%FILE_TYPE%" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE %%Xs:%$$%&&ECHO.&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.%%X"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT)
IF "%FILE_TYPE%"=="WALL" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE JPGs/PNGs:%$$%&&ECHO.&&SET "$FOLD=%CACHE_FOLDER%"&&SET "$FILT=*.JPG"&&CALL:FILE_LIST&&SET "$FOLD=%CACHE_FOLDER%"&&SET "$FILT=*.PNG"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%FILE_TYPE%"=="MAIN" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%MAIN FOLDER VHDXs:%$$%&&ECHO.&&SET "$FOLD=%PROG_SOURCE%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%FILE_TYPE%"=="IMAGE" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE WIMs/VHDXs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&CALL:FILE_LIST&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%FILE_TYPE%"=="LISTS" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs/BASEs:%$$%&&ECHO.&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%FILE_TYPE%"=="PACK" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE PACKAGEs
IF "%FILE_TYPE%"=="PKXLIST" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                              File %FILE_OPER%&&ECHO.&&ECHO.  %@@%AVAILABLE PKXs/LISTs:%$$%&&ECHO.&&SET "$FOLD=%PACK_FOLDER%"&&SET "$FILT=*.PKX"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&&SET "ERROR="
IF "%FILE_TYPE%"=="PKXLIST" SET "$EXT="&&IF DEFINED $CHOICE FOR %%G in ("%$CHOICE%") DO (SET "CAPS_SET=$EXT"&&SET "CAPS_VAR=%%~xG"&&CALL:CAPS_SET)
IF "%FILE_TYPE%"=="PKXLIST" IF "%$EXT%"==".PKX" SET "$PICK=%PACK_FOLDER%\%$CHOICE%"&&SET "$PATH=%PACK_FOLDER%\"
IF "%FILE_TYPE%"=="PKXLIST" IF "%$EXT%"==".LIST" SET "$PICK=%LIST_FOLDER%\%$CHOICE%"&&SET "$PATH=%LIST_FOLDER%\"
IF NOT DEFINED $PICK GOTO:BASIC_ERROR
:BASIC_FILEOPER
IF "%FILE_OPER%"=="Delete" CALL:CONFIRM
IF "%FILE_OPER%"=="Delete" IF "%CONFIRM%"=="X" DEL /Q /F "%$PICK%">NUL
IF "%FILE_OPER%"=="Delete" GOTO:BASIC_ERROR
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter new name of %$EXT%&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=FILE_PROMPT"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF NOT DEFINED FILE_PROMPT GOTO:BASIC_ERROR
IF EXIST "%$PATH%\%FILE_PROMPT%%$EXT%" GOTO:BASIC_ERROR
SET "CASE=LOWER"&&SET "CAPS_SET=$EXT"&&SET "CAPS_VAR=%$EXT%"&&CALL:CAPS_SET
IF "%FILE_OPER%"=="Rename" REN "%$PICK%" "%FILE_PROMPT%%$EXT%">NUL 2>&1
IF "%FILE_OPER%"=="Copy" ECHO.Copying %FILE_PROMPT%%$EXT%...&&COPY /Y "%$PICK%" "%$PATH%%FILE_PROMPT%%$EXT%">NUL 2>&1
:BASIC_ERROR
SET "FILE_OPER="&&SET "FILE_TYPE="&&SET "FILE_NAME="&&SET "FILE_SKIP="&&SET "$PICK="
EXIT /B
:VHDX_MOVE
IF NOT "%FOLDER_MODE%"=="ISOLATED" EXIT /B
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                       Move VHDX between folders&&ECHO.&&ECHO.  %@@%IMAGE FOLDER VHDXs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.&&ECHO.                               ( %##%-%$$% / %##%+%$$% )&&ECHO.&&ECHO.  %@@%MAIN FOLDER VHDXs:%$$%&&ECHO.&&SET "$FOLD=%PROG_SOURCE%"&&SET "$FILT=*.VHDX"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
IF "%SELECT%"=="-" CALL:MOVE2IMAGE
IF "%SELECT%"=="+" CALL:MOVE2MAIN
GOTO:VHDX_MOVE
:MOVE2IMAGE
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                         Move to image folder&&ECHO.&&ECHO.  %@@%MAIN FOLDER VHDXs:%$$%&&ECHO.&&SET "$FOLD=%PROG_SOURCE%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED $PICK IF EXIST "%IMAGE_FOLDER%\%$CHOICE%" CALL:PAD_LINE&&ECHO. File already exists in IMAGE folder. Press (%##%X%$$%) to overwrite %@@%%$CHOICE%%$$%.&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF DEFINED $PICK IF EXIST "%IMAGE_FOLDER%\%$CHOICE%" IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED $PICK MOVE /Y "%$PICK%" "%IMAGE_FOLDER%\">NUL
EXIT /B
:MOVE2MAIN
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                         Move to main folder&&ECHO.&&ECHO.  %@@%IMAGE FOLDER VHDXs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED $PICK IF EXIST "%PROG_SOURCE%\%$CHOICE%" CALL:PAD_LINE&&ECHO. File already exists in MAIN folder. Press (%##%X%$$%) to overwrite %@@%%$CHOICE%%$$%.&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF DEFINED $PICK IF EXIST "%PROG_SOURCE%\%$CHOICE%" IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED $PICK MOVE /Y "%$PICK%" "%PROG_SOURCE%\">NUL
EXIT /B
::#########################################################################
:DISK_MANAGEMENT
::#########################################################################
@ECHO OFF&&CLS&&SET "DISK_LETTER="&&SET "DISK_MSG="&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Disk Management&&CALL:DISK_LIST_BASIC&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE
ECHO. [%@@%DISK%$$%] (%##%B%$$%)oot Creator       (%##%I%$$%)nspect       (%##%E%$$%)rase       (%##%O%$$%)ptions&&CALL:PAD_LINE&&ECHO. [%@@%PART%$$%] (%##%C%$$%)reate     (%##%D%$$%)elete     (%##%F%$$%)ormat     (%##%M%$$%)ount     (%##%U%$$%)nmount&&CALL:PAD_LINE
IF DEFINED ADV_DISK ECHO. [%@@%IMAGE%$$%](%##%N%$$%)ew VHDX      (%##%V%$$%)HDX Mount     (%##%X%$$%)ISO Mount      (%##%U%$$%)nmount&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF DEFINED MENU_EXIT GOTO:COMMAND_INTERNAL_END
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:MAIN_MENU
IF "%SELECT%"=="N" CALL:VHDX_NEW_PROMPT&SET "SELECT="
IF "%SELECT%"=="U" CALL:DISK_UNMOUNT_PROMPT&SET "SELECT="
IF "%SELECT%"=="O" IF DEFINED ADV_DISK SET "ADV_DISK="&SET "SELECT="
IF "%SELECT%"=="O" IF NOT DEFINED ADV_DISK SET "ADV_DISK=1"&SET "SELECT="
IF "%SELECT%"=="X" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%AVAILABLE ISOs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.ISO"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&&CALL:ISO_MOUNT&SET "SELECT="
IF "%SELECT%"=="V" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&&CALL:VHDX_MOUNT&SET "SELECT="
IF "%SELECT%"=="B" IF EXIST "%BOOT_FOLDER%\boot.sav" GOTO:BOOT_CREATOR
IF "%SELECT%"=="UID" CALL:DISK_MENU&&CALL:DISK_UID_PROMPT&&CALL:DISK_PART_END&SET "SELECT="
IF "%SELECT%"=="E" CALL:DISK_ERASE_PROMPT&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="I" SET "QUERY_MSG=                        Select a disk to inspect"&&CALL:DISK_MENU&&CALL:DISKMGR_INSPECT&&CALL:DISK_PART_END&SET "SELECT="
IF "%SELECT%"=="C" SET "QUERY_MSG=                   Select a disk to create partition"&&CALL:DISK_MENU&&CALL:PART_CREATE_PROMPT&&CALL:DISK_PART_END&SET "SELECT="
IF "%SELECT%"=="F" SET "QUERY_MSG=                   %XLR2%Select a disk to format partition%$$%"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:CONFIRM&&CALL:DISKMGR_FORMAT&&CALL:DISK_PART_END&SET "SELECT="
IF "%SELECT%"=="D" SET "QUERY_MSG=                   %XLR2%Select a disk to delete partition%$$%"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:CONFIRM&&CALL:DISKMGR_DELETE&&CALL:DISK_PART_END&SET "SELECT="
IF "%SELECT%"=="M" SET "QUERY_MSG=                   Select a disk to mount partition"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:LETTER_GET&&CALL:CONFIRM&&CALL:DISKMGR_MOUNT&SET "SELECT="
IF "%SELECT%"=="B" IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%BOOT_FOLDER%\boot.sav" CALL:BOOT_FETCH
IF "%SELECT%"=="B" IF "%PROG_MODE%"=="PORTABLE" IF NOT EXIST "%BOOT_FOLDER%\boot.sav" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.   Import boot media from within image processing before proceeding.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAUSED
GOTO:DISK_MANAGEMENT
:VHDX_NEW_PROMPT
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter name of new .VHDX&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV
SET "$SELECT=VHDX_NAME"&&SET "$CASE=ANY"&&SET "NO_ASTRK=1"&&CALL:MENU_SELECT
IF DEFINED VHDX_NAME (SET "VHDX_NAME=%VHDX_NAME%.vhdx") ELSE (EXIT /B)
IF EXIST "%IMAGE_FOLDER%\%VHDX_NAME%" SET "ERROR=VHDX_NEW_PROMPT"&&CALL:DEBUG&&SET "VHDX_NAME="&&ECHO.&&ECHO.ERROR&&EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                       Enter new VHDX size in GB&&ECHO.                 Note: 25GB or greater is recommended&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "$SELECT=SELECTX"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF DEFINED ERROR EXIT /B
IF %SELECTX% LSS 1 SET "ERROR=VHDX_NEW_PROMPT"&&CALL:DEBUG
IF %SELECTX% GTR 9999 SET "ERROR=VHDX_NEW_PROMPT"&&CALL:DEBUG
IF NOT DEFINED ERROR IF %SELECTX% LSS 25 CALL:CONFIRM
IF NOT DEFINED ERROR IF %SELECTX% LSS 25 IF NOT "%CONFIRM%"=="X" SET "ERROR=VHDX_NEW_PROMPT"&&CALL:DEBUG
IF NOT DEFINED ERROR SET "VHDX_SIZE=%SELECTX%"
IF DEFINED ERROR EXIT /B
SET "VDISK=%IMAGE_FOLDER%\%VHDX_NAME%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE
SET "VHDX_NAME="&&EXIT /B
:DISK_UID
FOR %%a in (DISK_X UID_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.uniqueid disk id=%UID_X%&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
SET "DISK_X="&&SET "UID_X="&&CALL:DEL_DSK&&EXIT /B
:PART_ASSIGN
FOR %%a in (DISK_X PART_X LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.assign letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:VOL_REMOVE
FOR %%a in (LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select VOLUME %LETT_X%&&ECHO.Remove letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_REMOVE
FOR %%a in (DISK_X PART_X LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.Remove letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_DELETE
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_FORMAT
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.format quick fs=ntfs override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_4000
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_8000
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.gpt attributes=0x0000000000000000&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_EFIX
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_BAS
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.set id=ebd0a0a2-b9e5-4433-87c0-68b6b72699c7 override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:DISK_CLEAN
FOR %%a in (DISK_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.attributes disk clear readonly&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:DEL_DSK
IF EXIST "$DSK" DEL /Q /F "$DSK">NUL
EXIT /B
:BOOT_FETCH
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.     File boot.sav doesn't exist. Press (%##%X%$$%) to copy from recovery&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF NOT "%CONFIRM%"=="X" EXIT /B
CALL:EFI_MOUNT&&CALL:PAD_LINE
ECHO. Copying %@@%boot.sav%$$%...&&COPY /Y "%EFI_LETTER%:\$.WIM" "%BOOT_FOLDER%\boot.sav">NUL 2>&1
CALL:EFI_UNMOUNT
EXIT /B
:LETTER_GET
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                        Enter the drive letter&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=LTR"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF NOT DEFINED ERROR SET "CAPS_SET=DISK_LETTER"&&SET "CAPS_VAR=%SELECT%"&&CALL:CAPS_SET
EXIT /B
:PART_GET
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                       Enter the partition number&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF NOT DEFINED ERROR SET "PART_NUMBER=%SELECT%"
EXIT /B
:DISK_PART_END
IF DEFINED ERROR EXIT /B
IF DEFINED DISK_MSG ECHO.&&CALL:PAD_LINE&&ECHO.%DISK_MSG%
ECHO.&&CALL:PAD_LINE&&ECHO	                      End of Disk-Part Operation&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:PART_CREATE_PROMPT
IF DEFINED ERROR EXIT /B
IF NOT DEFINED DISK_NUMBER EXIT /B
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.            Enter a partition size. (%##%0%$$%) Remainder of space &&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF NOT DEFINED ERROR SET "PART_SIZE=%SELECT%"&&CALL:CONFIRM&&CALL:DISKMGR_CREATE
EXIT /B
:DISKMGR_CREATE
IF DEFINED ERROR EXIT /B
IF "%PART_SIZE%"=="0" SET "PART_SIZE="
ECHO.Creating partition on disk %DISK_NUMBER%.
SET "DISK_X=%DISK_NUMBER%"&&SET "SIZE_X=%PART_SIZE%"
IF DEFINED SIZE_X SET "SIZE_X= size=%SIZE_X%"
(ECHO.select disk %DISK_X%&&ECHO.create partition primary%SIZE_X%&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
EXIT /B
:DISKMGR_DELETE
IF DEFINED ERROR EXIT /B
SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=%PART_NUMBER%"&&CALL:PART_DELETE
EXIT /B
:DISKMGR_FORMAT
IF DEFINED ERROR EXIT /B
SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=%PART_NUMBER%"&&CALL:PART_FORMAT
EXIT /B
:DISKMGR_INSPECT
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_NUMBER%&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
EXIT /B
:VDISK_CREATE
IF NOT DEFINED VDISK EXIT /B
IF NOT DEFINED VDISK_LTR SET "VDISK_LTR=ANY"
IF "%VDISK_LTR%"=="ANY" SET "$GET=VDISK_LTR"&&CALL:LETTER_ANY
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Mounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
IF NOT DEFINED VHDX_SIZE SET "VHDX_SIZE=25"
SET "VHDX_MB=%VHDX_SIZE%"
SET /A "VHDX_MB*=1025"
(ECHO.create vdisk file="%VDISK%" maximum=%VHDX_MB% type=expandable&&ECHO.select vdisk file="%VDISK%"&&ECHO.attach vdisk&&ECHO.create partition primary&&ECHO.select partition 1&&ECHO.format fs=ntfs quick&&ECHO.assign letter=%VDISK_LTR% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "VHDX_MB="&&IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
IF EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED=1"
EXIT /B
:VDISK_ATTACH
IF NOT DEFINED VDISK EXIT /B
IF NOT DEFINED VDISK_LTR SET "VDISK_LTR=ANY"
IF "%VDISK_LTR%"=="ANY" SET "$GET=VDISK_LTR"&&CALL:LETTER_ANY
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Mounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
SET "VDISK_SYS="&&(ECHO.Select vdisk file="%VDISK%"&&ECHO.attach vdisk&&ECHO.list vdisk&&ECHO.Exit)>"$DSK"
FOR /F "TOKENS=1-8* DELIMS=* " %%a IN ('DISKPART /s "$DSK"') DO (SET "DISK_NUM="&&IF "%%a"=="VDisk" IF EXIST "%%i" SET "DISK_NUM=%%d"&&SET "CAPS_SET=VDISK_QRY"&&SET "CAPS_VAR=%%i"&&CALL:CAPS_SET&&CALL:VDISK_CAPS)
IF EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED=1"&&IF EXIST "%VDISK_LTR%:\WINDOWS" SET "VDISK_SYS=1"
SET "VDISK_PART="&&SET "VDISK_QRY="&&SET "DISK_NUM="&&IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:VDISK_CAPS
SET "CAPS_SET=VDISK"&&SET "CAPS_VAR=%VDISK%"&&CALL:CAPS_SET
IF NOT "%VDISK_QRY%"=="%VDISK%" EXIT /B
(ECHO.select disk %DISK_NUM%&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-8* DELIMS=* " %%1 IN ('DISKPART /s "$DSK"') DO (IF "%%1"=="Partition" IF NOT "%%2"=="" IF NOT "%%2"=="###" SET "VDISK_PART=%%2")
IF DEFINED VDISK_PART (ECHO.Select vdisk file="%VDISK%"&&ECHO.select partition %VDISK_PART%&&ECHO.assign letter=%VDISK_LTR% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
EXIT /B
:VDISK_DETACH
IF NOT DEFINED VDISK EXIT /B
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Unmounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF NOT EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED="
IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:VDISK_COMPACT
(ECHO.Select vdisk file="%$PICK%"&&ECHO.Attach vdisk readonly&&ECHO.compact vdisk&&ECHO.detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&DEL "$DSK">NUL 2>&1
EXIT /B
:VHDX_MOUNT
IF NOT DEFINED $PICK EXIT /B
SET "VDISK=%$PICK%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT EXIST "%VDISK_LTR%:\" ECHO.ERROR&&CALL:VDISK_DETACH
EXIT /B
:ISO_MOUNT
IF NOT DEFINED $PICK EXIT /B
"%$PICK%"
EXIT /B
:DISKMGR_MOUNT
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER DISK_LETTER PART_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
IF EXIST "%DISK_LETTER%:\" ECHO. %XLR4%ERROR:%$$% Choose a different drive letter.&&EXIT /B
IF "%PROG_MODE%"=="RAMDISK" IF "%DISK_LETTER%"=="Z" ECHO. %XLR4%ERROR:%$$% Choose a different drive letter.&&EXIT /B
IF NOT "%PROG_MODE%"=="COMMAND" ECHO.&&ECHO. Mounting disk %DISK_NUMBER% partition %PART_NUMBER% to letter %DISK_LETTER%:\...
SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=%PART_NUMBER%"&&SET "LETT_X=%DISK_LETTER%"&&CALL:PART_ASSIGN
IF NOT EXIST "%DISK_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=%PART_NUMBER%"&&SET "LETT_X=%DISK_LETTER%"&&CALL:PART_ASSIGN
IF EXIST "%DISK_LETTER%:\" SET "DISK_MSG=Partition %PART_NUMBER% on Disk %DISK_NUMBER% has been assigned letter %DISK_LETTER%."
IF NOT EXIST "%DISK_LETTER%:\" SET "DISK_MSG= ERROR: Partition %PART_NUMBER% on Disk %DISK_NUMBER% was not assigned letter %DISK_LETTER%."
EXIT /B
:DISK_UNMOUNT_PROMPT
CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                            Volume Unmount&&ECHO.&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO. ^( %##%%%G%$$% ^) Volume %%G:)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=$LTR"&&SET "$CHECK=LTR"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF DEFINED $LTR CALL:DISKMGR_UNMOUNT
EXIT /B
:LETTER_ANY
IF NOT DEFINED $GET EXIT /B
FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "%$GET%=%%G")
SET "$GET="&&EXIT /B
:DISKMGR_UNMOUNT
IF NOT EXIST "%$LTR%:\" EXIT /B
SET "$CHECK=LTR"&&SET "CHECK_VAR=%$LTR%"&&CALL:CHECK
IF DEFINED ERROR GOTO:DISKMGR_UNMOUNT_END
(ECHO.List Volume&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ('DISKPART /s "$DSK"') DO (IF "%%c"=="%$LTR%" SET "$VOL=%%b")
(ECHO.Select Volume %$VOL%&&ECHO.Detail Volume&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ('DISKPART /s "$DSK"') DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "$DISK=%%b"
IF "%%a"=="*" IF "%%b"=="Disk" SET "$DISK=%%c")
(ECHO.List Vdisk&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-8* DELIMS= " %%a IN ('DISKPART /s "$DSK"') DO (IF "%%a"=="VDisk" IF "%%d"=="%$DISK%" IF EXIST "%%i" SET "$VDISK=%%i"&&FOR %%G in ("%%i") DO (SET "$NAM=%%~nG%%~xG"))
IF NOT DEFINED $VDISK ECHO. Unmounting disk %$DISK% letter %$LTR%...&&(ECHO.Select Volume %$VOL%&&ECHO.Remove letter=%$LTR% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF DEFINED $VDISK ECHO. Unmounting vdisk %$NAM% letter %$LTR%...&&(ECHO.Select vdisk file="%$VDISK%"&&ECHO.Detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK" >NUL 2>&1
:DISKMGR_UNMOUNT_END
FOR %%G in ($DISK $VDISK $VOL $NAM $LTR) DO (SET "%%G=")
IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:DISK_ERASE_PROMPT
SET "QUERY_MSG=                         %XLR2%Select a disk to erase%$$%"&&CALL:DISK_MENU
IF NOT DEFINED ERROR CALL:CONFIRM&&SET "$GET=TST_LETTER"&&CALL:LETTER_ANY&&CALL:DISKMGR_ERASE&SET "TST_LETTER="
EXIT /B
:DISKMGR_ERASE
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
CALL SET "GET_DISK_ID=%%DISKID_%DISK_NUMBER%%%"
SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_CLEAN&&SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=1"&&SET "LETT_X=%TST_LETTER%"&&CALL:PART_ASSIGN
IF EXIST "%TST_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_CLEAN
CALL:DISKMGR_CHANGEID>NUL 2>&1
IF NOT EXIST "%TST_LETTER%:\" SET "DISK_MSG=All partitions on Disk %DISK_NUMBER% have been erased."
IF EXIST "%TST_LETTER%:\" SET "DISK_MSG=%##%Disk %DISK_NUMBER% is currently in use - unplug disk - reboot into Windows - replug and try again.%$$%"
IF EXIST "%TST_LETTER%:\" SET "LETT_X=%TST_LETTER%"&&CALL:VOL_REMOVE
IF EXIST "%TST_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=1"&&SET "LETT_X=%TST_LETTER%"&&CALL:PART_REMOVE
SET "TEST_X="&&EXIT /B
:DISK_UID_PROMPT
ECHO.                       Enter a new disk UID (%##%#%$$%) &&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "ERROR=DISK_UID_PROMPT"&&CALL:DEBUG&&EXIT /B
IF NOT DEFINED ERROR SET "GET_DISK_ID=%SELECT%"&&CALL:CONFIRM&&CALL:DISKMGR_CHANGEID
EXIT /B
:DISKMGR_CHANGEID
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER GET_DISK_ID) DO (IF NOT DEFINED %%a EXIT /B)
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%GET_DISK_ID%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" SET "GET_DISK_ID=00000000-0000-0000-0000-000000000000"
SET "UID_X=%GET_DISK_ID%"&&SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_UID
EXIT /B
:HOST_HIDE
ECHO. Hiding the vhdx host partition...&&SET /P DISK_TARGET=<"%PROG_FOLDER%\HOST_TARGET"&&CALL:DISK_DETECT>NUL 2>&1
IF NOT DEFINED DISK_DETECT EXIT /B
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&SET "LETT_X=Z"&&CALL:PART_REMOVE&&SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&CALL:PART_4000
EXIT /B
:HOST_AUTO
SET "HOST_ERROR="&&IF NOT DEFINED ARBIT_FLAG CLS&&ECHO.Querying disks...
IF EXIST "Z:\" (ECHO.select volume Z&&ECHO.remove letter=Z noerr&&ECHO.exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF EXIST "%PROG_FOLDER%\HOST_FOLDER" SET /P HOST_FOLDERX=<"%PROG_FOLDER%\HOST_FOLDER"
IF NOT DEFINED HOST_FOLDERX SET "HOST_FOLDERX=$"
SET /P HOST_TARGET=<"%PROG_FOLDER%\HOST_TARGET"
SET "DISK_TARGET=%HOST_TARGET%"
IF DEFINED ARBIT_FLAG CALL:DISK_DETECT>NUL 2>&1
IF NOT DEFINED ARBIT_FLAG SET "QUERY_X=1"&&CALL:DISK_DETECT
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&CALL:PART_8000&&SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&SET "LETT_X=Z"&&CALL:PART_ASSIGN
IF EXIST "Z:\" IF NOT EXIST "Z:\%HOST_FOLDERX%" MD "Z:\%HOST_FOLDERX%">NUL 2>&1
IF EXIST "Z:\%HOST_FOLDERX%" IF NOT EXIST "Z:\%HOST_FOLDERX%\windick.cmd" COPY /Y "%PROG_FOLDER%\windick.cmd" "Z:\%HOST_FOLDERX%">NUL 2>&1
IF EXIST "Z:\%HOST_FOLDERX%\windick.ini" COPY /Y "Z:\%HOST_FOLDERX%\windick.ini" "%PROG_FOLDER%">NUL 2>&1
IF NOT DEFINED SETS_LOAD IF EXIST "%PROG_FOLDER%\SETTINGS_INI" COPY /Y "%PROG_FOLDER%\SETTINGS_INI" "%PROG_FOLDER%\windick.ini">NUL 2>&1
IF NOT EXIST "Z:\%HOST_FOLDERX%" IF NOT DEFINED ARBIT_FLAG SET "ARBIT_FLAG=1"&&GOTO:HOST_AUTO
SET "ARBIT_FLAG="&&IF EXIST "Z:\%HOST_FOLDERX%" SET "PROG_SOURCE=Z:\%HOST_FOLDERX%"&&SET "HOST_NUMBER=%DISK_DETECT%"
IF NOT DEFINED DISK_DETECT SET "HOST_ERROR=1"&&SET "DISK_TARGET="
EXIT /B
:EFI_MOUNT
IF NOT DEFINED DISK_TARGET SET "EFI_LETTER="&&EXIT /B
SET "$GET=EFI_LETTER"&&CALL:LETTER_ANY
SET /P HOST_TARGET=<"%PROG_FOLDER%\HOST_TARGET"
SET "DISK_TARGET=%HOST_TARGET%"&&CALL:DISK_DETECT>NUL 2>&1
IF NOT DEFINED DISK_DETECT SET "ERROR=EFI_MOUNT"&&CALL:DEBUG&&ECHO. %XLR2%ERROR:%$$% EFI target disk could not be found.&&SET "EFI_LETTER="&&EXIT /B
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_BAS
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_ASSIGN
IF NOT EXIST "%EFI_LETTER%:\" SET "ERROR=EFI_MOUNT"&&CALL:DEBUG&&ECHO. %XLR2%ERROR:%$$% EFI %EFI_LETTER%:\ could not be mounted.&&SET "EFI_LETTER="
EXIT /B
:EFI_UNMOUNT
IF NOT DEFINED DISK_TARGET SET "EFI_LETTER="
IF NOT EXIST "%EFI_LETTER%:\" SET "EFI_LETTER="
IF NOT DEFINED EFI_LETTER EXIT /B
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_REMOVE
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_EFIX
IF EXIST "%EFI_LETTER%:\" SET "ERROR=EFI_UNMOUNT"&&CALL:DEBUG&&ECHO. %XLR2%ERROR:%$$% EFI %EFI_LETTER%:\ could not dismount.
SET "EFI_LETTER="&&EXIT /B
:DISK_MENU
CLS&&SET "DISK_TARGET="&&CALL:PAD_LINE&&SET "DISK_GET=1"&&CALL:DISK_LIST
CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "VERBOSE=1"&&SET "$SELECT=DISK_NUMBER"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF NOT DEFINED DISK_%DISK_NUMBER% SET "ERROR=DISK_MENU"&&CALL:DEBUG
IF DEFINED ERROR EXIT /B
CALL SET "DISK_TARGET=%%DISKID_%DISK_NUMBER%%%"
FOR %%G in (DISK_NUMBER DISK_TARGET) DO (IF NOT DEFINED %%G SET "ERROR=DISK_MENU"&&CALL:DEBUG)
IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_NUMBER%"=="%DISK_NUMBER%" SET "ERROR=DISK_MENU"&&CALL:DEBUG
IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_TARGET%"=="%DISK_TARGET%" SET "ERROR=DISK_MENU"&&CALL:DEBUG
EXIT /B
:DISK_LIST
SET "$BOX=RT"&&CALL:BOX_DISP
IF DEFINED QUERY_MSG ECHO.%QUERY_MSG%
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%SystemDrive%") DO (SET "SYS_VOLUME=%%G")
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%PROG_SOURCE%") DO (SET "PROG_VOLUME=%%G")
(ECHO.LIST DISK&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-5 SKIP=8 DELIMS= " %%a in ('DISKPART /s "$DSK"') DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISKVND="&&(ECHO.select disk %%b&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&SET "LTRX=X"&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS={}: " %%1 in ('DISKPART /s "$DSK"') DO (
IF "%%1 %%2"=="Disk %%b" ECHO.&&ECHO.   %@@%Disk%$$% ^(%##%%%b%$$%^)
IF NOT "%%1 %%2"=="Disk %%b" IF NOT DEFINED DISKVND SET "DISKVND=$"&&ECHO.   %%1 %%2 %%3 %%4 %%5
IF "%%1"=="Type" ECHO.    %@@%Type%$$% = %%2
IF "%%1 %%2"=="Disk ID" ECHO.    %@@%UID%$$%  = %%3
IF "%%1 %%3"=="Volume %SYS_VOLUME%" ECHO.  %XLR2%  System Volume%$$%
IF "%%1 %%3"=="Volume %PROG_VOLUME%" ECHO.  %XLR2%  Program Volume%$$%
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" ECHO.  %XLR2%  Active Pagefile%$$%
IF "%%1"=="Partition" IF NOT "%%2"=="###" SET "PARTX=%%2"&&SET "SIZEX=%%4 %%5"&&(ECHO.select disk %%b&&ECHO.select partition %%2&&ECHO.detail partition&&ECHO.Exit)>"$DSK"&&SET "LTRX="&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS=* " %%A in ('DISKPART /s "$DSK"') DO (IF "%%A"=="Volume" IF NOT "%%B"=="###" SET "LTRX=%%C"&&CALL:DISK_CHECK)
IF NOT DEFINED LTRX IF NOT "%%2"=="DiskPart..." ECHO.    %@@%Part %%2%$$% Vol * %%4 %%5))
IF DEFINED DISK_GET CALL:DISK_DETECT>NUL 2>&1
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP
FOR %%a in ($GO LTRX PARTX SIZEX QUERY_MSG DISK_GET) DO (SET "%%a=")
DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:DISK_CHECK
SET "$GO="&&FOR %%$ in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%%$"=="%LTRX%" SET "$GO=1"&&ECHO.    %@@%Part %PARTX%%$$% Vol %@@%%LTRX%%$$% %SIZEX%)
IF NOT DEFINED $GO ECHO.    %@@%Part %PARTX%%$$% Vol * %SIZEX%
EXIT /B
:DISK_LIST_BASIC
(ECHO.LIST DISK&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-5 SKIP=8 DELIMS= " %%a in ('DISKPART /s "$DSK"') DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" ECHO.&&ECHO.   %@@%%%a%$$% %@@%%%b%$$%&&SET "DISKVND="&&(ECHO.select disk %%b&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS={}: " %%1 in ('DISKPART /s "$DSK"') DO (
IF NOT "%%1 %%2"=="Disk %%b" IF NOT DEFINED DISKVND SET "DISKVND=$"&&ECHO.   %%1 %%2 %%3 %%4 %%5
FOR %%$ in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%%1"=="Volume" IF "%%3"=="%%$" ECHO.    Vol %@@%%%$%$$%)))
ECHO.&&DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:DISK_DETECT
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%SystemDrive%") DO (SET "SYS_VOLUME=%%G")
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%PROG_SOURCE%") DO (SET "PROG_VOLUME=%%G")
SET "DISK_DETECT="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF DEFINED DISK_%%a SET "DISK_%%a="&&SET "DISKID_%%a=")
(ECHO.LIST DISK&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1,2,4 SKIP=8 DELIMS= " %%a in ('DISKPART /s "$DSK"') DO (IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISK_%%b="&&(ECHO.select disk %%b&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS={}: " %%1 in ('DISKPART /s "$DSK"') DO (
IF "%%1 %%2"=="Disk %%b" SET "DISK_%%b=%%b"
IF "%%1 %%2"=="Disk ID" SET "DISKID_%%b=%%3"&&IF "%%3"=="%DISK_TARGET%" SET "DISK_DETECT=%%b"
IF "%%1 %%2"=="Disk ID" IF DEFINED QUERY_X ECHO. Getting info for disk uid %##%%%3%$$%...
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" SET "DISK_%%b="
IF "%%2 %%3 %%4"=="File Backed Virtual" SET "DISK_%%b=VDISK"
IF "%%1 %%3"=="Volume %SYS_VOLUME%" SET "DISK_%%b="
IF "%%1 %%3"=="Volume %PROG_VOLUME%" SET "DISK_%%b="
IF "%%1 %%3"=="Volume Z" IF "%PROG_MODE%"=="RAMDISK" SET "HOST_VOLUME=%%2"))
IF DEFINED QUERY_X SET "QUERY_X="&&CLS
DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
::#########################################################################
:BOOT_CREATOR
::#########################################################################
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             Boot Creator&&ECHO.
IF NOT DEFINED HOST_SIZE (SET "EMBEE=") ELSE (SET "EMBEE=MB")
ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$DISP=BAS"&&CALL:FILE_LIST&&ECHO.
SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&ECHO. (%##%O%$$%)ptions                       (%##%G%$$%)o^^!         (%##%V%$$%)HDX %@@%%VHDX_SLOTX%%$$%&&CALL:PAD_LINE
IF DEFINED ADV_BOOT ECHO. [%@@%OPTIONS%$$%]  (%##%A%$$%)dd File  (%##%E%$$%)xport EFI  (%##%H%$$%)ost Size %@@%%HOST_SIZE%%EMBEE%%$$% (%##%W%$$%)allpaper %@@%%PE_WALLPAPER%%$$%&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF DEFINED MENU_EXIT GOTO:COMMAND_INTERNAL_END
IF DEFINED HOST_ERROR GOTO:MAIN_MENU
IF NOT DEFINED SELECT GOTO:DISK_MANAGEMENT
IF "%SELECT%"=="E" CALL:EFI_FETCH
IF "%SELECT%"=="H" CALL:HOST_SIZE
IF "%SELECT%"=="V" SET "$VHDX=X"&&CALL:VHDX_CHECK
IF "%SELECT%"=="O" IF DEFINED ADV_BOOT SET "ADV_BOOT="&SET "SELECT="
IF "%SELECT%"=="O" IF NOT DEFINED ADV_BOOT SET "ADV_BOOT=1"&SET "SELECT="
IF "%SELECT%"=="A" CALL:ADDFILE_MENU
IF "%SELECT%"=="G" CALL:BOOT_CREATOR_PROMPT
IF "%SELECT%"=="W" CALL:PE_WALLPAPER
GOTO:BOOT_CREATOR
:ADDFILE_MENU
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (CALL ECHO. File ^(%##%%%G%$$%^) %@@%%%ADDFILE_%%G%%%$$%)
ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (IF "%SELECT%"=="%%G" SET "ADDFILEX=%SELECT%"&&CALL:ADDFILE_CHOOSE)
GOTO:ADDFILE_MENU
:ADDFILE_CHOOSE
CLS&&SET "ADDFILEZ="&&IF "%FOLDER_MODE%"=="UNIFIED" SET "SELECTX=5"&&GOTO:ADDFILE_JUMP
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO. (%##%1%$$%) Package&&ECHO. (%##%2%$$%) List&&CALL ECHO. (%##%3%$$%) Image&&ECHO. (%##%4%$$%) Cache&&ECHO. (%##%5%$$%) Main&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$SELECT=SELECTX"&&CALL:MENU_SELECT
IF NOT "%SELECTX%"=="1" IF NOT "%SELECTX%"=="2" IF NOT "%SELECTX%"=="3" IF NOT "%SELECTX%"=="4" IF NOT "%SELECTX%"=="5" EXIT /B
IF "%SELECTX%"=="1" SET "ADDFILEZ=pack"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO.  %@@%AVAILABLE PACKAGEs
IF "%SELECTX%"=="2" SET "ADDFILEZ=list"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO.  %@@%AVAILABLE LISTs/BASEs:%$$%&&ECHO.&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.LIST"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.BASE"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT 
IF "%SELECTX%"=="3" SET "ADDFILEZ=image"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO.  %@@%AVAILABLE IMAGEs:%$$%&&ECHO.&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.WIM"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.VHDX"&&SET "$APPEND=1"&&CALL:FILE_LIST&&SET "$FOLD=%LIST_FOLDER%"&&SET "$FILT=*.ISO"&&SET "$APPEND=1"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECTX%"=="4" SET "ADDFILEZ=cache"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO.  %@@%AVAILABLE CACHE FILEs:%$$%&&ECHO.&&SET "$FOLD=%CACHE_FOLDER%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
:ADDFILE_JUMP
IF "%SELECTX%"=="5" SET "ADDFILEZ=main"&&CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                               Add File&&ECHO.&&ECHO.  %@@%AVAILABLE MAIN FILEs:%$$%&&ECHO.&&SET "$FOLD=%PROG_SOURCE%"&&SET "$FILT=*.*"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED ADDFILEZ IF DEFINED $PICK IF EXIST "%$PICK%" IF NOT EXIST "%$PICK%\*" SET "ADDFILE_%ADDFILEX%=%ADDFILEZ%\%$CHOICE%"
IF DEFINED ADDFILEZ IF NOT DEFINED $PICK SET "ADDFILE_%ADDFILEX%=SELECT"
EXIT /B
:HOST_SIZE
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.  Creates 3 partition disk, remaining space allocated to partition 3.&&ECHO.    One benefit is having an additional drive letter when used in &&ECHO.     conjunction with the hide host partition option in settings.&&ECHO. Should be larger than the combined maximum filled size of all VHDX's.&&ECHO.&&ECHO.                 Enter VHDX host partition size in GB&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "$SELECT=SELECTX"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF DEFINED ERROR SET "HOST_SIZE="&&EXIT /B
IF %SELECTX% LSS 1 SET "ERROR=HOST_SIZE"&&CALL:DEBUG
IF %SELECTX% GTR 9999 SET "ERROR=HOST_SIZE"&&CALL:DEBUG
IF NOT DEFINED ERROR SET "HOST_SIZE=%SELECTX%000"
IF DEFINED ERROR SET "HOST_SIZE="
EXIT /B
:EFI_FETCH
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.        EFI boot files will be extracted from the boot media.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:CONFIRM
IF NOT "%CONFIRM%"=="X" EXIT /B
CLS&&IF EXIST "%BOOT_FOLDER%\boot.sdi" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.         File boot.sdi already exists. Press (%##%X%$$%) to overwrite&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF EXIST "%BOOT_FOLDER%\boot.sdi" IF NOT "%CONFIRM%"=="X" EXIT /B
IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.       File bootmgfw.efi already exists. Press (%##%X%$$%) to overwrite&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "$SELECT=CONFIRM"&&CALL:MENU_SELECT
IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" IF NOT "%CONFIRM%"=="X" EXIT /B
CLS&&SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.            %@@%EFI EXPORT START:%$$%  %DATE%  %TIME%&&ECHO.&&CALL:VTEMP_CREATE&ECHO. Extracting boot-media. Using boot.sav located in folder...
SET "IMAGE_X=%BOOT_FOLDER%\boot.sav"&&SET "INDEX_WORD=Setup"&&CALL:GET_WIMINDEX
IF NOT DEFINED INDEX_Z SET "INDEX_Z=1"
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%BOOT_FOLDER%\boot.sav" /INDEX:%INDEX_Z% /APPLYDIR:"%VDISK_LTR%:"&ECHO.&SET "INDEX_Z="
IF EXIST "%VDISK_LTR%:\Windows\Boot\DVD\EFI\boot.sdi" ECHO. File boot.sdi was found. Copying to folder.&&COPY /Y "%VDISK_LTR%:\Windows\Boot\DVD\EFI\boot.sdi" "%BOOT_FOLDER%">NUL 2>&1
IF EXIST "%VDISK_LTR%:\Windows\Boot\EFI\bootmgfw.efi" ECHO. File bootmgfw.efi was found. Copying to folder.&&COPY /Y "%VDISK_LTR%:\Windows\Boot\EFI\bootmgfw.efi" "%BOOT_FOLDER%">NUL 2>&1
ECHO.&&ECHO. EFI boot files will be used during boot creation when present.&&ECHO.&&CALL:VTEMP_DELETE&&ECHO.&&ECHO.             %@@%EFI EXPORT END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP&&CALL:PAUSED
EXIT /B
:BOOT_CREATOR_PROMPT
IF "%VHDX_SLOTX%"=="SELECT" CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.&&ECHO.              No virtual hard disk file has been selected.&&ECHO.        Virtual disks can be added to the boot menu in Recovery.&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:CONFIRM
IF "%VHDX_SLOTX%"=="SELECT" IF NOT "%CONFIRM%"=="X" EXIT /B
SET "QUERY_MSG=                         %XLR2%Select a disk to erase%$$%"&&CALL:DISK_MENU
IF DEFINED ERROR EXIT /B
CALL:CONFIRM
IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED DISK_NUMBER CALL:BOOT_CREATOR_START
EXIT /B
:PART_CREATE
IF DEFINED ERROR EXIT /B
CALL:DISKMGR_ERASE
IF NOT DEFINED EFI SET "EFI=efi"
IF NOT DEFINED EFI_SIZE SET "EFI_SIZE=1024"
(ECHO.select disk %DISK_NUMBER%&&ECHO.create partition %EFI% size=%EFI_SIZE%&&ECHO.select partition 1&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=%EFI_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "TIMER=3"&&CALL:TIMER
IF NOT EXIST "%EFI_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=%EFI_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "TIMER=3"&&CALL:TIMER
IF NOT EXIST "%EFI_LETTER%:\" FOR %%a in (1 2 3) DO (IF NOT DEFINED RETRY_PART%%a SET "RETRY_PART%%a=1"&&SET "EFI=primary"&&GOTO:PART_CREATE)
IF DEFINED HOST_SIZE SET "CHECK_VAR=%HOST_SIZE%"&&SET "$CHECK=NUM"&&CALL:CHECK>NUL 2>&1
IF DEFINED HOST_SIZE IF DEFINED ERROR SET "ERROR="&&ECHO. %XLR4%ERROR:%$$% Invalid host partition size, using available free space.&&SET "HOST_SIZE="
IF DEFINED HOST_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary size=%HOST_SIZE%&&ECHO.select partition 2&&ECHO.format quick fs=ntfs&&ECHO.assign letter=%PRI_LETTER% noerr&&ECHO.create partition primary&&ECHO.select partition 3&&ECHO.format quick fs=ntfs&&ECHO.assign letter=%TST_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF NOT DEFINED HOST_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary&&ECHO.select partition 2&&ECHO.format quick fs=ntfs&&ECHO.assign letter=%PRI_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "TIMER=3"&&CALL:TIMER
IF NOT EXIST "%PRI_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.format quick fs=ntfs&&ECHO.assign letter=%PRI_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "TIMER=3"&&CALL:TIMER&&DEL /Q /F "$DSK*">NUL 2>&1
SET "RETRY_PART1="&&SET "RETRY_PART2="&&SET "RETRY_PART3="
IF EXIST "%EFI_LETTER%:\" IF EXIST "%PRI_LETTER%:\" SET "EFI="&&EXIT /B
ECHO.                     %XLR2%The disk is currently in use.%$$%&&ECHO.     A malfunctioning disk, or if a program located on the disk&&ECHO.            is currently in use can also cause an error.&&ECHO.  For best results it is recommended to use an external nvme drive.&&ECHO.    Unplug the USB disk and/or reboot if this continues to occur.&&ECHO.
SET "EFI="&&ECHO.&&SET "ERROR=PART_CREATE"&&CALL:DEBUG&&EXIT /B
::#########################################################################
:BOOT_CREATOR_START
::#########################################################################
IF NOT "%PROG_MODE%"=="COMMAND" CLS
SET "$BOX=ST"&&CALL:BOX_DISP&&ECHO.           %@@%BOOT CREATOR START:%$$%  %DATE%  %TIME%&&ECHO.&&CALL:GET_SPACE
SET "DISK_MSG="&&DISM /cleanup-MountPoints>NUL 2>&1
SET "CHAR_STR=%VHDX_SLOTX%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG ECHO. %XLR4%ERROR:%$$% Remove the space from the VHDX name, then try again. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_FINISH
FOR %%a in (0 1 2 3 4 5 ERROR) DO (IF "%FREE%"=="%%a" ECHO. %XLR2%ERROR:%$$% Not enough free space. Clear some space and try again. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_FINISH)
CALL:DISK_DETECT>NUL&CALL SET "DISK_TARGET=%%DISKID_%DISK_NUMBER%%%"&CALL:DISK_DETECT>NUL
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%DISK_TARGET%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" (ECHO. Converting to GPT..&&CALL:DISKMGR_ERASE&&CALL:DISK_DETECT>NUL 2>&1
CALL SET "DISK_TARGET=%%DISKID_%DISK_NUMBER%%%"&&CALL ECHO. Assigning new disk uid %%DISKID_%DISK_NUMBER%%%...&&CALL:DISK_DETECT>NUL 2>&1)
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%DISK_TARGET%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" ECHO. %XLR2%ERROR:%$$% Disk could not be converted to GPT. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_FINISH
FOR %%a in (DISK_DETECT DISK_NUMBER DISK_TARGET) DO (IF NOT DEFINED %%a ECHO. %XLR2%ERROR:%$$% Unable to query disk number or uid.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_FINISH)
SET "EFI_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "EFI_LETTER=%%G")
SET "PRI_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" IF NOT "%%G"=="%EFI_LETTER%" SET "PRI_LETTER=%%G")
SET "TST_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" IF NOT "%%G"=="%EFI_LETTER%" IF NOT "%%G"=="%PRI_LETTER%" SET "TST_LETTER=%%G")
ECHO. Creating partitions on disk uid %DISK_TARGET%...&&CALL:PART_CREATE
IF DEFINED ERROR GOTO:BOOT_CLEANUP
ECHO. Mounting temporary vdisk...&&MD "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
FOR %%a in (%PRI_LETTER%: %PRI_LETTER%:\%HOST_FOLDER%) DO (ICACLS "%%a" /deny everyone:^(DE,WA,WDAC^)>NUL 2>&1)
SET "VDISK=%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.vhdx"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE>NUL 2>&1
IF EXIST "%BOOT_FOLDER%\BOOT.SAV" ECHO. Extracting boot-media. Using boot.sav located in folder...&&COPY /Y "%BOOT_FOLDER%\boot.sav" "%PRI_LETTER%:\%HOST_FOLDER%\boot.wim">NUL 2>&1
SET "IMAGE_X=%PRI_LETTER%:\%HOST_FOLDER%\boot.wim"&&SET "INDEX_WORD=Setup"&&CALL:GET_WIMINDEX
IF NOT DEFINED INDEX_Z SET "INDEX_Z=1"
SET "IMAGE_X=%PRI_LETTER%:\%HOST_FOLDER%\boot.wim"&&SET "INDEX_X=%INDEX_Z%"&&CALL:GET_IMAGEINFO
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% File boot.sav is corrupt. Abort.&&GOTO:BOOT_CLEANUP
ECHO. v%$IMGVER%&&DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%PRI_LETTER%:\%HOST_FOLDER%\boot.wim" /INDEX:%INDEX_Z% /APPLYDIR:"%VDISK_LTR%:"&ECHO.&SET "INDEX_Z="
MOVE /Y "%PRI_LETTER%:\%HOST_FOLDER%\boot.wim" "%PRI_LETTER%:\%HOST_FOLDER%\boot.sav">NUL 2>&1
IF NOT EXIST "%VDISK_LTR%:\Windows" ECHO. %XLR2%ERROR:%$$% Files created with boot.sav are corrupt. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP
MD "%VDISK_LTR%:\$">NUL 2>&1
ECHO.%DISK_TARGET%>"%VDISK_LTR%:\$\HOST_TARGET"
ECHO.%HOST_FOLDER%>"%VDISK_LTR%:\$\HOST_FOLDER"
COPY /Y "%PROG_FOLDER%\windick.cmd" "%VDISK_LTR%:\$">NUL&COPY /Y "%PROG_FOLDER%\windick.cmd" "%PRI_LETTER%:\%HOST_FOLDER%">NUL&COPY /Y "%PROG_SOURCE%\windick.ini" "%PRI_LETTER%:\%HOST_FOLDER%">NUL
FOR %%a in (Boot EFI\Boot EFI\Microsoft\Boot) DO (MD %EFI_LETTER%:\%%a>NUL 2>&1)
IF EXIST "%BOOT_FOLDER%\boot.sdi" ECHO. Using boot.sdi located in folder, for efi image boot support.&&COPY /Y "%BOOT_FOLDER%\boot.sdi" "%EFI_LETTER%:\Boot">NUL
IF NOT EXIST "%BOOT_FOLDER%\boot.sdi" COPY /Y "%VDISK_LTR%:\Windows\Boot\DVD\EFI\boot.sdi" "%EFI_LETTER%:\Boot">NUL 2>&1
IF NOT EXIST "%EFI_LETTER%:\Boot\boot.sdi" ECHO. %XLR2%ERROR:%$$% boot.sdi missing. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP
IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" ECHO. Using bootmgfw.efi located in folder, for the efi bootloader.&&COPY /Y "%BOOT_FOLDER%\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL
IF NOT EXIST "%BOOT_FOLDER%\bootmgfw.efi" COPY /Y "%VDISK_LTR%:\Windows\Boot\EFI\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL 2>&1
IF NOT EXIST "%EFI_LETTER%:\EFI\Boot\bootx64.efi" ECHO. %XLR2%ERROR:%$$% bootmgfw.efi missing. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP
IF DEFINED PE_WALLPAPER IF EXIST "%CACHE_FOLDER%\%PE_WALLPAPER%" (ECHO. Using %PE_WALLPAPER% for the recovery wallpaper.
TAKEOWN /F "%VDISK_LTR%:\Windows\System32\setup.bmp">NUL 2>&1
ICACLS "%VDISK_LTR%:\Windows\System32\setup.bmp" /grant %USERNAME%:F>NUL 2>&1
COPY /Y "%CACHE_FOLDER%\%PE_WALLPAPER%" "%VDISK_LTR%:\Windows\System32\setup.bmp">NUL 2>&1)
IF EXIST "%VDISK_LTR%:\setup.exe" DEL /Q /F "\\?\%VDISK_LTR%:\setup.exe">NUL 2>&1
COPY /Y "%VDISK_LTR%:\Windows\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
::ECHO."%%SYSTEMDRIVE%%\$\windick.CMD">"%VDISK_LTR%:\WINDOWS\SYSTEM32\STARTNET.CMD"
(ECHO.[LaunchApp]&&ECHO.AppPath=X:\$\windick.cmd)>"%VDISK_LTR%:\Windows\System32\winpeshl.ini"
SET "VHDX_SLOTZ=%VHDX_SLOT0%"&&SET "VHDX_SLOT0=%VHDX_SLOTX%"&&SET "HOST_X=%HOST_FOLDER%"&&CALL:BCD_CREATE>NUL 2>&1
SET "VHDX_SLOT0=%VHDX_SLOTZ%"&&SET "VHDX_SLOTZ="&&IF NOT EXIST "%EFI_LETTER%:\EFI\Microsoft\Boot\BCD" ECHO. %XLR2%ERROR:%$$% BCD missing. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP
::DISM /IMAGE:"%VDISK_LTR%:" /SET-SCRATCHSPACE:512 >NUL 2>&1
ECHO. Saving boot-media...&&DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%VDISK_LTR%:" /IMAGEFILE:"%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.wim" /COMPRESS:%COMPRESS% /NAME:"WindowsPE" /CheckIntegrity /Verify /Bootable&ECHO.
SET "IMAGE_X=%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.wim"&&SET "INDEX_X=1"&&CALL:GET_IMAGEINFO
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% File boot.sav is corrupt. Abort.&&GOTO:BOOT_CLEANUP
SET "GET_SIZE=MB"&&SET "INPUT=%EFI_LETTER%:"&&SET "OUTPUT=EFI_FREE"&&CALL:GET_FREE
IF NOT DEFINED ERROR SET "GET_SIZE=MB"&&SET "INPUT=%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.wim"&&SET "OUTPUT=BOOT_X"&&CALL:GET_FILESIZE
IF NOT DEFINED ERROR SET /A "EFI_FREE+=%BOOT_X%"
IF DEFINED ERROR ECHO. %XLR2%ERROR:%$$% Unable to get file size or free space. Abort.&&GOTO:BOOT_CLEANUP
CALL:GET_SPACE&&FOR %%a in (EFI_FREE BOOT_X) DO (IF NOT DEFINED %%a SET "%%a=0")
IF %EFI_FREE% LEQ %BOOT_X% ECHO. %XLR2%ERROR:%$$% File boot.sav %BOOT_X%MB exceeds %EFI_FREE%MB. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP
FOR %%a in (0 ERROR) DO (IF "%FREE%"=="%%a" ECHO. %XLR2%ERROR:%$$% Not enough free space. Clear some space and try again. Abort.&&SET "ERROR=BOOT_CREATOR_START"&&GOTO:BOOT_CLEANUP)
IF NOT DEFINED ERROR MOVE /Y "%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.wim" "%EFI_LETTER%:\$.WIM">NUL
:BOOT_CLEANUP
ECHO. Unmounting temporary vdisk...&&SET "VDISK=%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.vhdx"&&CALL:VDISK_DETACH>NUL 2>&1
ECHO. Unmounting EFI...&&IF EXIST "%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.vhdx" DEL /Q /F "%PRI_LETTER%:\%HOST_FOLDER%\$TEMP.vhdx">NUL 2>&1
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_REMOVE
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_EFIX
IF NOT DEFINED ERROR (
IF EXIST "%PROG_SOURCE%\windick.ps1" ECHO. Copying windick.ps1... &&COPY /Y "%PROG_SOURCE%\windick.ps1" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
IF EXIST "%BOOT_FOLDER%\boot.sdi" ECHO. Copying boot.sdi...&&COPY /Y "%BOOT_FOLDER%\boot.sdi" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" ECHO. Copying bootmgfw.efi...&&COPY /Y "%BOOT_FOLDER%\bootmgfw.efi" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
IF DEFINED PE_WALLPAPER IF EXIST "%CACHE_FOLDER%\%PE_WALLPAPER%" ECHO. Copying %PE_WALLPAPER%... &&COPY /Y "%CACHE_FOLDER%\%PE_WALLPAPER%" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (CALL SET "ADDFILE_CHK=%%ADDFILE_%%a%%"&&CALL:ADDFILE_COPY)
IF DEFINED VHDX_SLOTX IF EXIST "%IMAGE_FOLDER%\%VHDX_SLOTX%" IF EXIST "%PRI_LETTER%:\%HOST_FOLDER%" ECHO. Copying %VHDX_SLOTX%......&&COPY /Y "%IMAGE_FOLDER%\%VHDX_SLOTX%" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1)
CALL SET "VDISK_CHK=%%DISK_%DISK_DETECT%%%"
IF "%VDISK_CHK%"=="VDISK" SET "$LTR=%PRI_LETTER%"&&CALL:DISKMGR_UNMOUNT
:BOOT_FINISH
SET "ADDFILE_CHK="&&SET "VDISK_CHK="&&SET "PATH_TEMP="&&SET "PATH_FILE="&&SET "EFI_LETTER="&&SET "PRI_LETTER="&&SET "TST_LETTER="&&IF "%PROG_MODE%"=="RAMDISK" CALL:HOST_AUTO>NUL 2>&1
CALL:DEL_DSK&&ECHO.&&ECHO.            %@@%BOOT CREATOR END:%$$%  %DATE%  %TIME%&&SET "$BOX=SB"&&CALL:BOX_DISP
IF NOT "%PROG_MODE%"=="COMMAND" CALL:PAUSED
EXIT /B
:ADDFILE_COPY
IF "%ADDFILE_CHK%"=="SELECT" EXIT /B
SET "PATH_TEMP="&&SET "PATH_FILE="&&FOR /F "TOKENS=1-9 DELIMS=\" %%a in ("%ADDFILE_CHK%") DO (
IF "%%a"=="pack" SET "PATH_TEMP=%PACK_FOLDER%"&&SET "PATH_FILE=%%b"
IF "%%a"=="list" SET "PATH_TEMP=%LIST_FOLDER%"&&SET "PATH_FILE=%%b"
IF "%%a"=="image" SET "PATH_TEMP=%IMAGE_FOLDER%"&&SET "PATH_FILE=%%b"
IF "%%a"=="cache" SET "PATH_TEMP=%CACHE_FOLDER%"&&SET "PATH_FILE=%%b"
IF "%%a"=="main" SET "PATH_TEMP=%PROG_SOURCE%"&&SET "PATH_FILE=%%b")
IF DEFINED PATH_TEMP IF DEFINED PATH_FILE IF EXIST "%PATH_TEMP%\%PATH_FILE%" IF NOT EXIST "%PATH_TEMP%\%PATH_FILE%\*" ECHO. Copying %PATH_FILE%...&&COPY /Y "%PATH_TEMP%\%PATH_FILE%" "%PRI_LETTER%:\%HOST_FOLDER%">NUL 2>&1
EXIT /B
:BCD_MENU
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&IF NOT DEFINED BOOT_TIMEOUT SET "BOOT_TIMEOUT=5"
ECHO.                           Boot Menu Editor&&ECHO.&&ECHO. Time (%##%T%$$%^) %@@%%BOOT_TIMEOUT%%$$% seconds
IF NOT DEFINED NEXT_BOOT SET "BOOT_TARGET=GET"&&CALL:BOOT_TOGGLE
IF "%NEXT_BOOT%"=="RECOVERY" ECHO. Slot (%##%*%$$%) %@@%Recovery%$$%
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (CALL ECHO. Slot ^(%##%%%G%$$%^) %@@%%%VHDX_SLOT%%G%%%$$%)
IF "%NEXT_BOOT%"=="VHDX" ECHO. Slot (%##%*%$$%) %@@%Recovery%$$%
ECHO.&&ECHO.                Press (%##%X%$$%) to apply boot menu settings&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
IF "%SELECT%"=="T" CALL:BOOT_TIMEOUT&SET "SELECT="
IF "%SELECT%"=="*" IF "%NEXT_BOOT%"=="RECOVERY" SET "NEXT_BOOT=VHDX"&&SET "SELECT="
IF "%SELECT%"=="*" IF "%NEXT_BOOT%"=="VHDX" SET "NEXT_BOOT=RECOVERY"&&SET "SELECT="
IF "%SELECT%"=="X" IF "%PROG_MODE%"=="RAMDISK" CALL:BCD_REBUILD&SET "SELECT="
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (IF "%SELECT%"=="%%G" SET "$VHDX=%%G"&&CALL:VHDX_CHECK&SET "SELECT=")
GOTO:BCD_MENU
:BOOT_TIMEOUT
CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.&&ECHO.                  Enter boot menu timeout in seconds&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$CHECK=NUM"&&SET "NO_ASTRK=1"&&SET "NO_SPACE=1"&&CALL:MENU_SELECT
IF NOT DEFINED ERROR IF NOT "%SELECT%"=="0" SET "BOOT_TIMEOUT=%SELECT%"
IF DEFINED ERROR SET "BOOT_TIMEOUT="
EXIT /B
:VHDX_CHECK
IF "%$VHDX%"=="X" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                             Boot Creator&&ECHO.&&ECHO.  %@@%AVAILABLE VHDXs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%IMAGE_FOLDER%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%$VHDX%"=="X" IF "%SELECT%"=="." SET "FILE_TYPE=VHDX"&&CALL:BASIC_FILE&SET "ERROR=NONE"&&CALL:DEBUG&EXIT /B
IF NOT "%$VHDX%"=="X" CLS&&CALL:PAD_LINE&&SET "$BOX=RT"&&CALL:BOX_DISP&&ECHO.                           Boot Menu Editor&&ECHO.&&ECHO.  %@@%MAIN FOLDER VHDXs:%$$%&&ECHO.&&ECHO. ( %##%.%$$% ) File Operation&&SET "$FOLD=%PROG_SOURCE%"&&SET "$FILT=*.VHDX"&&CALL:FILE_LIST&&ECHO.&&SET "$BOX=RB"&&CALL:BOX_DISP&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%$VHDX%"=="X" IF "%SELECT%"=="." SET "FILE_TYPE=MAIN"&&CALL:BASIC_FILE&SET "ERROR=NONE"&&CALL:DEBUG&EXIT /B
IF NOT DEFINED $PICK SET "VHDX_SLOT%$VHDX%="&&SET "$VHDX="&&EXIT /B
SET "CHAR_STR=%$CHOICE%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG ECHO.&&ECHO.      %XLR4%ERROR:%$$% Remove the space from the VHDX name, then try again.&&ECHO.&&SET "VHDX_SLOT%$VHDX%="&&CALL:PAUSED
IF NOT DEFINED CHAR_FLG SET "VHDX_SLOT%$VHDX%=%$CHOICE%"
SET "$VHDX="
EXIT /B
:BOOT_TOGGLE
CALL:GET_NEXTBOOT
IF NOT DEFINED BOOT_OK EXIT /B
IF NOT "%BOOT_TARGET%"=="VHDX" IF NOT "%BOOT_TARGET%"=="RECOVERY" EXIT /B
IF "%BOOT_TARGET%"=="VHDX" SET "NEXT_BOOT=VHDX"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addlast>NUL 2>&1
IF "%BOOT_TARGET%"=="RECOVERY" SET "NEXT_BOOT=RECOVERY"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst>NUL 2>&1
CALL:GET_NEXTBOOT&&SET "BOOT_TARGET="
EXIT /B
:BCD_CREATE
IF NOT DEFINED BOOT_TIMEOUT SET "BOOT_TIMEOUT=5"
SET "BCD_KEY=BCD00000001"&&SET "BCD_FILE=%TEMP%\$BCD"
FOR %%a in (BCD BCD1 $BCD) DO (IF EXIST "%TEMP%\%%a" DEL /Q /F "%TEMP%\%%a" >NUL)
BCDEDIT.EXE /createstore "%BCD_FILE%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /create {bootmgr}
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} description "Boot Manager"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} device boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} timeout %BOOT_TIMEOUT%
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /device') do SET "RAMDISK={%%a}"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %RAMDISK% ramdisksdidevice boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %RAMDISK% ramdisksdipath \boot\boot.sdi
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /application osloader') do SET "BCD_GUID={%%a}"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% detecthal Yes
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% winpe Yes
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \windows\system32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "Recovery"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addlast
FOR %%a in (9 8 7 6 5 4 3 2 1 0) DO (CALL SET "BCD_NAME=%%VHDX_SLOT%%a%%"&&CALL:BCD_VHDX)
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%TEMP%\$BCD">NUL 2>&1
REG EXPORT HKLM\%BCD_KEY% "%TEMP%\BCD1"
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
SET "BCD_FILE=%TEMP%\BCD"&&IF NOT EXIST "%TEMP%\BCD" COPY /Y "%WINDIR%\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG IMPORT "%TEMP%\BCD1" >NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "KeyName" /t REG_SZ /d "%BCD_KEY%" /f>NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "System" /t REG_DWORD /d "1" /f>NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "TreatAsSystem" /t REG_DWORD /d "1" /f>NUL 2>&1
REG.exe delete "HKLM\%BCD_KEY%" /v "FirmwareModified" /f>NUL 2>&1
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
IF EXIST "%BCD_FILE%" COPY /Y "%BCD_FILE%" "%EFI_LETTER%:\EFI\Microsoft\Boot\BCD">NUL 2>&1
FOR %%a in (BCD BCD1 $BCD) DO (IF EXIST "%TEMP%\%%a" DEL /Q /F "%TEMP%\%%a" >NUL)
SET "BCD_GUID="&&SET "BCD_FILE="&&SET "BCD_KEY="&&SET "BCD_NAME="&&EXIT /B
:BCD_VHDX
IF NOT DEFINED BCD_NAME EXIT /B
IF "%BCD_NAME%"=="SELECT" EXIT /B
FOR /f "TOKENS=3" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /application osloader') do SET "BCD_GUID=%%a"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device vhd=[locate]\%HOST_X%\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \Windows\SYSTEM32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice vhd=[locate]\%HOST_X%\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "%BCD_NAME%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addfirst
EXIT /B
:BCD_REBUILD
ECHO. Saving boot menu...&&CALL:EFI_MOUNT
IF NOT DEFINED ERROR SET "HOST_X=%HOST_FOLDERX%"&&CALL:BCD_CREATE>NUL 2>&1
CALL:EFI_UNMOUNT&SET "BOOT_TARGET=%NEXT_BOOT%"&&CALL:BOOT_TOGGLE&&ECHO. Done.
EXIT /B
:QUIT
IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_HIDE%"=="ENABLED" CALL:HOST_HIDE
IF DEFINED PAUSE_END SET /P "PAUSED=Press (%##%Enter%$$%) to continue..."
COLOR&&TITLE C:\Windows\system32\CMD.exe&&CD /D "%ORIG_CD%"
IF "%PROG_MODE%"=="RAMDISK" EXIT 0&&EXIT 0